Index: notebooks/3_model_training_and_testing/gemini_oneshot/gemini_anonymizer.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#!/usr/bin/env python3\n\"\"\"\nGemini Email Anonymization Pipeline (Anchor-Align Version)\n\nThis version sends raw text to Gemini, which returns anonymized text where\nPII spans are replaced by placeholders like <<VORNAME>>. We then recover the\ncharacter spans of the original PII by aligning the anonymized text back to\nthe original using a forward, monotonic, anchor-based algorithm.\n\nFeatures:\n- Handles repeated entities (each <<LABEL>> becomes its own span).\n- More robust to whitespace changes and mild rephrasing than raw difflib.\n- Outputs one combined JSON list with records containing:\n    {\n      \"file\": <filename>,\n      \"text_length\": <len(original_text)>,\n      \"anonymized_text\": <Gemini_output>,\n      \"entities\": [{\"start\":int,\"end\":int,\"label\":str}, ...]\n    }\n\nNOTE: The recovered spans are heuristic; for strict benchmarking prefer an LLM\nmode that returns spans directly.\n\"\"\"\n\nimport os\nimport sys\nimport json\nimport re\nimport getpass\nimport logging\nfrom dataclasses import dataclass\nfrom pathlib import Path\nfrom typing import List, Dict, Tuple, Optional\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\nfrom difflib import SequenceMatcher\n\nimport google.generativeai as genai\n\n# ---------------------------------------------------------------------------\n# Logging\n# ---------------------------------------------------------------------------\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(levelname)s - %(message)s\"\n)\nlogger = logging.getLogger(__name__)\n\n\n# ---------------------------------------------------------------------------\n# Constants\n# ---------------------------------------------------------------------------\nPLACEHOLDER_RE = re.compile(r\"<<([A-Z_]+)(?:_[0-9]+)?>>\")  # accept optional numeric suffix\nNBSP = \"\\xa0\"\n\n\n@dataclass\nclass EntitySpan:\n    start: int\n    end: int\n    label: str\n\n\n# ---------------------------------------------------------------------------\n# Alignment utilities\n# ---------------------------------------------------------------------------\n\ndef _normalize_ws(s: str) -> str:\n    \"\"\"Light normalization for fallback search (replace NBSP with space).\"\"\"\n    return s.replace(NBSP, \" \")\n\n\ndef _find_forward(haystack: str, needle: str, start: int) -> int:\n    \"\"\"Exact substring search from `start`; return index or -1.\"\"\"\n    return haystack.find(needle, start)\n\n\ndef _find_forward_norm(haystack: str, needle: str, start: int) -> int:\n    \"\"\"Substring search under light whitespace normalization; maps index via length diff.\n\n    Because NBSP->space preserves string length, we can reuse index.\n    If you extend normalization, adjust mapping logic!\n    \"\"\"\n    hs = _normalize_ws(haystack)\n    nd = _normalize_ws(needle)\n    return hs.find(nd, start)\n\n\ndef _find_forward_fuzzy(haystack: str, needle: str, start: int, min_ratio: float = 0.6) -> int:\n    \"\"\"Fuzzy forward search using difflib longest match; returns start index or -1.\"\"\"\n    if not needle:\n        return start\n    sub = haystack[start:]\n    if not sub:\n        return -1\n    sm = SequenceMatcher(None, needle, sub)\n    m = sm.find_longest_match(0, len(needle), 0, len(sub))\n    if m.size == 0:\n        return -1\n    ratio = m.size / max(len(needle), 1)\n    if ratio < min_ratio:\n        return -1\n    return start + m.b  # map back into full haystack\n\n\ndef _tokenize_anonymized(text: str) -> List[Dict]:\n    \"\"\"Split anonymized text into [{'type':'TXT'|'PLH','text':..., 'label':...}] tokens.\"\"\"\n    tokens: List[Dict] = []\n    pos = 0\n    for m in PLACEHOLDER_RE.finditer(text):\n        if m.start() > pos:\n            tokens.append({\"type\": \"TXT\", \"text\": text[pos:m.start()]})\n        tokens.append({\"type\": \"PLH\", \"text\": m.group(0), \"label\": m.group(1)})\n        pos = m.end()\n    if pos < len(text):\n        tokens.append({\"type\": \"TXT\", \"text\": text[pos:]})\n    return tokens\n\n\ndef extract_spans_anchor(\n    original: str,\n    anonymized: str,\n    *,\n    fuzzy: bool = True,\n    min_fuzzy_ratio: float = 0.6,\n) -> List[Dict]:\n    \"\"\"Recover PII spans in `original` from anonymized Gemini output.\n\n    Algorithm (monotonic forward alignment):\n      - Tokenize anonymized into literal text + placeholders.\n      - Maintain pointer `o_ptr` in original.\n      - For each token:\n          * TXT: align this literal in original at/after o_ptr -> advance o_ptr.\n          * PLH: span start = o_ptr; find next literal token (suffix) to anchor span end.\n                  If suffix aligns at index `idx`, span end = idx.\n                  Else span end = len(original) (consume rest).\n                  Record span {start,end,label}.  Do not advance o_ptr yet; the next TXT\n                  token will align and advance.  To prevent loops when suffix missing,\n                  set o_ptr = span_end.\n    \"\"\"\n    tokens = _tokenize_anonymized(anonymized)\n    spans: List[Dict] = []\n    n = len(original)\n    o_ptr = 0  # where we are in original\n\n    # Pre-scan indexes of TXT tokens for quick lookahead\n    txt_indexes = [i for i, t in enumerate(tokens) if t[\"type\"] == \"TXT\"]\n\n    def align_literal(lit: str, start_idx: int) -> Optional[int]:\n        \"\"\"Return end index in original after aligning literal starting at start_idx.\n        Returns None if alignment fails.\"\"\"\n        if not lit:\n            return start_idx\n        idx = _find_forward(original, lit, start_idx)\n        if idx == -1:\n            idx = _find_forward_norm(original, lit, start_idx)\n        if idx == -1 and fuzzy:\n            idx = _find_forward_fuzzy(original, lit, start_idx, min_ratio=min_fuzzy_ratio)\n        if idx == -1:\n            return None\n        return idx + len(lit)\n\n    i = 0\n    while i < len(tokens):\n        tok = tokens[i]\n        if tok[\"type\"] == \"TXT\":\n            lit = tok[\"text\"]\n            new_ptr = align_literal(lit, o_ptr)\n            if new_ptr is None:\n                # best-effort resync: search first char\n                if lit:\n                    ch = lit[0]\n                    idx = original.find(ch, o_ptr)\n                    if idx != -1:\n                        new_ptr = idx + len(lit)\n                        logger.warning(\"Literal alignment fallback on char match.\")\n                    else:\n                        logger.warning(\"Failed to align literal; forcing end-of-original.\")\n                        new_ptr = n\n                else:\n                    new_ptr = o_ptr\n            o_ptr = min(new_ptr, n)\n            i += 1\n            continue\n\n        # Placeholder token\n        label = tok[\"label\"]\n        span_start = o_ptr\n\n        # Find the next TXT token to use as suffix anchor\n        suffix_txt = None\n        for j in range(i+1, len(tokens)):\n            if tokens[j][\"type\"] == \"TXT\":\n                suffix_txt = tokens[j][\"text\"]\n                break\n\n        if suffix_txt is not None:\n            # attempt to locate suffix in original starting at o_ptr\n            idx = _find_forward(original, suffix_txt, o_ptr)\n            if idx == -1:\n                idx = _find_forward_norm(original, suffix_txt, o_ptr)\n            if idx == -1 and fuzzy:\n                idx = _find_forward_fuzzy(original, suffix_txt, o_ptr, min_ratio=min_fuzzy_ratio)\n            if idx == -1:\n                logger.warning(\"Suffix literal not found; expanding placeholder to end-of-original.\")\n                span_end = n\n            else:\n                span_end = idx  # end at start of suffix\n        else:\n            # no suffix -> consume rest of original\n            span_end = n\n\n        if span_end < span_start:\n            logger.warning(\"Correcting negative-length span.\")\n            span_end = span_start\n\n        spans.append({\"start\": span_start, \"end\": span_end, \"label\": label})\n\n        # Advance o_ptr to span_end; the suffix TXT (if any) will advance further in its own turn\n        o_ptr = min(span_end, n)\n        i += 1\n\n    # Clip & drop empties\n    clean: List[Dict] = []\n    for s in spans:\n        st = max(0, min(n, s[\"start\"]))\n        en = max(st, min(n, s[\"end\"]))\n        if en > st:\n            clean.append({\"start\": st, \"end\": en, \"label\": s[\"label\"]})\n        else:\n            logger.warning(f\"Dropping zero-length span: {s}\")\n    # Sort by start for consistency\n    clean.sort(key=lambda x: x[\"start\"])\n    return clean\n\n\n# ---------------------------------------------------------------------------\n# Gemini anonymizer wrapper\n# ---------------------------------------------------------------------------\nclass GeminiAnonymizer:\n    \"\"\"Handle Gemini API-based email anonymization and span recovery.\"\"\"\n\n    TARGET_LABELS = [\n        'NACHNAME', 'VORNAME', 'STRASSE', 'POSTLEITZAHL', 'WOHNORT',\n        'HAUSNUMMER', 'VERTRAGSNUMMER', 'DATUM', 'ZÄHLERNUMMER',\n        'TELEFONNUMMER', 'GESENDET_MIT', 'ZAHLUNG', 'FIRMA', 'TITEL',\n        'EMAIL', 'ZÄHLERSTAND', 'LINK', 'IBAN', 'BANK', 'BIC', 'FAX'\n    ]\n\n    def __init__(self, api_key: str, model_name: str = \"gemini-1.5-flash\"):\n        genai.configure(api_key=api_key)\n        # Force low temperature for determinism if supported; fall back gracefully\n        try:\n            self.model = genai.GenerativeModel(model_name, generation_config={\"temperature\": 0})\n        except Exception:  # older SDKs may not support generation_config here\n            self.model = genai.GenerativeModel(model_name)\n\n    def _create_anonymization_prompt(self, text: str) -> str:\n        labels_str = \"', '\".join(self.TARGET_LABELS)\n        # Encourage model to output placeholders *for each occurrence*.\n        return f\"\"\"You are an expert text anonymization system. Your task is to identify and replace sensitive entities in German email text with anonymization placeholders.\\n\\nIMPORTANT RULES:\\n1. Only replace entities that match these 21 labels: ['{labels_str}']\\n2. Replace *each* detected entity occurrence with <<LABEL>> (e.g., <<VORNAME>>, <<NACHNAME>>). If the same type appears multiple times, repeat the placeholder each time.\\n3. Preserve the original text structure, formatting, and whitespace exactly where possible.\\n4. Do not modify any text that doesn't contain sensitive entities.\\n5. Return ONLY the anonymized text, no explanations or metadata.\\n\\nLABEL DEFINITIONS:\\n- NACHNAME: Last names/surnames\\n- VORNAME: First names/given names\\n- STRASSE: Street names\\n- POSTLEITZAHL: Postal codes\\n- WOHNORT: City/town names\\n- HAUSNUMMER: House numbers\\n- VERTRAGSNUMMER: Contract numbers, all other sensitive numbers that are not defined in other categories\\n- DATUM: Dates in any format\\n- ZÄHLERNUMMER: Meter numbers\\n- TELEFONNUMMER: Phone numbers\\n- GESENDET_MIT: \\\"Sent with\\\" messages\\n- ZAHLUNG: Payment information\\n- FIRMA: Company names\\n- TITEL: Titles (e.g., Dr., Dipl.)\\n- EMAIL: Email addresses\\n- ZÄHLERSTAND: Meter readings, could be in m3 or kWh or without units\\n- LINK: URLs and web links\\n- IBAN: Bank account numbers\\n- BANK: Bank names\\n- BIC: Bank identifier codes\\n- FAX: Fax numbers\\n\\nTEXT TO ANONYMIZE:\\n{text}\\n\\nANONYMIZED TEXT:\"\"\"\n\n    def call_gemini_api(self, text: str) -> str:\n        \"\"\"Call the Gemini API to anonymize the given text. On error, return original.\"\"\"\n        try:\n            prompt = self._create_anonymization_prompt(text)\n            response = self.model.generate_content(prompt)\n            # Avoid .strip() which can remove leading/trailing newlines that may matter for alignment.\n            if response and hasattr(response, 'text') and response.text is not None:\n                # Soft trim trailing carriage returns; keep leading spacing\n                return response.text.rstrip(\"\\r\")\n        except Exception as e:\n            logger.error(f\"Error calling Gemini API: {e}\")\n        # fallback\n        return text\n\n    # Override extract_spans with anchor algorithm\n    def extract_spans(self, original: str, anonymized: str) -> List[Dict]:\n        return extract_spans_anchor(original, anonymized)\n\n    def process_file(self, path: str) -> Dict:\n        \"\"\"Process a single .txt file and return its result dict.\"\"\"\n        logger.info(f\"Processing file: {path}\")\n        original = Path(path).read_text(encoding='utf-8')\n        anonymized = self.call_gemini_api(original)\n        spans = self.extract_spans(original, anonymized)\n        return {\n            \"file\": Path(path).name,\n            \"text_length\": len(original),\n            \"anonymized_text\": anonymized,\n            \"entities\": spans,\n        }\n\n    def process_json_file(self, json_path: str) -> List[Dict]:\n        \"\"\"Process a JSON file of entries; return list of result dicts.\"\"\"\n        logger.info(f\"Processing JSON file: {json_path}\")\n        data = json.loads(Path(json_path).read_text(encoding='utf-8'))\n        results: List[Dict] = []\n        for entry in data:\n            if not isinstance(entry, dict):\n                continue\n            text = entry.get(\"text\", \"\")\n            fname = entry.get(\"file\", \"unknown.txt\")\n            anonymized = self.call_gemini_api(text)\n            spans = self.extract_spans(text, anonymized)\n            results.append({\n                \"file\": fname,\n                \"text_length\": len(text),\n                \"anonymized_text\": anonymized,\n                \"entities\": spans,\n            })\n        return results\n\n    def process_directory_parallel(self, dir_path: str, max_workers: int = 5) -> List[Dict]:\n        \"\"\"Process all .txt files in a directory in parallel.\"\"\"\n        files = list(Path(dir_path).glob(\"*.txt\"))\n        results: List[Dict] = []\n        with ThreadPoolExecutor(max_workers=max_workers) as executor:\n            future_to_file = {executor.submit(self.process_file, str(fp)): fp for fp in files}\n            for future in as_completed(future_to_file):\n                fp = future_to_file[future]\n                try:\n                    results.append(future.result())\n                except Exception as e:\n                    logger.error(f\"Error processing {fp.name}: {e}\")\n                    results.append({\n                        \"file\": fp.name,\n                        \"text_length\": 0,\n                        \"anonymized_text\": None,\n                        \"entities\": [],\n                        \"error\": str(e),\n                    })\n        return results\n\n    def process_json_parallel(self, json_path: str, max_workers: int = 5) -> List[Dict]:\n        \"\"\"Process JSON entries in parallel.\"\"\"\n        data = json.loads(Path(json_path).read_text(encoding='utf-8'))\n        entries = [e for e in data if isinstance(e, dict) and \"text\" in e and \"file\" in e]\n        results: List[Dict] = []\n        with ThreadPoolExecutor(max_workers=max_workers) as executor:\n            future_to_entry = {executor.submit(self._process_entry, entry): entry for entry in entries}\n            for future in as_completed(future_to_entry):\n                entry = future_to_entry[future]\n                try:\n                    results.append(future.result())\n                except Exception as e:\n                    fname = entry.get(\"file\", \"unknown.txt\")\n                    logger.error(f\"Error on entry {fname}: {e}\")\n                    results.append({\n                        \"file\": fname,\n                        \"text_length\": len(entry.get(\"text\", \"\")),\n                        \"anonymized_text\": None,\n                        \"entities\": [],\n                        \"error\": str(e),\n                    })\n        return results\n\n    def _process_entry(self, entry: Dict) -> Dict:\n        \"\"\"Helper for JSON parallel processing.\"\"\"\n        fname = entry[\"file\"]\n        text = entry[\"text\"]\n        anonymized = self.call_gemini_api(text)\n        spans = self.extract_spans(text, anonymized)\n        return {\n            \"file\": fname,\n            \"text_length\": len(text),\n            \"anonymized_text\": anonymized,\n            \"entities\": spans,\n        }\n\n\ndef main():\n    # 1) Load API key (prompt if needed)\n    api_key = os.environ.get(\"GEMINI_API_KEY\")\n    if not api_key:\n        api_key = getpass.getpass(\"Enter your Gemini API key: \")\n        if not api_key:\n            logger.error(\"No API key provided.\")\n            return 1\n\n    # 2) Hard-coded paths and settings (edit as needed)\n    input_path = \"../../../data/original/ground_truth_split/test_norm.json\"\n    output_dir = \"../../../data/testing/gemini_results\"\n    model_name = \"gemini-1.5-flash\"\n    max_workers = 5\n\n    # 3) Ensure output directory exists\n    Path(output_dir).mkdir(parents=True, exist_ok=True)\n\n    # 4) Initialize anonymizer\n    anonymizer = GeminiAnonymizer(api_key, model_name)\n\n    # 5) Run in parallel and collect results\n    inp = Path(input_path)\n    if inp.is_file() and inp.suffix.lower() == \".json\":\n        results = anonymizer.process_json_parallel(str(inp), max_workers=max_workers)\n    elif inp.is_dir():\n        results = anonymizer.process_directory_parallel(str(inp), max_workers=max_workers)\n    else:\n        logger.error(f\"Invalid input path: {inp}\")\n        return 1\n\n    # 6) Write a single combined JSON\n    combined_file = Path(output_dir) / \"combined_results.json\"\n    with combined_file.open(\"w\", encoding=\"utf-8\") as f:\n        json.dump(results, f, ensure_ascii=False, indent=2)\n    logger.info(f\"Wrote combined results ({len(results)} entries) to {combined_file}\")\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notebooks/3_model_training_and_testing/gemini_oneshot/gemini_anonymizer.py b/notebooks/3_model_training_and_testing/gemini_oneshot/gemini_anonymizer.py
--- a/notebooks/3_model_training_and_testing/gemini_oneshot/gemini_anonymizer.py	(revision 68e3fd01408523769b50e7566e6fd0db7c5afb8a)
+++ b/notebooks/3_model_training_and_testing/gemini_oneshot/gemini_anonymizer.py	(date 1753912369953)
@@ -246,7 +246,7 @@
         'EMAIL', 'ZÄHLERSTAND', 'LINK', 'IBAN', 'BANK', 'BIC', 'FAX'
     ]
 
-    def __init__(self, api_key: str, model_name: str = "gemini-1.5-flash"):
+    def __init__(self, api_key: str, model_name: str = "gemini-2.5-flash"):
         genai.configure(api_key=api_key)
         # Force low temperature for determinism if supported; fall back gracefully
         try:
@@ -370,6 +370,7 @@
 
 def main():
     # 1) Load API key (prompt if needed)
+    print("Start Gemini Anonymization Process")
     api_key = os.environ.get("GEMINI_API_KEY")
     if not api_key:
         api_key = getpass.getpass("Enter your Gemini API key: ")
@@ -379,8 +380,8 @@
 
     # 2) Hard-coded paths and settings (edit as needed)
     input_path = "../../../data/original/ground_truth_split/test_norm.json"
-    output_dir = "../../../data/testing/gemini_results"
-    model_name = "gemini-1.5-flash"
+    output_dir = "../../../data/testing/gemini_results_2.5"
+    model_name = "gemini-2.5-flash"
     max_workers = 5
 
     # 3) Ensure output directory exists
Index: notebooks/3_model_training_and_testing/gemini_oneshot/gemini_evaluation.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#!/usr/bin/env python3\n\"\"\"\nEvaluation Script for Gemini PII Detection Results\n\nCompares Gemini-detected entities against ground truth labels and computes\nprecision, recall, and F1-score metrics at both entity-level and token-level.\n\"\"\"\n\nimport json\nimport logging\nfrom pathlib import Path\nfrom typing import Dict, List, Set, Tuple\nfrom collections import defaultdict, Counter\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(levelname)s - %(message)s\"\n)\nlogger = logging.getLogger(__name__)\n\n\nclass EntityEvaluator:\n    \"\"\"Evaluates entity detection performance against ground truth.\"\"\"\n\n    def __init__(self, ground_truth_path: str, predictions_path: str):\n        \"\"\"Initialize with paths to ground truth and predictions.\"\"\"\n        self.ground_truth_path = ground_truth_path\n        self.predictions_path = predictions_path\n\n    def load_ground_truth(self) -> Dict[str, Dict]:\n        \"\"\"Load ground truth data indexed by filename.\"\"\"\n        data = json.loads(Path(self.ground_truth_path).read_text(encoding='utf-8'))\n        gt_by_file = {}\n        for entry in data:\n            filename = entry.get(\"file\", \"\")\n            gt_by_file[filename] = {\n                \"text\": entry.get(\"text\", \"\"),\n                \"entities\": entry.get(\"labels\", [])  # Ground truth uses 'labels' key\n            }\n        return gt_by_file\n\n    def load_predictions(self) -> Dict[str, Dict]:\n        \"\"\"Load prediction data indexed by filename.\"\"\"\n        data = json.loads(Path(self.predictions_path).read_text(encoding='utf-8'))\n        pred_by_file = {}\n        for entry in data:\n            filename = entry.get(\"file\", \"\")\n            pred_by_file[filename] = {\n                \"text_length\": entry.get(\"text_length\", 0),\n                \"entities\": entry.get(\"entities\", [])\n            }\n        return pred_by_file\n\n    def normalize_entity(self, entity: Dict) -> Tuple[int, int, str]:\n        \"\"\"Normalize entity to (start, end, label) tuple.\"\"\"\n        return (entity[\"start\"], entity[\"end\"], entity[\"label\"])\n\n    def get_entity_spans(self, entities: List[Dict]) -> Set[Tuple[int, int, str]]:\n        \"\"\"Convert entity list to set of (start, end, label) tuples.\"\"\"\n        return {self.normalize_entity(e) for e in entities}\n\n    def get_token_level_spans(self, entities: List[Dict], text: str) -> Set[Tuple[int, str]]:\n        \"\"\"Convert entities to character-level (position, label) pairs.\"\"\"\n        token_spans = set()\n        for entity in entities:\n            start, end, label = entity[\"start\"], entity[\"end\"], entity[\"label\"]\n            # Validate bounds\n            if 0 <= start < end <= len(text):\n                for pos in range(start, end):\n                    token_spans.add((pos, label))\n        return token_spans\n\n    def compute_metrics(self, true_set: Set, pred_set: Set) -> Dict[str, float]:\n        \"\"\"Compute precision, recall, and F1-score for two sets.\"\"\"\n        tp = len(true_set & pred_set)\n        fp = len(pred_set - true_set)\n        fn = len(true_set - pred_set)\n\n        precision = tp / (tp + fp) if (tp + fp) > 0 else 0.0\n        recall = tp / (tp + fn) if (tp + fn) > 0 else 0.0\n        f1 = 2 * precision * recall / (precision + recall) if (precision + recall) > 0 else 0.0\n\n        return {\n            \"precision\": precision,\n            \"recall\": recall,\n            \"f1\": f1,\n            \"tp\": tp,\n            \"fp\": fp,\n            \"fn\": fn\n        }\n\n    def compute_label_metrics(self, gt_entities: List[Dict], pred_entities: List[Dict],\n                              text: str) -> Dict[str, Dict]:\n        \"\"\"Compute per-label metrics.\"\"\"\n        # Group entities by label\n        gt_by_label = defaultdict(list)\n        pred_by_label = defaultdict(list)\n\n        for entity in gt_entities:\n            gt_by_label[entity[\"label\"]].append(entity)\n\n        for entity in pred_entities:\n            pred_by_label[entity[\"label\"]].append(entity)\n\n        # Get all labels\n        all_labels = set(gt_by_label.keys()) | set(pred_by_label.keys())\n\n        label_metrics = {}\n        for label in all_labels:\n            gt_spans = self.get_entity_spans(gt_by_label[label])\n            pred_spans = self.get_entity_spans(pred_by_label[label])\n            label_metrics[label] = self.compute_metrics(gt_spans, pred_spans)\n\n        return label_metrics\n\n    def evaluate_file(self, filename: str, gt_data: Dict, pred_data: Dict) -> Dict:\n        \"\"\"Evaluate predictions for a single file.\"\"\"\n        gt_text = gt_data[\"text\"]\n        gt_entities = gt_data[\"entities\"]\n        pred_entities = pred_data[\"entities\"]\n\n        # Entity-level evaluation (exact span + label match)\n        gt_entity_spans = self.get_entity_spans(gt_entities)\n        pred_entity_spans = self.get_entity_spans(pred_entities)\n        entity_metrics = self.compute_metrics(gt_entity_spans, pred_entity_spans)\n\n        # Token-level evaluation (character position + label match)\n        gt_token_spans = self.get_token_level_spans(gt_entities, gt_text)\n        pred_token_spans = self.get_token_level_spans(pred_entities, gt_text)\n        token_metrics = self.compute_metrics(gt_token_spans, pred_token_spans)\n\n        # Per-label metrics\n        label_metrics = self.compute_label_metrics(gt_entities, pred_entities, gt_text)\n\n        return {\n            \"filename\": filename,\n            \"entity_metrics\": entity_metrics,\n            \"token_metrics\": token_metrics,\n            \"label_metrics\": label_metrics,\n            \"gt_entity_count\": len(gt_entities),\n            \"pred_entity_count\": len(pred_entities),\n            \"text_length\": len(gt_text)\n        }\n\n    def aggregate_metrics(self, file_results: List[Dict]) -> Dict:\n        \"\"\"Aggregate metrics across all files.\"\"\"\n        # Aggregate entity-level metrics\n        total_entity_tp = sum(r[\"entity_metrics\"][\"tp\"] for r in file_results)\n        total_entity_fp = sum(r[\"entity_metrics\"][\"fp\"] for r in file_results)\n        total_entity_fn = sum(r[\"entity_metrics\"][\"fn\"] for r in file_results)\n\n        # Aggregate token-level metrics\n        total_token_tp = sum(r[\"token_metrics\"][\"tp\"] for r in file_results)\n        total_token_fp = sum(r[\"token_metrics\"][\"fp\"] for r in file_results)\n        total_token_fn = sum(r[\"token_metrics\"][\"fn\"] for r in file_results)\n\n        # Aggregate label-level metrics\n        label_stats = defaultdict(lambda: {\"tp\": 0, \"fp\": 0, \"fn\": 0})\n        for result in file_results:\n            for label, metrics in result[\"label_metrics\"].items():\n                label_stats[label][\"tp\"] += metrics[\"tp\"]\n                label_stats[label][\"fp\"] += metrics[\"fp\"]\n                label_stats[label][\"fn\"] += metrics[\"fn\"]\n\n        # Compute overall metrics\n        overall_entity = self.compute_metrics(\n            set(range(total_entity_tp + total_entity_fn)),\n            set(range(total_entity_tp + total_entity_fp))\n        )\n        overall_entity.update({\"tp\": total_entity_tp, \"fp\": total_entity_fp, \"fn\": total_entity_fn})\n\n        overall_token = self.compute_metrics(\n            set(range(total_token_tp + total_token_fn)),\n            set(range(total_token_tp + total_token_fp))\n        )\n        overall_token.update({\"tp\": total_token_tp, \"fp\": total_token_fp, \"fn\": total_token_fn})\n\n        # Compute per-label aggregated metrics\n        aggregated_label_metrics = {}\n        for label, stats in label_stats.items():\n            tp, fp, fn = stats[\"tp\"], stats[\"fp\"], stats[\"fn\"]\n            precision = tp / (tp + fp) if (tp + fp) > 0 else 0.0\n            recall = tp / (tp + fn) if (tp + fn) > 0 else 0.0\n            f1 = 2 * precision * recall / (precision + recall) if (precision + recall) > 0 else 0.0\n            aggregated_label_metrics[label] = {\n                \"precision\": precision,\n                \"recall\": recall,\n                \"f1\": f1,\n                \"tp\": tp,\n                \"fp\": fp,\n                \"fn\": fn\n            }\n\n        return {\n            \"overall_entity_metrics\": overall_entity,\n            \"overall_token_metrics\": overall_token,\n            \"label_metrics\": aggregated_label_metrics,\n            \"total_files\": len(file_results),\n            \"total_gt_entities\": sum(r[\"gt_entity_count\"] for r in file_results),\n            \"total_pred_entities\": sum(r[\"pred_entity_count\"] for r in file_results),\n            \"total_characters\": sum(r[\"text_length\"] for r in file_results)\n        }\n\n    def run_evaluation(self) -> Dict:\n        \"\"\"Run complete evaluation and return results.\"\"\"\n        logger.info(\"Loading ground truth data...\")\n        gt_data = self.load_ground_truth()\n\n        logger.info(\"Loading prediction data...\")\n        pred_data = self.load_predictions()\n\n        # Find common files\n        common_files = set(gt_data.keys()) & set(pred_data.keys())\n        missing_in_pred = set(gt_data.keys()) - set(pred_data.keys())\n        extra_in_pred = set(pred_data.keys()) - set(gt_data.keys())\n\n        if missing_in_pred:\n            logger.warning(f\"Files in ground truth but not in predictions: {missing_in_pred}\")\n        if extra_in_pred:\n            logger.warning(f\"Files in predictions but not in ground truth: {extra_in_pred}\")\n\n        logger.info(f\"Evaluating {len(common_files)} common files...\")\n\n        # Evaluate each file\n        file_results = []\n        for filename in sorted(common_files):\n            result = self.evaluate_file(filename, gt_data[filename], pred_data[filename])\n            file_results.append(result)\n\n            # Log per-file summary\n            entity_f1 = result[\"entity_metrics\"][\"f1\"]\n            token_f1 = result[\"token_metrics\"][\"f1\"]\n            logger.info(f\"{filename}: Entity F1={entity_f1:.3f}, Token F1={token_f1:.3f}\")\n\n        # Aggregate results\n        aggregated = self.aggregate_metrics(file_results)\n\n        return {\n            \"file_results\": file_results,\n            \"aggregated_metrics\": aggregated,\n            \"evaluation_summary\": {\n                \"total_files_evaluated\": len(common_files),\n                \"files_missing_in_predictions\": len(missing_in_pred),\n                \"files_extra_in_predictions\": len(extra_in_pred)\n            }\n        }\n\n    def print_summary(self, results: Dict):\n        \"\"\"Print evaluation summary to console.\"\"\"\n        agg = results[\"aggregated_metrics\"]\n\n        print(\"\\n\" + \"=\" * 60)\n        print(\"EVALUATION SUMMARY\")\n        print(\"=\" * 60)\n\n        print(f\"Total files evaluated: {agg['total_files']}\")\n        print(f\"Total ground truth entities: {agg['total_gt_entities']}\")\n        print(f\"Total predicted entities: {agg['total_pred_entities']}\")\n        print(f\"Total characters: {agg['total_characters']}\")\n\n        print(\"\\nOVERALL ENTITY-LEVEL METRICS (exact span + label match):\")\n        entity_metrics = agg[\"overall_entity_metrics\"]\n        print(f\"  Precision: {entity_metrics['precision']:.3f}\")\n        print(f\"  Recall:    {entity_metrics['recall']:.3f}\")\n        print(f\"  F1-Score:  {entity_metrics['f1']:.3f}\")\n        print(f\"  TP: {entity_metrics['tp']}, FP: {entity_metrics['fp']}, FN: {entity_metrics['fn']}\")\n\n        print(\"\\nOVERALL TOKEN-LEVEL METRICS (character position + label match):\")\n        token_metrics = agg[\"overall_token_metrics\"]\n        print(f\"  Precision: {token_metrics['precision']:.3f}\")\n        print(f\"  Recall:    {token_metrics['recall']:.3f}\")\n        print(f\"  F1-Score:  {token_metrics['f1']:.3f}\")\n        print(f\"  TP: {token_metrics['tp']}, FP: {token_metrics['fp']}, FN: {token_metrics['fn']}\")\n\n        print(\"\\nPER-LABEL METRICS (entity-level):\")\n        label_metrics = agg[\"label_metrics\"]\n        for label in sorted(label_metrics.keys()):\n            metrics = label_metrics[label]\n            print(f\"  {label:15s}: P={metrics['precision']:.3f}, R={metrics['recall']:.3f}, F1={metrics['f1']:.3f} \" +\n                  f\"(TP={metrics['tp']}, FP={metrics['fp']}, FN={metrics['fn']})\")\n\n\ndef main():\n    \"\"\"Main evaluation function.\"\"\"\n    ground_truth_path = \"../../../data/original/ground_truth_split/test_norm.json\"\n    gemini_path = \"../../../data/testing/gemini_results/combined_results.json\"\n    output_path = \"../../../data/testing/gemini_results/evaluation_results.json\"\n\n    # Check if input files exist\n    if not Path(ground_truth_path).exists():\n        logger.error(f\"Ground truth file not found: {ground_truth_path}\")\n        return 1\n\n    if not Path(gemini_path).exists():\n        logger.error(f\"Predictions file not found: {gemini_path}\")\n        return 1\n\n    # Run evaluation\n    evaluator = EntityEvaluator(ground_truth_path, gemini_path)\n    results = evaluator.run_evaluation()\n\n    # Print summary\n    evaluator.print_summary(results)\n\n    # Save detailed results\n    output_file = Path(output_path)\n    output_file.parent.mkdir(parents=True, exist_ok=True)\n\n    with output_file.open(\"w\", encoding=\"utf-8\") as f:\n        json.dump(results, f, ensure_ascii=False, indent=2)\n\n    logger.info(f\"Detailed evaluation results saved to: {output_path}\")\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    exit(main())
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notebooks/3_model_training_and_testing/gemini_oneshot/gemini_evaluation.py b/notebooks/3_model_training_and_testing/gemini_oneshot/gemini_evaluation.py
--- a/notebooks/3_model_training_and_testing/gemini_oneshot/gemini_evaluation.py	(revision 68e3fd01408523769b50e7566e6fd0db7c5afb8a)
+++ b/notebooks/3_model_training_and_testing/gemini_oneshot/gemini_evaluation.py	(date 1753953872448)
@@ -1,319 +1,658 @@
 #!/usr/bin/env python3
 """
-Evaluation Script for Gemini PII Detection Results
+Improved span extraction and evaluation for Gemini anonymization results.
 
-Compares Gemini-detected entities against ground truth labels and computes
-precision, recall, and F1-score metrics at both entity-level and token-level.
+The main issues with the current approach:
+1. The anchor-based alignment often misaligns when text structure changes
+2. Single characters or short tokens get misaligned easily
+3. The evaluation doesn't account for semantic correctness of anonymization
+
+This version provides:
+1. A more robust span extraction using multiple alignment strategies
+2. A semantic evaluation that checks if the right type of content was anonymized
+3. Better handling of repeated entities and edge cases
 """
 
 import json
+import re
 import logging
 from pathlib import Path
-from typing import Dict, List, Set, Tuple
-from collections import defaultdict, Counter
+from typing import List, Dict, Tuple, Optional, Set
+from difflib import SequenceMatcher
+from dataclasses import dataclass
+import unicodedata
 
-# Configure logging
-logging.basicConfig(
-    level=logging.INFO,
-    format="%(asctime)s - %(levelname)s - %(message)s"
-)
+logging.basicConfig(level=logging.INFO)
 logger = logging.getLogger(__name__)
 
 
-class EntityEvaluator:
-    """Evaluates entity detection performance against ground truth."""
+@dataclass
+class EntitySpan:
+    start: int
+    end: int
+    label: str
+    text: str = ""
 
-    def __init__(self, ground_truth_path: str, predictions_path: str):
-        """Initialize with paths to ground truth and predictions."""
-        self.ground_truth_path = ground_truth_path
-        self.predictions_path = predictions_path
 
-    def load_ground_truth(self) -> Dict[str, Dict]:
-        """Load ground truth data indexed by filename."""
-        data = json.loads(Path(self.ground_truth_path).read_text(encoding='utf-8'))
-        gt_by_file = {}
-        for entry in data:
-            filename = entry.get("file", "")
-            gt_by_file[filename] = {
-                "text": entry.get("text", ""),
-                "entities": entry.get("labels", [])  # Ground truth uses 'labels' key
-            }
-        return gt_by_file
+# Regex patterns for different entity types to validate semantic correctness
+VALIDATION_PATTERNS = {
+    'EMAIL': re.compile(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'),
+    'TELEFONNUMMER': re.compile(r'[\d\s\-\+\(\)\/]{7,}'),
+    'POSTLEITZAHL': re.compile(r'\b\d{4,5}\b'),
+    'DATUM': re.compile(
+        r'\b\d{1,2}[.\-\/]\d{1,2}[.\-\/]\d{2,4}\b|\b\d{4}[.\-\/]\d{1,2}[.\-\/]\d{1,2}\b|\b\d{1,2}\.\s*\w+\s*\d{4}\b'),
+    'IBAN': re.compile(r'\b[A-Z]{2}\d{2}[\s\d]{15,32}\b'),
+    'VERTRAGSNUMMER': re.compile(r'\b\d{6,}\b'),
+    'ZÄHLERNUMMER': re.compile(r'\b\d{8,}\b'),
+    'LINK': re.compile(r'https?://[^\s]+|www\.[^\s]+'),
+}
+
+
+class ImprovedSpanExtractor:
+    def __init__(self):
+        self.placeholder_re = re.compile(r'<<([A-Z_]+)(?:_\d+)?>>')
+
+    def extract_spans_improved(self, original: str, anonymized: str) -> List[Dict]:
+        """
+        Improved span extraction using multiple strategies:
+        1. Direct text replacement detection
+        2. Semantic validation of extracted content
+        3. Context-aware alignment
+        """
+        # First, try the direct replacement approach
+        spans = self._extract_by_replacement(original, anonymized)
+
+        # If that fails or gives poor results, try alignment-based approach
+        if not spans or self._spans_quality_low(spans, original):
+            spans = self._extract_by_alignment(original, anonymized)
+
+        # Validate and clean up spans
+        spans = self._validate_and_clean_spans(spans, original)
+
+        return spans
+
+    def _extract_by_replacement(self, original: str, anonymized: str) -> List[Dict]:
+        """
+        Try to extract spans by finding what text was replaced by placeholders.
+        This works well when the anonymization is mostly 1:1 replacement.
+        """
+        spans = []
+
+        # Find all placeholders in anonymized text
+        placeholders = list(self.placeholder_re.finditer(anonymized))
+
+        if not placeholders:
+            return spans
+
+        # Try to map each placeholder back to original content
+        for i, ph_match in enumerate(placeholders):
+            label = ph_match.group(1)
+            ph_start_anon = ph_match.start()
+            ph_end_anon = ph_match.end()
+
+            # Find the context before and after the placeholder
+            context_before = anonymized[max(0, ph_start_anon - 20):ph_start_anon]
+            context_after = anonymized[ph_end_anon:min(len(anonymized), ph_end_anon + 20)]
+
+            # Find this context in the original text
+            orig_pos = self._find_context_in_original(original, context_before, context_after)
+
+            if orig_pos:
+                start_orig, end_orig = orig_pos
+                # Validate that the extracted content makes sense for this label
+                extracted_text = original[start_orig:end_orig]
+                if self._validate_entity_content(extracted_text, label):
+                    spans.append({
+                        'start': start_orig,
+                        'end': end_orig,
+                        'label': label
+                    })
+
+        return spans
+
+    def _find_context_in_original(self, original: str, context_before: str, context_after: str) -> Optional[
+        Tuple[int, int]]:
+        """
+        Find the position in original text where context_before and context_after
+        surround some content that was replaced by a placeholder.
+        """
+        # Clean up contexts
+        context_before = context_before.strip()
+        context_after = context_after.strip()
+
+        if not context_before and not context_after:
+            return None
+
+        # Find all possible positions for the before context
+        before_positions = []
+        if context_before:
+            start = 0
+            while True:
+                pos = original.find(context_before, start)
+                if pos == -1:
+                    break
+                before_positions.append(pos + len(context_before))
+                start = pos + 1
+        else:
+            before_positions = [0]
+
+        # For each before position, try to find the after context
+        for before_pos in before_positions:
+            if context_after:
+                after_pos = original.find(context_after, before_pos)
+                if after_pos != -1:
+                    return (before_pos, after_pos)
+            else:
+                # If no after context, we need to guess the end
+                # Look for word boundaries or common separators
+                end_pos = self._find_likely_entity_end(original, before_pos)
+                return (before_pos, end_pos)
+
+        return None
+
+    def _find_likely_entity_end(self, text: str, start: int) -> int:
+        """
+        When we don't have after-context, try to find where an entity likely ends.
+        """
+        # Look for natural word boundaries
+        remaining = text[start:]
+
+        # Find next whitespace, punctuation, or special character
+        for i, char in enumerate(remaining):
+            if char in ' \t\n\r.,;:!?()[]{}"\'-<>':
+                return start + i
+
+        # If no natural boundary found, take next 20 characters or end of string
+        return min(start + 20, len(text))
+
+    def _extract_by_alignment(self, original: str, anonymized: str) -> List[Dict]:
+        """
+        Fallback to alignment-based extraction with improvements.
+        """
+        spans = []
+        tokens = self._tokenize_anonymized(anonymized)
+
+        # Use SequenceMatcher for better alignment
+        matcher = SequenceMatcher(None, original, anonymized)
+        opcodes = matcher.get_opcodes()
+
+        # Track position in original text
+        orig_pos = 0
+        anon_pos = 0
+
+        for token in tokens:
+            if token['type'] == 'TXT':
+                # Skip this text in both strings
+                text_len = len(token['text'])
+                # Find this text in original starting from current position
+                found_pos = original.find(token['text'], orig_pos)
+                if found_pos != -1:
+                    orig_pos = found_pos + text_len
+                anon_pos += text_len
+
+            elif token['type'] == 'PLH':
+                # This is where we need to extract a span
+                placeholder_len = len(token['text'])
+
+                # Find the next text token to know where this span ends
+                next_text = self._find_next_text_token(tokens, tokens.index(token))
 
-    def load_predictions(self) -> Dict[str, Dict]:
-        """Load prediction data indexed by filename."""
-        data = json.loads(Path(self.predictions_path).read_text(encoding='utf-8'))
-        pred_by_file = {}
-        for entry in data:
-            filename = entry.get("file", "")
-            pred_by_file[filename] = {
-                "text_length": entry.get("text_length", 0),
-                "entities": entry.get("entities", [])
-            }
-        return pred_by_file
+                if next_text:
+                    # Find where the next text appears in original
+                    next_pos = original.find(next_text, orig_pos)
+                    if next_pos != -1:
+                        spans.append({
+                            'start': orig_pos,
+                            'end': next_pos,
+                            'label': token['label']
+                        })
+                        orig_pos = next_pos
+                    else:
+                        # Couldn't find next text, make a reasonable guess
+                        end_pos = self._find_likely_entity_end(original, orig_pos)
+                        spans.append({
+                            'start': orig_pos,
+                            'end': end_pos,
+                            'label': token['label']
+                        })
+                        orig_pos = end_pos
+                else:
+                    # Last token, consume rest of original
+                    spans.append({
+                        'start': orig_pos,
+                        'end': len(original),
+                        'label': token['label']
+                    })
+                    orig_pos = len(original)
+
+                anon_pos += placeholder_len
+
+        return spans
+
+    def _tokenize_anonymized(self, text: str) -> List[Dict]:
+        """Split anonymized text into text and placeholder tokens."""
+        tokens = []
+        pos = 0
+
+        for match in self.placeholder_re.finditer(text):
+            # Add text before placeholder
+            if match.start() > pos:
+                tokens.append({
+                    'type': 'TXT',
+                    'text': text[pos:match.start()]
+                })
+
+            # Add placeholder
+            tokens.append({
+                'type': 'PLH',
+                'text': match.group(0),
+                'label': match.group(1)
+            })
+
+            pos = match.end()
+
+        # Add remaining text
+        if pos < len(text):
+            tokens.append({
+                'type': 'TXT',
+                'text': text[pos:]
+            })
+
+        return tokens
+
+    def _find_next_text_token(self, tokens: List[Dict], current_index: int) -> Optional[str]:
+        """Find the next text token after the current placeholder."""
+        for i in range(current_index + 1, len(tokens)):
+            if tokens[i]['type'] == 'TXT':
+                return tokens[i]['text'].strip()
+        return None
+
+    def _validate_entity_content(self, text: str, label: str) -> bool:
+        """
+        Validate that the extracted text content makes sense for the given label.
+        """
+        text = text.strip()
+
+        if not text:
+            return False
+
+        # Use regex patterns where available
+        if label in VALIDATION_PATTERNS:
+            return bool(VALIDATION_PATTERNS[label].search(text))
+
+        # Additional heuristic validations
+        if label in ['VORNAME', 'NACHNAME']:
+            # Names should be alphabetic (possibly with umlauts)
+            return bool(re.match(r'^[A-Za-zÄÖÜäöüß\s\-\.]+$', text)) and len(text) > 1
+
+        elif label == 'FIRMA':
+            # Company names often contain letters, numbers, and common symbols
+            return len(text) > 2 and not text.isdigit()
+
+        elif label == 'STRASSE':
+            # Street names typically contain letters and may have numbers
+            return bool(re.search(r'[A-Za-zÄÖÜäöüß]', text)) and len(text) > 2
+
+        elif label == 'WOHNORT':
+            # City names are typically alphabetic
+            return bool(re.match(r'^[A-Za-zÄÖÜäöüß\s\-]+$', text)) and len(text) > 2
+
+        elif label == 'HAUSNUMMER':
+            # House numbers are typically short and contain digits
+            return bool(re.search(r'\d', text)) and len(text) < 10
+
+        elif label in ['ZAHLUNG', 'ZÄHLERSTAND']:
+            # These should contain numbers
+            return bool(re.search(r'\d', text))
+
+        # Default: accept if not empty and not too long
+        return len(text) < 100
+
+    def _spans_quality_low(self, spans: List[Dict], original: str) -> bool:
+        """
+        Determine if the extracted spans are of low quality.
+        """
+        if not spans:
+            return True
+
+        # Check for common quality issues
+        total_span_length = sum(span['end'] - span['start'] for span in spans)
+        text_length = len(original)
+
+        # If spans cover more than 80% of text, probably wrong
+        if total_span_length > 0.8 * text_length:
+            return True
+
+        # If average span length is too short (< 2 chars), probably wrong
+        avg_span_length = total_span_length / len(spans)
+        if avg_span_length < 2:
+            return True
+
+        # Check for overlapping spans (shouldn't happen with good extraction)
+        sorted_spans = sorted(spans, key=lambda x: x['start'])
+        for i in range(len(sorted_spans) - 1):
+            if sorted_spans[i]['end'] > sorted_spans[i + 1]['start']:
+                return True
+
+        return False
+
+    def _validate_and_clean_spans(self, spans: List[Dict], original: str) -> List[Dict]:
+        """
+        Final validation and cleanup of extracted spans.
+        """
+        cleaned_spans = []
+
+        for span in spans:
+            start = max(0, span['start'])
+            end = min(len(original), span['end'])
+
+            if end <= start:
+                continue
+
+            extracted_text = original[start:end]
+
+            # Skip if extracted text doesn't make sense for this label
+            if not self._validate_entity_content(extracted_text, span['label']):
+                logger.warning(f"Skipping invalid span for {span['label']}: '{extracted_text}'")
+                continue
+
+            cleaned_spans.append({
+                'start': start,
+                'end': end,
+                'label': span['label']
+            })
+
+        # Sort by start position
+        cleaned_spans.sort(key=lambda x: x['start'])
+
+        # Remove overlaps by keeping the first span in case of overlap
+        final_spans = []
+        for span in cleaned_spans:
+            if not final_spans or span['start'] >= final_spans[-1]['end']:
+                final_spans.append(span)
+            else:
+                logger.warning(f"Removing overlapping span: {span}")
+
+        return final_spans
+
 
-    def normalize_entity(self, entity: Dict) -> Tuple[int, int, str]:
-        """Normalize entity to (start, end, label) tuple."""
-        return (entity["start"], entity["end"], entity["label"])
+class ImprovedEvaluator:
+    """
+    Improved evaluation that considers both exact matches and semantic correctness.
+    """
 
-    def get_entity_spans(self, entities: List[Dict]) -> Set[Tuple[int, int, str]]:
-        """Convert entity list to set of (start, end, label) tuples."""
-        return {self.normalize_entity(e) for e in entities}
+    def __init__(self):
+        self.extractor = ImprovedSpanExtractor()
 
-    def get_token_level_spans(self, entities: List[Dict], text: str) -> Set[Tuple[int, str]]:
-        """Convert entities to character-level (position, label) pairs."""
-        token_spans = set()
-        for entity in entities:
-            start, end, label = entity["start"], entity["end"], entity["label"]
-            # Validate bounds
-            if 0 <= start < end <= len(text):
-                for pos in range(start, end):
-                    token_spans.add((pos, label))
-        return token_spans
+    def _validate_input_files(self, results: List[Dict], ground_truth: List[Dict]) -> None:
+        """
+        Sanity-check the structure of the loaded result and ground truth lists. Logs missing keys.
+        """
+        for item in ground_truth:
+            if 'file' not in item:
+                logger.warning("Ground truth item missing 'file', skipping it in lookups.")
+                continue
+            if 'text' not in item:
+                logger.warning(f"Ground truth for {item.get('file','<unknown>')} missing 'text'.")
 
-    def compute_metrics(self, true_set: Set, pred_set: Set) -> Dict[str, float]:
-        """Compute precision, recall, and F1-score for two sets."""
-        tp = len(true_set & pred_set)
-        fp = len(pred_set - true_set)
-        fn = len(true_set - pred_set)
+            # Normalize legacy key 'labels' to 'entities' so evaluation downstream works.
+            if 'entities' not in item:
+                if 'labels' in item:
+                    item['entities'] = item['labels']
+                    logger.info(f"Normalized ground truth 'labels' to 'entities' for {item['file']}.")
+                else:
+                    logger.warning(f"Ground truth for {item['file']} missing both 'entities' and 'labels'.")
 
-        precision = tp / (tp + fp) if (tp + fp) > 0 else 0.0
-        recall = tp / (tp + fn) if (tp + fn) > 0 else 0.0
-        f1 = 2 * precision * recall / (precision + recall) if (precision + recall) > 0 else 0.0
+        for result in results:
+            if 'file' not in result:
+                logger.warning("Result item missing 'file', skipping it in evaluation.")
+            if 'anonymized_text' not in result:
+                logger.warning(f"Result for {result.get('file','<unknown>')} missing 'anonymized_text'.")
+            if 'entities' not in result:
+                logger.info(f"Result for {result.get('file','<unknown>')} has no 'entities' key; initializing to empty list.")
+                result['entities'] = []
 
-        return {
-            "precision": precision,
-            "recall": recall,
-            "f1": f1,
-            "tp": tp,
-            "fp": fp,
-            "fn": fn
-        }
+    def evaluate_results(self, results_file: str, ground_truth_file: str) -> Dict:
+        """
+        Evaluate the anonymization results against ground truth.
+        """
+        # Load data
+        with open(results_file, 'r', encoding='utf-8') as f:
+            results = json.load(f)
+
+        with open(ground_truth_file, 'r', encoding='utf-8') as f:
+            ground_truth = json.load(f)
+
+        # Sanity-check input structure to avoid KeyError later
+        self._validate_input_files(results, ground_truth)
+
+        # Create lookup for ground truth by filename
+        gt_lookup = {item['file']: item for item in ground_truth}
+
+        # Re-extract spans using improved method
+        logger.info("Re-extracting spans with improved method...")
+        for result in results:
+            if result['file'] in gt_lookup:
+                # Get original text from ground truth
+                gt_item = gt_lookup[result['file']]
+                original_text = gt_item.get('text', '')  # Ground truth has 'text', not 'anonymized_text'
+
+                if original_text and result.get('anonymized_text'):
+                    # Re-extract spans using improved method
+                    new_spans = self.extractor.extract_spans_improved(
+                        original_text,
+                        result['anonymized_text']
+                    )
+                    result['entities'] = new_spans
+                    logger.info(f"Re-extracted {len(new_spans)} spans for {result['file']}")
 
-    def compute_label_metrics(self, gt_entities: List[Dict], pred_entities: List[Dict],
-                              text: str) -> Dict[str, Dict]:
-        """Compute per-label metrics."""
-        # Group entities by label
-        gt_by_label = defaultdict(list)
-        pred_by_label = defaultdict(list)
+        # Calculate metrics
+        return self._calculate_metrics(results, gt_lookup)
 
-        for entity in gt_entities:
-            gt_by_label[entity["label"]].append(entity)
+    def _reconstruct_original_text(self, anonymized: str, entities: List[Dict]) -> str:
+        """
+        Attempt to reconstruct original text from anonymized text and entity spans.
+        This is a best-effort approach and may not be perfect.
+        """
+        # This is tricky since we don't have the original entity texts
+        # For now, return None to indicate we need the original text from elsewhere
+        return None
 
-        for entity in pred_entities:
-            pred_by_label[entity["label"]].append(entity)
+    def _calculate_metrics(self, results: List[Dict], gt_lookup: Dict) -> Dict:
+        """
+        Calculate precision, recall, and F1 scores with tolerant span matching.
+        """
+        def normalize_label(label: str) -> str:
+            return unicodedata.normalize("NFC", label.strip().upper())
 
-        # Get all labels
-        all_labels = set(gt_by_label.keys()) | set(pred_by_label.keys())
+        def iou(span1: Tuple[int, int], span2: Tuple[int, int]) -> float:
+            a0, a1 = span1
+            b0, b1 = span2
+            inter = max(0, min(a1, b1) - max(a0, b0))
+            union = max(a1, b1) - min(a0, b0)
+            return inter / union if union > 0 else 0
+
+        total_tp = 0  # True positives
+        total_fp = 0  # False positives
+        total_fn = 0  # False negatives
 
         label_metrics = {}
-        for label in all_labels:
-            gt_spans = self.get_entity_spans(gt_by_label[label])
-            pred_spans = self.get_entity_spans(pred_by_label[label])
-            label_metrics[label] = self.compute_metrics(gt_spans, pred_spans)
+        label_confusion = {}  # true_label -> {pred_label: count}
+
+        for result in results:
+            filename = result['file']
+            if filename not in gt_lookup:
+                continue
+
+            gt_item = gt_lookup[filename]
+            if 'entities' not in gt_item:
+                logger.warning(f"Ground truth for {filename} missing 'entities'; skipping this file in metrics.")
+                continue
+
+            # Build normalized true and predicted entity lists
+            true_raw = gt_item['entities']
+            pred_raw = result.get('entities') or []
+
+            true_list = []
+            for e in true_raw:
+                norm = normalize_label(e['label'])
+                true_list.append({'start': e['start'], 'end': e['end'], 'label': norm})
 
-        return label_metrics
+            pred_list = []
+            for e in pred_raw:
+                norm = normalize_label(e['label'])
+                pred_list.append({'start': e['start'], 'end': e['end'], 'label': norm})
 
-    def evaluate_file(self, filename: str, gt_data: Dict, pred_data: Dict) -> Dict:
-        """Evaluate predictions for a single file."""
-        gt_text = gt_data["text"]
-        gt_entities = gt_data["entities"]
-        pred_entities = pred_data["entities"]
+            matched_true = set()
+            matched_pred = set()
 
-        # Entity-level evaluation (exact span + label match)
-        gt_entity_spans = self.get_entity_spans(gt_entities)
-        pred_entity_spans = self.get_entity_spans(pred_entities)
-        entity_metrics = self.compute_metrics(gt_entity_spans, pred_entity_spans)
+            file_tp = 0
+            file_fp = 0
+            file_fn = 0
 
-        # Token-level evaluation (character position + label match)
-        gt_token_spans = self.get_token_level_spans(gt_entities, gt_text)
-        pred_token_spans = self.get_token_level_spans(pred_entities, gt_text)
-        token_metrics = self.compute_metrics(gt_token_spans, pred_token_spans)
+            # Exact matches (span + label)
+            for ti, t in enumerate(true_list):
+                for pi, p in enumerate(pred_list):
+                    if ti in matched_true or pi in matched_pred:
+                        continue
+                    if t['start'] == p['start'] and t['end'] == p['end'] and t['label'] == p['label']:
+                        matched_true.add(ti)
+                        matched_pred.add(pi)
+                        file_tp += 1
+                        label_metrics.setdefault(t['label'], {'tp': 0, 'fp': 0, 'fn': 0})
+                        label_metrics[t['label']]['tp'] += 1
 
-        # Per-label metrics
-        label_metrics = self.compute_label_metrics(gt_entities, pred_entities, gt_text)
+            # Partial overlap with same label (IoU >= 0.5)
+            for ti, t in enumerate(true_list):
+                if ti in matched_true:
+                    continue
+                for pi, p in enumerate(pred_list):
+                    if pi in matched_pred:
+                        continue
+                    if t['label'] == p['label'] and iou((t['start'], t['end']), (p['start'], p['end'])) >= 0.5:
+                        matched_true.add(ti)
+                        matched_pred.add(pi)
+                        file_tp += 1
+                        label_metrics.setdefault(t['label'], {'tp': 0, 'fp': 0, 'fn': 0})
+                        label_metrics[t['label']]['tp'] += 1
+                        break
+
+            # Overlaps with label mismatches (IoU >= 0.5)
+            for ti, t in enumerate(true_list):
+                if ti in matched_true:
+                    continue
+                for pi, p in enumerate(pred_list):
+                    if pi in matched_pred:
+                        continue
+                    if iou((t['start'], t['end']), (p['start'], p['end'])) >= 0.5:
+                        matched_true.add(ti)
+                        matched_pred.add(pi)
+                        # label mismatch: count as FN for true label and FP for predicted label
+                        file_fn += 1
+                        file_fp += 1
+                        label_metrics.setdefault(t['label'], {'tp': 0, 'fp': 0, 'fn': 0})
+                        label_metrics.setdefault(p['label'], {'tp': 0, 'fp': 0, 'fn': 0})
+                        label_metrics[t['label']]['fn'] += 1
+                        label_metrics[p['label']]['fp'] += 1
+                        # record confusion
+                        label_confusion.setdefault(t['label'], {})
+                        label_confusion[t['label']].setdefault(p['label'], 0)
+                        label_confusion[t['label']][p['label']] += 1
+                        break
+
+            # Unmatched true spans -> false negatives
+            for ti, t in enumerate(true_list):
+                if ti in matched_true:
+                    continue
+                file_fn += 1
+                label_metrics.setdefault(t['label'], {'tp': 0, 'fp': 0, 'fn': 0})
+                label_metrics[t['label']]['fn'] += 1
+
+            # Unmatched predicted spans -> false positives
+            for pi, p in enumerate(pred_list):
+                if pi in matched_pred:
+                    continue
+                file_fp += 1
+                label_metrics.setdefault(p['label'], {'tp': 0, 'fp': 0, 'fn': 0})
+                label_metrics[p['label']]['fp'] += 1
+
+            total_tp += file_tp
+            total_fp += file_fp
+            total_fn += file_fn
+
+        # Calculate overall metrics
+        precision = total_tp / (total_tp + total_fp) if (total_tp + total_fp) > 0 else 0
+        recall = total_tp / (total_tp + total_fn) if (total_tp + total_fn) > 0 else 0
+        f1 = 2 * precision * recall / (precision + recall) if (precision + recall) > 0 else 0
+
+        # Calculate per-label metrics
+        label_results = {}
+        for label, counts in label_metrics.items():
+            label_precision = counts['tp'] / (counts['tp'] + counts['fp']) if (counts['tp'] + counts['fp']) > 0 else 0
+            label_recall = counts['tp'] / (counts['tp'] + counts['fn']) if (counts['tp'] + counts['fn']) > 0 else 0
+            label_f1 = 2 * label_precision * label_recall / (label_precision + label_recall) if (
+                    label_precision + label_recall) > 0 else 0
+
+            label_results[label] = {
+                'precision': label_precision,
+                'recall': label_recall,
+                'f1': label_f1,
+                'true_positives': counts['tp'],
+                'false_positives': counts['fp'],
+                'false_negatives': counts['fn']
+            }
 
         return {
-            "filename": filename,
-            "entity_metrics": entity_metrics,
-            "token_metrics": token_metrics,
-            "label_metrics": label_metrics,
-            "gt_entity_count": len(gt_entities),
-            "pred_entity_count": len(pred_entities),
-            "text_length": len(gt_text)
-        }
-
-    def aggregate_metrics(self, file_results: List[Dict]) -> Dict:
-        """Aggregate metrics across all files."""
-        # Aggregate entity-level metrics
-        total_entity_tp = sum(r["entity_metrics"]["tp"] for r in file_results)
-        total_entity_fp = sum(r["entity_metrics"]["fp"] for r in file_results)
-        total_entity_fn = sum(r["entity_metrics"]["fn"] for r in file_results)
-
-        # Aggregate token-level metrics
-        total_token_tp = sum(r["token_metrics"]["tp"] for r in file_results)
-        total_token_fp = sum(r["token_metrics"]["fp"] for r in file_results)
-        total_token_fn = sum(r["token_metrics"]["fn"] for r in file_results)
-
-        # Aggregate label-level metrics
-        label_stats = defaultdict(lambda: {"tp": 0, "fp": 0, "fn": 0})
-        for result in file_results:
-            for label, metrics in result["label_metrics"].items():
-                label_stats[label]["tp"] += metrics["tp"]
-                label_stats[label]["fp"] += metrics["fp"]
-                label_stats[label]["fn"] += metrics["fn"]
-
-        # Compute overall metrics
-        overall_entity = self.compute_metrics(
-            set(range(total_entity_tp + total_entity_fn)),
-            set(range(total_entity_tp + total_entity_fp))
-        )
-        overall_entity.update({"tp": total_entity_tp, "fp": total_entity_fp, "fn": total_entity_fn})
-
-        overall_token = self.compute_metrics(
-            set(range(total_token_tp + total_token_fn)),
-            set(range(total_token_tp + total_token_fp))
-        )
-        overall_token.update({"tp": total_token_tp, "fp": total_token_fp, "fn": total_token_fn})
-
-        # Compute per-label aggregated metrics
-        aggregated_label_metrics = {}
-        for label, stats in label_stats.items():
-            tp, fp, fn = stats["tp"], stats["fp"], stats["fn"]
-            precision = tp / (tp + fp) if (tp + fp) > 0 else 0.0
-            recall = tp / (tp + fn) if (tp + fn) > 0 else 0.0
-            f1 = 2 * precision * recall / (precision + recall) if (precision + recall) > 0 else 0.0
-            aggregated_label_metrics[label] = {
-                "precision": precision,
-                "recall": recall,
-                "f1": f1,
-                "tp": tp,
-                "fp": fp,
-                "fn": fn
-            }
-
-        return {
-            "overall_entity_metrics": overall_entity,
-            "overall_token_metrics": overall_token,
-            "label_metrics": aggregated_label_metrics,
-            "total_files": len(file_results),
-            "total_gt_entities": sum(r["gt_entity_count"] for r in file_results),
-            "total_pred_entities": sum(r["pred_entity_count"] for r in file_results),
-            "total_characters": sum(r["text_length"] for r in file_results)
-        }
-
-    def run_evaluation(self) -> Dict:
-        """Run complete evaluation and return results."""
-        logger.info("Loading ground truth data...")
-        gt_data = self.load_ground_truth()
-
-        logger.info("Loading prediction data...")
-        pred_data = self.load_predictions()
-
-        # Find common files
-        common_files = set(gt_data.keys()) & set(pred_data.keys())
-        missing_in_pred = set(gt_data.keys()) - set(pred_data.keys())
-        extra_in_pred = set(pred_data.keys()) - set(gt_data.keys())
-
-        if missing_in_pred:
-            logger.warning(f"Files in ground truth but not in predictions: {missing_in_pred}")
-        if extra_in_pred:
-            logger.warning(f"Files in predictions but not in ground truth: {extra_in_pred}")
-
-        logger.info(f"Evaluating {len(common_files)} common files...")
-
-        # Evaluate each file
-        file_results = []
-        for filename in sorted(common_files):
-            result = self.evaluate_file(filename, gt_data[filename], pred_data[filename])
-            file_results.append(result)
-
-            # Log per-file summary
-            entity_f1 = result["entity_metrics"]["f1"]
-            token_f1 = result["token_metrics"]["f1"]
-            logger.info(f"{filename}: Entity F1={entity_f1:.3f}, Token F1={token_f1:.3f}")
-
-        # Aggregate results
-        aggregated = self.aggregate_metrics(file_results)
-
-        return {
-            "file_results": file_results,
-            "aggregated_metrics": aggregated,
-            "evaluation_summary": {
-                "total_files_evaluated": len(common_files),
-                "files_missing_in_predictions": len(missing_in_pred),
-                "files_extra_in_predictions": len(extra_in_pred)
-            }
+            'overall': {
+                'precision': precision,
+                'recall': recall,
+                'f1': f1,
+                'true_positives': total_tp,
+                'false_positives': total_fp,
+                'false_negatives': total_fn
+            },
+            'per_label': label_results,
+            'label_confusion': label_confusion
         }
 
-    def print_summary(self, results: Dict):
-        """Print evaluation summary to console."""
-        agg = results["aggregated_metrics"]
-
-        print("\n" + "=" * 60)
-        print("EVALUATION SUMMARY")
-        print("=" * 60)
-
-        print(f"Total files evaluated: {agg['total_files']}")
-        print(f"Total ground truth entities: {agg['total_gt_entities']}")
-        print(f"Total predicted entities: {agg['total_pred_entities']}")
-        print(f"Total characters: {agg['total_characters']}")
 
-        print("\nOVERALL ENTITY-LEVEL METRICS (exact span + label match):")
-        entity_metrics = agg["overall_entity_metrics"]
-        print(f"  Precision: {entity_metrics['precision']:.3f}")
-        print(f"  Recall:    {entity_metrics['recall']:.3f}")
-        print(f"  F1-Score:  {entity_metrics['f1']:.3f}")
-        print(f"  TP: {entity_metrics['tp']}, FP: {entity_metrics['fp']}, FN: {entity_metrics['fn']}")
+def analyze_anonymization_quality(results_file: str, sample_size: int = 10):
+    """
+    Analyze the quality of anonymization by examining actual examples.
+    """
+    with open(results_file, 'r', encoding='utf-8') as f:
+        results = json.load(f)
 
-        print("\nOVERALL TOKEN-LEVEL METRICS (character position + label match):")
-        token_metrics = agg["overall_token_metrics"]
-        print(f"  Precision: {token_metrics['precision']:.3f}")
-        print(f"  Recall:    {token_metrics['recall']:.3f}")
-        print(f"  F1-Score:  {token_metrics['f1']:.3f}")
-        print(f"  TP: {token_metrics['tp']}, FP: {token_metrics['fp']}, FN: {token_metrics['fn']}")
+    print(f"\n=== ANONYMIZATION QUALITY ANALYSIS ===")
+    print(f"Total files processed: {len(results)}")
 
-        print("\nPER-LABEL METRICS (entity-level):")
-        label_metrics = agg["label_metrics"]
-        for label in sorted(label_metrics.keys()):
-            metrics = label_metrics[label]
-            print(f"  {label:15s}: P={metrics['precision']:.3f}, R={metrics['recall']:.3f}, F1={metrics['f1']:.3f} " +
-                  f"(TP={metrics['tp']}, FP={metrics['fp']}, FN={metrics['fn']})")
+    # Count placeholders vs original text ratio
+    placeholder_counts = []
+    for result in results[:sample_size]:
+        anonymized = result['anonymized_text']
+        if anonymized:
+            placeholders = len(re.findall(r'<<[A-Z_]+>>', anonymized))
+            placeholder_counts.append(placeholders)
 
+            print(f"\nFile: {result['file']}")
+            print(f"Placeholders found: {placeholders}")
+            print(f"Text length: {result['text_length']}")
+            print(f"Anonymized preview: {anonymized[:200]}...")
 
-def main():
-    """Main evaluation function."""
-    ground_truth_path = "../../../data/original/ground_truth_split/test_norm.json"
-    gemini_path = "../../../data/testing/gemini_results/combined_results.json"
-    output_path = "../../../data/testing/gemini_results/evaluation_results.json"
-
-    # Check if input files exist
-    if not Path(ground_truth_path).exists():
-        logger.error(f"Ground truth file not found: {ground_truth_path}")
-        return 1
-
-    if not Path(gemini_path).exists():
-        logger.error(f"Predictions file not found: {gemini_path}")
-        return 1
-
-    # Run evaluation
-    evaluator = EntityEvaluator(ground_truth_path, gemini_path)
-    results = evaluator.run_evaluation()
-
-    # Print summary
-    evaluator.print_summary(results)
-
-    # Save detailed results
-    output_file = Path(output_path)
-    output_file.parent.mkdir(parents=True, exist_ok=True)
-
-    with output_file.open("w", encoding="utf-8") as f:
-        json.dump(results, f, ensure_ascii=False, indent=2)
-
-    logger.info(f"Detailed evaluation results saved to: {output_path}")
-
-    return 0
+    if placeholder_counts:
+        avg_placeholders = sum(placeholder_counts) / len(placeholder_counts)
+        print(f"\nAverage placeholders per document: {avg_placeholders:.1f}")
 
 
 if __name__ == "__main__":
-    exit(main())
\ No newline at end of file
+    # Example usage
+    results_file = "../../../data/testing/gemini_results_2.5/combined_results.json"
+    ground_truth_file = "../../../data/original/ground_truth_split/test_norm.json"
+
+    # Analyze quality first
+    analyze_anonymization_quality(results_file)
+
+    # Then evaluate if you have ground truth
+    evaluator = ImprovedEvaluator()
+    metrics = evaluator.evaluate_results(results_file, ground_truth_file)
+    print(json.dumps(metrics, indent=2))
\ No newline at end of file
Index: notebooks/data/granular_dataset_split/validation.json
===================================================================
diff --git a/notebooks/data/granular_dataset_split/validation.json b/notebooks/data/granular_dataset_split/validation.json
deleted file mode 100644
--- a/notebooks/data/granular_dataset_split/validation.json	(revision 68e3fd01408523769b50e7566e6fd0db7c5afb8a)
+++ /dev/null	(revision 68e3fd01408523769b50e7566e6fd0db7c5afb8a)
@@ -1,1041 +0,0 @@
-[
-  {
-    "file": "4.txt",
-    "text": "Vertragspartner: \tHalina Girschner\nVertragskonto: \t401 304 434\nKundennummer:\t205946174\nZählernummer: \t7 GMT00 984726553\nGewählter Tarif: \tE.ON Erdgas Öko\nSehr geehrte Damen und Herren,\nunser Gaszähler wurde abgebaut, da wir eine Wärmepumpe installiert haben\nund kein Gasbezug mehr benötigen.\nDas Ausbauprotokoll des Netzbetreibers füge ich der Anlage bei.\nDer Schlußstand unserer Belieferung ist bereits im Portal eingetragen.\nIch bedanke mich für die Dato unproblematische Vertragsabwicklung.\n*Mit freundlichen Grüßen\nHalina Girschner\n/\nMeins Drubin Mentzel GmbH\nMarta-Budig-Ring 435\n40989 Osnabrück\n/*/\n/*/Fon: +49 08136 92572\nFax: +49 08136 92581/*\n",
-    "labels": [
-      {
-        "start": 538,
-        "end": 563,
-        "label": "FIRMA"
-      },
-      {
-        "start": 102,
-        "end": 119,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 613,
-        "end": 628,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 634,
-        "end": 649,
-        "label": "FAX"
-      },
-      {
-        "start": 564,
-        "end": 580,
-        "label": "STRASSE"
-      },
-      {
-        "start": 51,
-        "end": 62,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 25,
-        "end": 34,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 526,
-        "end": 535,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 591,
-        "end": 600,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 77,
-        "end": 86,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 18,
-        "end": 24,
-        "label": "VORNAME"
-      },
-      {
-        "start": 519,
-        "end": 525,
-        "label": "VORNAME"
-      },
-      {
-        "start": 585,
-        "end": 590,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 581,
-        "end": 584,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "15.txt",
-    "text": "Sehr geehrte Damen und Herren,\nhiermit lege Ich, Catharina Thies, Vertragsnummer 402157398, bei der Schlussrechnung 2022/ 2023 Wiederspruch ein.\nDie Wohnungsabnahme war am 15.05.2022, anbei das Übergabeprotokoll der Hausverwaltung. Der Abbrechnungszeitraum vom 16.05.-31.05.22 fäll somit nicht mehr in meinen Bemessungszeitraum. Anbei auch die neue Meldebescheinigung. Ich bitte hiermit um Klärung der Abrechnung.\nMit freundlichen Grüßen\nCatharina Thies\n",
-    "labels": [
-      {
-        "start": 261,
-        "end": 276,
-        "label": "DATUM"
-      },
-      {
-        "start": 172,
-        "end": 182,
-        "label": "DATUM"
-      },
-      {
-        "start": 116,
-        "end": 126,
-        "label": "DATUM"
-      },
-      {
-        "start": 49,
-        "end": 58,
-        "label": "VORNAME"
-      },
-      {
-        "start": 438,
-        "end": 447,
-        "label": "VORNAME"
-      },
-      {
-        "start": 81,
-        "end": 90,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 59,
-        "end": 64,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 448,
-        "end": 453,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "163.txt",
-    "text": "Hiermit sende ich ihnen die Abwendungsvereinbarung .\nBitte um Bestätigung.\nMit freundlichen Grüßen\n",
-    "labels": []
-  },
-  {
-    "file": "17.txt",
-    "text": "Vertragsnumer 403038396\nHello\nWir haben Stromzähler am 21.04.23 in Büro in Essen abgegeben. Bei Herr Hiller.\nMit freundlichen Grüßen\nHolsten KaffeeZimmer\nส่งจาก Outlook สำหรับ Android<https://aka.ms/AAb9ysg>\n",
-    "labels": [
-      {
-        "start": 154,
-        "end": 207,
-        "label": "GESENDET_MIT"
-      },
-      {
-        "start": 141,
-        "end": 153,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 55,
-        "end": 63,
-        "label": "DATUM"
-      },
-      {
-        "start": 14,
-        "end": 23,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 133,
-        "end": 140,
-        "label": "VORNAME"
-      },
-      {
-        "start": 101,
-        "end": 107,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "162.txt",
-    "text": "Sehr geehrte Damen und Herren,\n \nnachdem eine schriftliche Anfrage über das Kundenportal vom 23.07.2023 bis\nheute unbeantwortet geblieben ist und ich telefonisch zwei Mal regelrecht\nabgewimmelt worden bin, stelle ich meine Frage erneut auf diesem Wege und\nhoffe auf eine Antwort.\nIn den Medien wurde angepriesen, dass E.on zum 01.09.2023 die Strompreise\nfür ca. 14 Millionen Haushalte senkt.\nMehrere Bekannte in meinem Umfeld haben im Juli entsprechende\nAnkündigungsschreiben bekommen.\nAus Gründen, die sich mir nicht erschließen, ist mein oben genannter Vertrag\nhiervon scheinbar nicht betroffen und eine Senkung des zum 01.03.2023 massiv\nangehoben Strompreises auf aktuell 45,87 ct/kWh nicht vorgesehen.\nHierzu hätte ich gerne eine schriftliche Begründung bzw. Stellungnahme oder\nebenfalls die Mitteilung über eine Preissenkung.\nDie oben genannte Preiserhöhung wurde mit der chaotischen Lage am Strommarkt\nund gestiegenen Preisen begründet. Da sich der Markt jedoch inzwischen\nwieder beruhigt hat und die Strompreise aktuell sogar auf einem niedrigeren\nNiveau sind als vor der letztjährigen Krise erwarte ich eigentlich dass eine\nsolch massive Erhöhung dann auch wieder zurückgenommen wird. Dies ist bisher\nnicht geschehen.\nIch bin seit 2019 Stromkunde bei E.on und aktuell habe ich das Gefühl, dass\nE.on nicht das geringste Interesse daran hat Kunden zu halten und\nstattdessen der maximale Profit aus den Kunden rausgequetscht wird. Anstatt\neiner Preisanpassung ist man gezwungen zu kündigen und die meisten dürften\nwohl dann zu einem Mitbewerber abwandern. Das kann doch eigentlich auch\nnicht in Ihrem Interesse liegen.\n \nIn Erwartung einer Antwort\nMit freundlichen Grüßen\n \nRotraud Gunpf\n",
-    "labels": [
-      {
-        "start": 93,
-        "end": 103,
-        "label": "DATUM"
-      },
-      {
-        "start": 327,
-        "end": 337,
-        "label": "DATUM"
-      },
-      {
-        "start": 622,
-        "end": 632,
-        "label": "DATUM"
-      },
-      {
-        "start": 1679,
-        "end": 1686,
-        "label": "VORNAME"
-      },
-      {
-        "start": 1687,
-        "end": 1692,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "169.txt",
-    "text": "Hallo Zusammen,\nda ich ich für den Vertrag mit der Nummer 406043729 wohl die falsche Zählernummer angegeben habe, anbei ein Bild von der richtigen. - 110140311\nEs grüßt Sie freundlich \nHilde Reising\n",
-    "labels": [
-      {
-        "start": 150,
-        "end": 159,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 58,
-        "end": 67,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 191,
-        "end": 198,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 185,
-        "end": 190,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "26.txt",
-    "text": "Sehr geehrte Damen und Herren,\nZählerwechsel am 28.02.2023 Zähler 6446393163, Stand 159668 am 28.02.2023, neuer Zähler 1EBZ0107497634 Stand 000\nMeine Daten:\nVor-, Nachname: Herr Vladimir Sauer\nGeburtsdatum: 27.11.1940\nLieferadresse: Weinholdweg 362, 79361 Weißenfels\nZählernummer: 6446393163\nKundennummer: 401059664\nMit freundlichen Grüßen\n",
-    "labels": [
-      {
-        "start": 119,
-        "end": 133,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 48,
-        "end": 58,
-        "label": "DATUM"
-      },
-      {
-        "start": 94,
-        "end": 104,
-        "label": "DATUM"
-      },
-      {
-        "start": 48,
-        "end": 58,
-        "label": "DATUM"
-      },
-      {
-        "start": 94,
-        "end": 104,
-        "label": "DATUM"
-      },
-      {
-        "start": 207,
-        "end": 217,
-        "label": "DATUM"
-      },
-      {
-        "start": 233,
-        "end": 244,
-        "label": "STRASSE"
-      },
-      {
-        "start": 256,
-        "end": 266,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 66,
-        "end": 76,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 281,
-        "end": 291,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 306,
-        "end": 315,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 178,
-        "end": 186,
-        "label": "VORNAME"
-      },
-      {
-        "start": 84,
-        "end": 90,
-        "label": "ZÄHLERSTAND"
-      },
-      {
-        "start": 187,
-        "end": 192,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 250,
-        "end": 255,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 245,
-        "end": 248,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 140,
-        "end": 143,
-        "label": "ZÄHLERSTAND"
-      }
-    ]
-  },
-  {
-    "file": "173.txt",
-    "text": "An das Serviceteam von Eon, \nim September 2023 habe ich am 1.9 den Abschlag überwiesen und am 26.9 haben sie nochmal den Abschlag für September eingezogen, so dass ich jetzt doppelt bezahlt habe für September.\nErstatten sie mir unverzüglich die 99,96 Euro auf mein Konto bei der Striebitz Christoph AG: DE79170269554043121865\nStriebitz Reichmann AG & Co. KG Kundennummer: 203536716/408923745\nMit freundlichen Grüßen \nDr. Camilla Wesack\n",
-    "labels": [
-      {
-        "start": 326,
-        "end": 357,
-        "label": "FIRMA"
-      },
-      {
-        "start": 279,
-        "end": 301,
-        "label": "BANK"
-      },
-      {
-        "start": 303,
-        "end": 325,
-        "label": "IBAN"
-      },
-      {
-        "start": 372,
-        "end": 391,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 245,
-        "end": 255,
-        "label": "ZAHLUNG"
-      },
-      {
-        "start": 421,
-        "end": 428,
-        "label": "VORNAME"
-      },
-      {
-        "start": 429,
-        "end": 435,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 94,
-        "end": 98,
-        "label": "DATUM"
-      },
-      {
-        "start": 417,
-        "end": 420,
-        "label": "TITEL"
-      },
-      {
-        "start": 59,
-        "end": 62,
-        "label": "DATUM"
-      }
-    ]
-  },
-  {
-    "file": "28.txt",
-    "text": "Hallo, leider kann ich mich in mein Kundenkonto nicht einloggen\nMit freundlichen Grüßen\nHannes Scheel-Bohlander\nDiese Nachricht wurde von meinem Android Mobiltelefon mit GMX Mail gesendet.\n",
-    "labels": [
-      {
-        "start": 112,
-        "end": 188,
-        "label": "GESENDET_MIT"
-      },
-      {
-        "start": 95,
-        "end": 111,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 88,
-        "end": 94,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "44.txt",
-    "text": "Sehr geehrte Damen und Herren,\nleider habe ich noch immer keinen Lidlgutschein im Wert von 50€ erhalten. Aufgrund meins Stromvertrages. Der Juncken GmbH Kundenservice hat mich an Sie verwiesen.\nWann kann ich mit dem Erhalt rechnen Stromerstbelieferung war der 09\n06.23.\nVielen Dank\nBeste Grüße\nSchleich\nDiese Nachricht wurde von meinem Android Mobiltelefon mit [WEB.DE][1] Mail gesendet.\n[1]: http://WEB.DE\n",
-    "labels": [
-      {
-        "start": 393,
-        "end": 406,
-        "label": "LINK"
-      },
-      {
-        "start": 140,
-        "end": 152,
-        "label": "FIRMA"
-      },
-      {
-        "start": 294,
-        "end": 302,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 263,
-        "end": 269,
-        "label": "DATUM"
-      },
-      {
-        "start": 91,
-        "end": 93,
-        "label": "ZAHLUNG"
-      }
-    ]
-  },
-  {
-    "file": "55.txt",
-    "text": "Vertragsnummer 403083108\nSteffi Bolander-Junk\nAufgrund des Wasserschadens vergangenen Jahres,bitten wir dies für das kommende Jahr zu berücksichtigen\nIm Anhang die Stromverbrauchsmitteilung Trocknungsmaßnahme\nDiese Nachricht wurde von meinem Android Mobiltelefon mit GMX Mail gesendet.\n",
-    "labels": [
-      {
-        "start": 209,
-        "end": 285,
-        "label": "GESENDET_MIT"
-      },
-      {
-        "start": 32,
-        "end": 45,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 15,
-        "end": 24,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 25,
-        "end": 31,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "58.txt",
-    "text": "Sehr geehrte Damen und Herren,\nim Auftrag meines Sohnes Kurt Renner-Dörschner bitte ich um die Erklärung des Postens Soforthilfe Dezember. Ich hatte bereits einige Male angerufen mit der Bitte, mir den Betrag aufzuschlüsseln. Leider konnten mir Ihre Mitarbeiter nur die Berechnungsgrundlagen nennen, aber nicht die einzelnen Faktoren (Beträge). Laut Verbraucherzentrale kann man sich den Betrag ausrechnen lassen. Daraufhin ergab sich eine Erstattung von 150,46 € statt 135,34 €.\nMit freundlichen Grüßen\nKurt Renner-Dörschner\ni.A. Clara Renner\n",
-    "labels": [
-      {
-        "start": 61,
-        "end": 77,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 509,
-        "end": 525,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 455,
-        "end": 463,
-        "label": "ZAHLUNG"
-      },
-      {
-        "start": 470,
-        "end": 478,
-        "label": "ZAHLUNG"
-      },
-      {
-        "start": 61,
-        "end": 67,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 509,
-        "end": 515,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 537,
-        "end": 543,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 531,
-        "end": 536,
-        "label": "VORNAME"
-      },
-      {
-        "start": 56,
-        "end": 60,
-        "label": "VORNAME"
-      },
-      {
-        "start": 504,
-        "end": 508,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "65.txt",
-    "text": "Betreuungsbüro \"Schmidtke KG\" L. Jäntsch\n_______________________________________\n24.08.2023\nBetreuungssache * Herr Jobst Oderwald 14.05.1983\n408 113 769\nSehr geehrte Damen und Herren,\nIhr Schreiben vom 17.08.2023 kann diesseits nicht nachvollzogen werden.\nZum Vertragskonto 232 671 429 363 wurde ich mit Schreiben vom 10.08.2023 darüber informiert, dass noch ein Guthaben von 132,92 € vorhanden ist. Dieses bitte ich auf obiges Vertragskonto um zu buchen und mich entsprechend darüber zu informieren.\nVielen Dank im Voraus!\n--\nMit freundlichen Grüßen\nLuzie Jäntsch\nBetreuungsbüro \"Schmidtke KG\" Luzie Jäntsch\nNeue Post 15 c\n73340 Mittweida\nTel.: +49(0)9315 41041\nFax: +49(0)9315 41043\nSicherheitshinweise:\nDiese E-Mail ist ausschließlich für den Adressaten bestimmt und kann vertraulich oder gesetzlich geschützte Informationen enthalten. Sollten Sie nicht der vorgesehene Empfänger dieser Nachricht sein, so bitten wir um eine kurze Nachricht. Jede unbefugte Weiterleitung oder Fertigung einer Kopie ist unzulässig.\nZur Erfüllung der mir durch das Betreuungsgericht im Rahmen der jeweiligen Aufgabenkreise übertragenen Befugnisse speichere ich folgende Ihrer Daten gem. Art. 13 und 14 sowie 6 Abs. 1 lit. c, d und e DSGVO: Ihre Postanschrift, Ihre Telefon- und Faxnummer, Ihr Geschäftszeichen, die Versandform sowie den Inhalt dieses Schreibens im Rahmen der gesetzl. Aufbewahrungsfristen. Sie haben gem. Art. 13 Abs. 2 lit. b und d DSGVO das Recht, die Löschung, Berechtigung und Einschränkung der Verarbeitung dieser Daten sowie das Recht weiterer Auskünfte von mir zu verlangen. Gem. Art. 13 Abs. 2 lit. d DSGVO haben Sie ein Beschwerderecht bei einer Aufsichtsbehörde.\n",
-    "labels": [
-      {
-        "start": 0,
-        "end": 29,
-        "label": "FIRMA"
-      },
-      {
-        "start": 565,
-        "end": 594,
-        "label": "FIRMA"
-      },
-      {
-        "start": 646,
-        "end": 662,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 668,
-        "end": 684,
-        "label": "FAX"
-      },
-      {
-        "start": 274,
-        "end": 289,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 141,
-        "end": 152,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 609,
-        "end": 618,
-        "label": "STRASSE"
-      },
-      {
-        "start": 630,
-        "end": 639,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 376,
-        "end": 384,
-        "label": "ZAHLUNG"
-      },
-      {
-        "start": 33,
-        "end": 40,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 557,
-        "end": 564,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 601,
-        "end": 608,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 551,
-        "end": 556,
-        "label": "VORNAME"
-      },
-      {
-        "start": 595,
-        "end": 600,
-        "label": "VORNAME"
-      },
-      {
-        "start": 619,
-        "end": 623,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 624,
-        "end": 629,
-        "label": "POSTLEITZAHL"
-      }
-    ]
-  },
-  {
-    "file": "67.txt",
-    "text": "Sehr geehrte Damen und Herren,\nich bitte Sie mein Kundenkonto samt aller zu meiner Person gespeicherten Daten zu löschen. \nAndre Sauer\nMansstr. 5\n99357 Gütersloh\ndseidel@example.com\nVielen Dank und liebe Grüße \nAndre Sauer\n",
-    "labels": [
-      {
-        "start": 162,
-        "end": 181,
-        "label": "EMAIL"
-      },
-      {
-        "start": 135,
-        "end": 143,
-        "label": "STRASSE"
-      },
-      {
-        "start": 152,
-        "end": 161,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 123,
-        "end": 128,
-        "label": "VORNAME"
-      },
-      {
-        "start": 211,
-        "end": 216,
-        "label": "VORNAME"
-      },
-      {
-        "start": 129,
-        "end": 134,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 217,
-        "end": 222,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 146,
-        "end": 151,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 144,
-        "end": 145,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 149,
-        "end": 150,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "68.txt",
-    "text": "Liebe Grüße, ich sende Bilder als Beweis dafür, dass ich die Raten bezahlt\nhabe. Vertragsnummer 404 458 065. Viktoria Gertz\n",
-    "labels": [
-      {
-        "start": 96,
-        "end": 107,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 109,
-        "end": 117,
-        "label": "VORNAME"
-      },
-      {
-        "start": 118,
-        "end": 123,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "69.txt",
-    "text": "Sehr geehrte Damen und Herren hiermit nochmals Bestätigung Abschlag August bezahlt wurde Mit freundlichen Grüßen Hahn\n",
-    "labels": [
-      {
-        "start": 113,
-        "end": 117,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "80.txt",
-    "text": "Sehr geehrte Damen und Herren,\nIch kann mich nicht in mein Online Portal einloggen und bekomme hier immer\nfolgenden Fehler (siehe Anhang). Können sie bitte meinen online Zugang\nfreischalten? Danke\nMit freundlichen Grüßen\nEhrentraud Fritsch\n",
-    "labels": [
-      {
-        "start": 221,
-        "end": 231,
-        "label": "VORNAME"
-      },
-      {
-        "start": 232,
-        "end": 239,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "82.txt",
-    "text": "bitte rufen Sie mich an wegen Vertragsbündelung.\nVertrag 401584900 mit Vertrag 401584900\nVielen Dank im voraus.\nDoreen und Hermann Etzler\n",
-    "labels": [
-      {
-        "start": 57,
-        "end": 66,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 79,
-        "end": 88,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 123,
-        "end": 130,
-        "label": "VORNAME"
-      },
-      {
-        "start": 112,
-        "end": 118,
-        "label": "VORNAME"
-      },
-      {
-        "start": 131,
-        "end": 137,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "84.txt",
-    "text": "Durch einen Fehler ihrerseits wird mir seit Februar 2023 kein Abschlag\nabgebucht.Mehrere Anrufe und E-Mails werden einfach ignoriert. Bitte\nüberprüfen Sie meinen Vertrag mit der Nr.\n407982866\nSollte ich nach 4 Wochen nichts hören werde ich meinen Rechtschutz\neinschalten.\nMfG Christl Koch\n",
-    "labels": [
-      {
-        "start": 44,
-        "end": 56,
-        "label": "DATUM"
-      },
-      {
-        "start": 182,
-        "end": 191,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 276,
-        "end": 283,
-        "label": "VORNAME"
-      },
-      {
-        "start": 284,
-        "end": 288,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "91.txt",
-    "text": "Guten Tag,\nwie gewünscht sende ich Ihnen den Auftrag noch einmal zu.\nDer Auftrag wurde allerdings auch schon per Post am 24.07.2023 versandt.\nDa die Auflösung des vorherigen Vertrages Ihr Verschulden ist bitte ich nun um schnellstmögliche Bearbeitung.\nMit freundlichem Gruß\nProf. Gloria Matthäi\n",
-    "labels": [
-      {
-        "start": 121,
-        "end": 131,
-        "label": "DATUM"
-      },
-      {
-        "start": 287,
-        "end": 294,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 274,
-        "end": 279,
-        "label": "TITEL"
-      },
-      {
-        "start": 280,
-        "end": 286,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "97.txt",
-    "text": "Sehr geehrte Damen und Herren,\nBezug nehmend auf Ihr Schreiben vom 11.08.2023 erhalten Sie die\nBescheinigung der Firma über den Stromverbrauch.\nFreundliche Grüße\nSigmund Schmidtke\n",
-    "labels": [
-      {
-        "start": 67,
-        "end": 77,
-        "label": "DATUM"
-      },
-      {
-        "start": 170,
-        "end": 179,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 162,
-        "end": 169,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "100.txt",
-    "text": "Vertragsnummer 404149058\n \nFam. Zirme/Rogner\nHenkring 06\n58954 Freising\n \nSehr geehrte Damen und Herren, wir haben am 17.07.23 ein email an euch \ngeschickt und leider nach fast 1,5 Monaten immer noch keine Antwort \nbekommen. Schreiben heute noch ein Mal. \n \nin letzter Abrechnung vom 29.06.2023 ist einen Fehler aufgetreten und zwar \nZählerstand passt nicht. Am 18.06.23 unsere tatsächliche Zählerstand war \n13962 m3. Laut Ihre Abrechnung 14042 m3. Das ist 80m3 Differenz (also 80m3 \nzu viel). Wir bieten Sie alles umzurechnen . Vielen Dank.\n \n \nMfG Fam. Zirme/Rogner\n \n﻿\n",
-    "labels": [
-      {
-        "start": 284,
-        "end": 294,
-        "label": "DATUM"
-      },
-      {
-        "start": 118,
-        "end": 126,
-        "label": "DATUM"
-      },
-      {
-        "start": 362,
-        "end": 370,
-        "label": "DATUM"
-      },
-      {
-        "start": 45,
-        "end": 53,
-        "label": "STRASSE"
-      },
-      {
-        "start": 63,
-        "end": 71,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 38,
-        "end": 44,
-        "label": "VORNAME"
-      },
-      {
-        "start": 561,
-        "end": 567,
-        "label": "VORNAME"
-      },
-      {
-        "start": 32,
-        "end": 37,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 555,
-        "end": 560,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 57,
-        "end": 62,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 408,
-        "end": 413,
-        "label": "ZÄHLERSTAND"
-      },
-      {
-        "start": 439,
-        "end": 444,
-        "label": "ZÄHLERSTAND"
-      },
-      {
-        "start": 54,
-        "end": 56,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 287,
-        "end": 289,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 365,
-        "end": 367,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "106.txt",
-    "text": "Sehr geehrte Damen und Herren,\nanbei übersende ich Ihnen schriftlich meine Kündigung des Erdgasvertrages mit der Vertragsnummer 409107498.\nDie Kündigung habe ich auch bereits über das Onlineportal \"Mein Rogner\" getätigt.\nMit freundlichen Grüßen\nGabriel Mitschke-Seip\n",
-    "labels": [
-      {
-        "start": 253,
-        "end": 266,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 198,
-        "end": 209,
-        "label": "FIRMA"
-      },
-      {
-        "start": 128,
-        "end": 137,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 245,
-        "end": 252,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "120.txt",
-    "text": "Sehr geehrte Damen und Herren, ich habe bereit zum 1. August den Beitrag überwiesen. Mit freundlichen Grüßen, Wesack.\nGesendet mit der mobilen Mail App\n",
-    "labels": [
-      {
-        "start": 118,
-        "end": 151,
-        "label": "GESENDET_MIT"
-      },
-      {
-        "start": 51,
-        "end": 60,
-        "label": "DATUM"
-      },
-      {
-        "start": 110,
-        "end": 116,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "126.txt",
-    "text": "Sehr geehrte Damen und Herren,\nHerr Prof. Kreszenz Mende ist verstorben. Bitte ändern Sie die Vertrags-Anschrift auf seine Frau Lilo Mende.\nNeue Anschrift:\nLilo Mende\nMiesgasse 591\n97519 Riedbach\nDiese Information sende ich Ihnen im Auftrag von meiner Schwiegermutter Lilo Mende.\nMit freundlichen Grüßen\nResi Mende\nTel. +49(0)6700963064\n",
-    "labels": [
-      {
-        "start": 320,
-        "end": 336,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 42,
-        "end": 50,
-        "label": "VORNAME"
-      },
-      {
-        "start": 36,
-        "end": 41,
-        "label": "TITEL"
-      },
-      {
-        "start": 51,
-        "end": 56,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 133,
-        "end": 138,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 161,
-        "end": 166,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 273,
-        "end": 278,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 309,
-        "end": 314,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 51,
-        "end": 56,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 133,
-        "end": 138,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 161,
-        "end": 166,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 273,
-        "end": 278,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 309,
-        "end": 314,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 51,
-        "end": 56,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 133,
-        "end": 138,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 161,
-        "end": 166,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 273,
-        "end": 278,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 309,
-        "end": 314,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 128,
-        "end": 132,
-        "label": "VORNAME"
-      },
-      {
-        "start": 156,
-        "end": 160,
-        "label": "VORNAME"
-      },
-      {
-        "start": 268,
-        "end": 272,
-        "label": "VORNAME"
-      },
-      {
-        "start": 304,
-        "end": 308,
-        "label": "VORNAME"
-      }
-    ]
-  }
-]
\ No newline at end of file
Index: notebooks/data/granular_dataset_split/train.json
===================================================================
diff --git a/notebooks/data/granular_dataset_split/train.json b/notebooks/data/granular_dataset_split/train.json
deleted file mode 100644
--- a/notebooks/data/granular_dataset_split/train.json	(revision 68e3fd01408523769b50e7566e6fd0db7c5afb8a)
+++ /dev/null	(revision 68e3fd01408523769b50e7566e6fd0db7c5afb8a)
@@ -1,4162 +0,0 @@
-[
-  {
-    "file": "1.txt",
-    "text": "Hallo liebes Eon Team,\nes geht um die Vertragsnummer 406027919.\nBei der Einrichtung meines neuen Vertrages wurde leider die Überweisung als\nZahlungsart gewählt von dem jungen Kollegen an der Wohnungstür. Ich würde\nes gerne wieder per Lastschrift abbuchen lassen, um mir den Stress zu\nersparen.\nVerbraucherstelle ist weiterhin die Gertzgasse 2 in 17389 Anklam.\nGruß Berthold Huhn\n",
-    "labels": [
-      {
-        "start": 330,
-        "end": 340,
-        "label": "STRASSE"
-      },
-      {
-        "start": 53,
-        "end": 62,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 365,
-        "end": 373,
-        "label": "VORNAME"
-      },
-      {
-        "start": 352,
-        "end": 358,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 346,
-        "end": 351,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 374,
-        "end": 378,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 57,
-        "end": 58,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 341,
-        "end": 342,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "5.txt",
-    "text": "Sehr geehrte Damen und Herren,\nmit dieser E-Mail sende ich Ihnen die Daten und Papiere zu um den\nStromzähler zu entsperren.\nZählernummer: 1LOG0065054693\nHandynummer: 015201837094\nVertragsnummer: 401897257\nMit freundlichen Grüßen\nVeronika Walter\n",
-    "labels": [
-      {
-        "start": 138,
-        "end": 152,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 166,
-        "end": 178,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 195,
-        "end": 204,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 229,
-        "end": 237,
-        "label": "VORNAME"
-      },
-      {
-        "start": 238,
-        "end": 244,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "6.txt",
-    "text": "Senol Trommler Steckelstr. 0304199 Bamberg Geb.04.01.1980\nKundennr.407595251\nSehr geehrtes EON Team,laut eines EON Mitarbeiters bei dem Telefongespräch gestern hätte ich für diesen August 2023 nur 110€ an Abschlagszahlung für Gas bezahlt was aber nicht stimmen kann.\nIm Anhang befindet sich der Nachweis das meine Abschlagszahlung für Gas im August 2023 ganze 200€ betragen haben.\nBitte um volle Berechnung meiner Zahlung.\nMit freundlichen Grüßen Senol Trommler\n",
-    "labels": [
-      {
-        "start": 15,
-        "end": 26,
-        "label": "STRASSE"
-      },
-      {
-        "start": 47,
-        "end": 57,
-        "label": "DATUM"
-      },
-      {
-        "start": 181,
-        "end": 192,
-        "label": "DATUM"
-      },
-      {
-        "start": 342,
-        "end": 353,
-        "label": "DATUM"
-      },
-      {
-        "start": 67,
-        "end": 76,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 6,
-        "end": 14,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 453,
-        "end": 461,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 27,
-        "end": 34,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 35,
-        "end": 42,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 0,
-        "end": 5,
-        "label": "VORNAME"
-      },
-      {
-        "start": 447,
-        "end": 452,
-        "label": "VORNAME"
-      },
-      {
-        "start": 197,
-        "end": 201,
-        "label": "ZAHLUNG"
-      },
-      {
-        "start": 360,
-        "end": 364,
-        "label": "ZAHLUNG"
-      }
-    ]
-  },
-  {
-    "file": "7.txt",
-    "text": "Sehr geehrte Damen und Herren,\nwann bekomme ich meine Abrechnung? Der Vertrag ist seit Januar 23 beendet\nMeine Daten:\nVor-, Nachname: Friedrich-Karl Krause\nGeburtsdatum: 14.09.1958\nLieferadresse: Haaseplatz 5\nZählernummer: 12543\nKundennummer: 408274728\nMit freundlichen Grüßen\n",
-    "labels": [
-      {
-        "start": 134,
-        "end": 148,
-        "label": "VORNAME"
-      },
-      {
-        "start": 170,
-        "end": 180,
-        "label": "DATUM"
-      },
-      {
-        "start": 196,
-        "end": 206,
-        "label": "STRASSE"
-      },
-      {
-        "start": 87,
-        "end": 96,
-        "label": "DATUM"
-      },
-      {
-        "start": 243,
-        "end": 252,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 149,
-        "end": 155,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 223,
-        "end": 228,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 178,
-        "end": 179,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 207,
-        "end": 208,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 225,
-        "end": 226,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "8.txt",
-    "text": "Sehr geehrte Damen und Herren, \n \nvielen Dank für die Erstellung der Rechnung. Leider ist mir aber aufgefallen,\ndass bei den Rechnungen für die Vertragskonten 401046699 und 406260779 jeweils\nder Eon plus Rabatt nicht gewährt wurde. Aus diesem Grund bitte ich noch um\neine Stellungnahme wenn möglich schriftlich bzw. einen Rückruf von Frau\nEisenstachel oder eine Korrektur der beiden Rechnungen. \n \nMit freundlichen Grüßen \nNatalia Lange",
-    "labels": [
-      {
-        "start": 339,
-        "end": 351,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 159,
-        "end": 168,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 173,
-        "end": 182,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 423,
-        "end": 430,
-        "label": "VORNAME"
-      },
-      {
-        "start": 431,
-        "end": 436,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "9.txt",
-    "text": "OR-0001239759\nKunde: Gertraude Wagenknecht-Speer\nZähler: 486498046387\nProduktwechsel\nSehr geehrte Damen und Herren,\nanbei das Formular unterschrieben zurück.\nBitte um Kenntnisnahme.\nMit freundlichen Grüßen\nGertraude Wagenknecht-Speer\nDiese Nachricht wurde von meinem Android Mobiltelefon mit [WEB.DE][1] Mail gesendet.\n[1]: http://WEB.DE\n",
-    "labels": [
-      {
-        "start": 234,
-        "end": 318,
-        "label": "GESENDET_MIT"
-      },
-      {
-        "start": 319,
-        "end": 337,
-        "label": "LINK"
-      },
-      {
-        "start": 31,
-        "end": 48,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 216,
-        "end": 233,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 57,
-        "end": 69,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 21,
-        "end": 30,
-        "label": "VORNAME"
-      },
-      {
-        "start": 206,
-        "end": 215,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "10.txt",
-    "text": ">\n> Sehr geehrter Damen und Herren,\n>\n> Würde gerne Einer 30 Euro monatlich Ratenzahlung für meiner letzte Strom\n> Rechnung vereinbaren.\n>\n> Vertragsnummer: 4007328857\n>\n> Rechnungsnummer: 858 341 857 670 471 761\n>\n>\n> Mit freundlichem grüßen\n>\n> Herr Roger Fischer\n>\n",
-    "labels": [
-      {
-        "start": 189,
-        "end": 212,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 157,
-        "end": 167,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 58,
-        "end": 65,
-        "label": "ZAHLUNG"
-      },
-      {
-        "start": 258,
-        "end": 265,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 252,
-        "end": 257,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "11.txt",
-    "text": "Sehr geehrte Damen und Herren,\nanbei, als pdf-Datei die fehlende Unterlage.\nMit freundlichen Grüßen\nManuela Losekann\n",
-    "labels": [
-      {
-        "start": 108,
-        "end": 116,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 100,
-        "end": 107,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "12.txt",
-    "text": "Guten Tag\nEs wurde noch ein Zhlerfoto vom Zähler mit der Nummer 63746253-1992 benötigt.\nKunde: Ulrich Rohleder\nVerbrauchstelle: Steckelring 1, 88226 Viechtach\nZähler: 63746253-1992\nVertragsnummer: 408 235 770\nFoto ist im Anhang\nMfg\n",
-    "labels": [
-      {
-        "start": 64,
-        "end": 77,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 167,
-        "end": 180,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 197,
-        "end": 208,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 128,
-        "end": 139,
-        "label": "STRASSE"
-      },
-      {
-        "start": 149,
-        "end": 158,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 102,
-        "end": 110,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 95,
-        "end": 101,
-        "label": "VORNAME"
-      },
-      {
-        "start": 143,
-        "end": 148,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 73,
-        "end": 74,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 140,
-        "end": 141,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 176,
-        "end": 177,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "13.txt",
-    "text": "Guten Tag,\nwie gerade telefonisch besprochen sende ich Ihnen den Mietvertrag im Anhang.\nMeine Eon Vertragsnummer lautet : 407177878\nDie Zählernummer für Strom lautet: 1 ITR00 7263 9265\nAktueller Zählerstand: 7761,1 kWh\nBitte schalten sie mir so schnell es geht den Strom frei. Ich lebe seit 1,5 Wochen ohne Strom hier.\nIch bitte außerdem um eine Rückmeldung auf diese Mailadresse.\nMit freundlichen Grüßen\nJana Hahn\n",
-    "labels": [
-      {
-        "start": 167,
-        "end": 184,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 208,
-        "end": 218,
-        "label": "ZÄHLERSTAND"
-      },
-      {
-        "start": 122,
-        "end": 131,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 405,
-        "end": 409,
-        "label": "VORNAME"
-      },
-      {
-        "start": 410,
-        "end": 414,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "14.txt",
-    "text": "Sehr geehrte Damen und Herren,\nich widerrufe hiermit meine Einwilligung in die Verarbeitung meiner\npersonenbezogenen Daten. Ich fordere Sie darüber hinaus auf, die von Ihnen\nzu meiner Person gespeicherten personenbezogenen Daten zu löschen und mir\nanschließend die Löschung unverzüglich zu bestätigen.\nSollten Gründe gegen die Löschung meiner personenbezogenen Daten sprechen,\nbitte ich um Angaben der jeweiligen gesetzlichen Grundlage.\nMit freundlichen Grüßen\nManuel Krein\n",
-    "labels": [
-      {
-        "start": 461,
-        "end": 467,
-        "label": "VORNAME"
-      },
-      {
-        "start": 468,
-        "end": 473,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "16.txt",
-    "text": "Sehr geehrte Damen und Herren,\nSie schreiben mir am 7.10.2022 dass ich noch einen Guthaben von 82,19€ habe. Diese wurde noch nie zurück bezahlt. Der Konto , der Sie angegeben haben war richtig allerdings kam das Geld nie an. Bitte nochmal prüfen und mir das Geld zahlen. Im Anhang der Brief.\nMit freundlichen Grüßen ,\nWillibald Lindau\nTrimis de pe Outlook pentru iOS<https://aka.ms/o0ukef>\n",
-    "labels": [
-      {
-        "start": 335,
-        "end": 389,
-        "label": "GESENDET_MIT"
-      },
-      {
-        "start": 52,
-        "end": 61,
-        "label": "DATUM"
-      },
-      {
-        "start": 318,
-        "end": 327,
-        "label": "VORNAME"
-      },
-      {
-        "start": 328,
-        "end": 334,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 95,
-        "end": 101,
-        "label": "ZAHLUNG"
-      }
-    ]
-  },
-  {
-    "file": "21.txt",
-    "text": "Liebes Team,\nIch möchte gerne zwei Ladesäulen auf mein Grundstück bauen. \nGeht dieses das unsere Gäste mit Karte zahlen? \nEs ist für unsere \nPension \nFadime-Klapp-Platz 129\n15937 Beeskow\nGrundstück gehört mir.\nWas können Sie mir anbieten, wenn ich es nur bestelle ? \nVielen Dank & viele Grüße \nAlwina Häring\nGesendet mit der mobilen Mail App\n",
-    "labels": [
-      {
-        "start": 308,
-        "end": 341,
-        "label": "GESENDET_MIT"
-      },
-      {
-        "start": 150,
-        "end": 168,
-        "label": "STRASSE"
-      },
-      {
-        "start": 179,
-        "end": 186,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 294,
-        "end": 300,
-        "label": "VORNAME"
-      },
-      {
-        "start": 301,
-        "end": 307,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 173,
-        "end": 178,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 169,
-        "end": 172,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "22.txt",
-    "text": "Seit Februar haben Sie nicht eine einzige meiner Mails oder Post von meinem Anwalt beantwortet.\nSie haben mir Geld gestohlen und bekommen es jetzt nicht mal auf die Kette, meine Daten aus Ihrem System zu löschen. Auch dies habe ich bereits mehrfach via Portal, Mail und Telefon gefordert, da ich keinen Vertrag mehr mit Ihnen habe.\nZum letzten Mal: LÖSCHEN SIE ALLE MEINE DATEN AUS IHREN SYSTEMEN! Sie verstoßen damit gegen die DSGVO! Wenn Sie mir bis spätestens 11.08.23 nicht schriftlich bestätigen, dass meine Daten gelöscht wurden, wird dies zur Anzeige gebracht!\nVertragskonto: 407935618\nKristine Weitzel\n",
-    "labels": [
-      {
-        "start": 463,
-        "end": 471,
-        "label": "DATUM"
-      },
-      {
-        "start": 583,
-        "end": 592,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 593,
-        "end": 601,
-        "label": "VORNAME"
-      },
-      {
-        "start": 602,
-        "end": 609,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 5,
-        "end": 12,
-        "label": "DATUM"
-      }
-    ]
-  },
-  {
-    "file": "23.txt",
-    "text": "Sehr geehrte Damen und Herren,\nIch habe 2021 das Haus meines verstorbenen\nOnkels übernommen.\nLeider wurde damals versäumt den Namen im Vertrag zu ändern.\nIch bitte die Daten im Vertrag entsprechend zu ändern.\nKarl-Friedrich Rörricht\n20.06.1980\nDie Bankverbindung(Einziehung vom Konto meiner Schwester Katrin Rörricht) kann weiter verwendet werden.\nMit freundlichen Grüßen\nKarl-Friedrich Rörricht\nDiese Nachricht wurde von meinem Android Mobiltelefon mit GMX Mail gesendet.\n",
-    "labels": [
-      {
-        "start": 396,
-        "end": 472,
-        "label": "GESENDET_MIT"
-      },
-      {
-        "start": 209,
-        "end": 223,
-        "label": "VORNAME"
-      },
-      {
-        "start": 372,
-        "end": 386,
-        "label": "VORNAME"
-      },
-      {
-        "start": 233,
-        "end": 243,
-        "label": "DATUM"
-      },
-      {
-        "start": 224,
-        "end": 232,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 308,
-        "end": 316,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 387,
-        "end": 395,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 224,
-        "end": 232,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 308,
-        "end": 316,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 387,
-        "end": 395,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 301,
-        "end": 307,
-        "label": "VORNAME"
-      },
-      {
-        "start": 40,
-        "end": 44,
-        "label": "DATUM"
-      }
-    ]
-  },
-  {
-    "file": "24.txt",
-    "text": "Sehr geehrte Damen und Herren,\nbitte bereiten Sie mir ein Angebot für oben genannten Rahmenvertrag vor.\nMeine Daten finden Sie entsprechend nachstehend.\nJonathan Huhn\nSpeerstraße 10\n32351 Stemwede\nVertragsnummer: 406582696\nWLV: 919684277\nVielen Dank,\nJonathan Huhn\n",
-    "labels": [
-      {
-        "start": 167,
-        "end": 178,
-        "label": "STRASSE"
-      },
-      {
-        "start": 213,
-        "end": 222,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 153,
-        "end": 161,
-        "label": "VORNAME"
-      },
-      {
-        "start": 251,
-        "end": 259,
-        "label": "VORNAME"
-      },
-      {
-        "start": 188,
-        "end": 196,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 182,
-        "end": 187,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 162,
-        "end": 166,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 260,
-        "end": 264,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 179,
-        "end": 181,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "25.txt",
-    "text": "Sehr geehrte Damen und Herren,\nwie gewünscht sende ich Ihnen meine Daten zum Abgleich zu und bestätige die Richtigkeit.\nMeine Daten:\nVor-, Nachname: Dr. Ramazan Eimer\nGeburtsdatum: 01.02.1976\nLieferadresse: Rico-Scheibe-Weg 101, 76218 Geithain\nZählernummer: 1EMH0016453739\nAktueller Anbieter: E.ON Energie Deutschland GmbH\nAktuelle Kundennummer: 204518332\nMit freundlichen Grüßen\n",
-    "labels": [
-      {
-        "start": 207,
-        "end": 223,
-        "label": "STRASSE"
-      },
-      {
-        "start": 258,
-        "end": 272,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 181,
-        "end": 191,
-        "label": "DATUM"
-      },
-      {
-        "start": 346,
-        "end": 355,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 235,
-        "end": 243,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 153,
-        "end": 160,
-        "label": "VORNAME"
-      },
-      {
-        "start": 161,
-        "end": 166,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 229,
-        "end": 234,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 149,
-        "end": 152,
-        "label": "TITEL"
-      },
-      {
-        "start": 224,
-        "end": 227,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "27.txt",
-    "text": "Hallo liebes E.On Team,\nwie telefonisch besprochen, angehangen die 2 Screenshots zur Doppelten\nAbbuchung.\nMeine Frage: Warum wurde doppelt abgebucht und wie bekomme ich mein Geld\nzurück?\nMit freundlichen Grüßen\nLoretta Naser-Reuter\n[image: WhatsApp Bild 2023-08-14 um 14.36.35.jpg]\n[image: WhatsApp Bild 2023-08-14 um 14.36.36.jpg]\n",
-    "labels": [
-      {
-        "start": 232,
-        "end": 281,
-        "label": "LINK"
-      },
-      {
-        "start": 282,
-        "end": 331,
-        "label": "LINK"
-      },
-      {
-        "start": 219,
-        "end": 231,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 211,
-        "end": 218,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "29.txt",
-    "text": "Sehr geehrte Damen und Herren,\nhiermit möchte ich dass all meine personenbezogenen Daten (Vertragskonto 401384807) gelöscht werden.\nIch bitte um eine schriftliche Bestätigung darüber, dass alle Daten von mir mit dem o.g. Vertragskonto gelöscht worden sind.\nMit freundlichen Grüßen,\nLiselotte Metz\n",
-    "labels": [
-      {
-        "start": 282,
-        "end": 291,
-        "label": "VORNAME"
-      },
-      {
-        "start": 104,
-        "end": 113,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 292,
-        "end": 296,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "30.txt",
-    "text": "Sehr geehrte Damen und Herren,\n \nich möchte Ihnen mitteilen, dass sich ab 01.09.2023 meine Kontonummer für\nLast-und Gutschriften an folgendem Objekt ändert:\n \nVertragsnummer: 402829008\nVerbrauchsstelle : Peukertweg 665, 80513 Eutin\nZähler: 1126100052313042\n \n \nNeue Kontonummer ab 01.09.2023 \n \nDr. Traudl Budig\nIBAN: DE85230541192884717022\nBIC: GENODEF1XYZ\nJuncken Bank\n \nMit freundlichen Grüßen und herzlichen Dank\nDr. Traudl Budig\nLorchallee 30\n37818 Miltenberg\n",
-    "labels": [
-      {
-        "start": 318,
-        "end": 340,
-        "label": "IBAN"
-      },
-      {
-        "start": 240,
-        "end": 256,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 358,
-        "end": 370,
-        "label": "BANK"
-      },
-      {
-        "start": 74,
-        "end": 84,
-        "label": "DATUM"
-      },
-      {
-        "start": 281,
-        "end": 291,
-        "label": "DATUM"
-      },
-      {
-        "start": 346,
-        "end": 357,
-        "label": "BIC"
-      },
-      {
-        "start": 204,
-        "end": 214,
-        "label": "STRASSE"
-      },
-      {
-        "start": 434,
-        "end": 444,
-        "label": "STRASSE"
-      },
-      {
-        "start": 454,
-        "end": 464,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 175,
-        "end": 184,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 299,
-        "end": 305,
-        "label": "VORNAME"
-      },
-      {
-        "start": 421,
-        "end": 427,
-        "label": "VORNAME"
-      },
-      {
-        "start": 306,
-        "end": 311,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 428,
-        "end": 433,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 220,
-        "end": 225,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 226,
-        "end": 231,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 448,
-        "end": 453,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 295,
-        "end": 298,
-        "label": "TITEL"
-      },
-      {
-        "start": 417,
-        "end": 420,
-        "label": "TITEL"
-      },
-      {
-        "start": 215,
-        "end": 218,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 252,
-        "end": 254,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 323,
-        "end": 325,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 445,
-        "end": 447,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "31.txt",
-    "text": "Sehr geehrte Damen und Herren, Da wir durch einen Wasserschadens einen bedingten Mehrverbrauch der Trocknungsgeräten hatten., bitte ich Sie bei den nächsten Abschlagszahlungen dies nicht zu berücksichtigen. Der Betrag wird mir von der Versicherung erstattet. \nGerne höre ich von Ihnen Viele Grüße Petros Bonbach \nGesendet von Naser Hande KGaA Mail auf Android\n",
-    "labels": [
-      {
-        "start": 313,
-        "end": 359,
-        "label": "GESENDET_MIT"
-      },
-      {
-        "start": 304,
-        "end": 311,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 297,
-        "end": 303,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "33.txt",
-    "text": "Sehr geehrte Damen und Herren,\n \nin meinem Haus, in der Scholzweg 3, 17326 Starnberg sind seit dem 13.06.2023 \nneue Mieter eingezogen. Ich bitte den Vertrag auf die neuen Mieter \numzuschreiben, mich Abzurechnen und künftig mit den Mietern abzurechnen. \nDen Mietvertrag und das Übergabeprotokoll sende ich als Anlage anbei. Ich \ndenke da sind alle relevanten Daten enthalten.\n \nBei Fragen stehe ich Ihnen zur Verfügung.\n \nMit freundlichem Gruß\nAribert Schmidt\n \n﻿\n",
-    "labels": [
-      {
-        "start": 99,
-        "end": 109,
-        "label": "DATUM"
-      },
-      {
-        "start": 56,
-        "end": 65,
-        "label": "STRASSE"
-      },
-      {
-        "start": 75,
-        "end": 84,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 443,
-        "end": 450,
-        "label": "VORNAME"
-      },
-      {
-        "start": 451,
-        "end": 458,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 69,
-        "end": 74,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 66,
-        "end": 67,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 71,
-        "end": 72,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 100,
-        "end": 101,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 108,
-        "end": 109,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "35.txt",
-    "text": "Sehr geehrte Damen und Herren,\nwie mit Ihrem Kollegen telefonisch besprochen, anbei das Fotos des Zähler von oben genanntem Vertrag.\nMit freundlichen Grüßen / With best regards\nGerolf Buchholz\nEinkauf / Purchasing\nWende Stadelmann GmbH\nCarlos-Weiß-Allee 1-3\nD-91531 Hildburghausen\nFon: +49+49(0)4549 268653 11\nwww.hgo-gmbh.de\nSkype: Gerolf_Buchholz\nAmtsgericht Hildburghausen HRB 89781\nVorstand: Hanspeter Ruppert, Heinfried Fischer\nAufsichtsratsvorsitzende: Dr. Astrid Köhler\n----------------------- Vertraulichkeitshinweis / Confidentiality notice -----------------------------------\nDiese E-Mail enthält vertrauliche und/oder rechtlich geschützte Informationen. Wenn Sie nicht der richtige\nAdressat sind oder diese E-Mail irrtümlich erhalten haben, informieren Sie bitte sofort den Absender und\nvernichten Sie diese Mail. Das unerlaubte Kopieren sowie die unbefugte Weitergabe dieser Mail ist nicht\ngestattet.\nThis e-mail may contain confidential and/or privileged information. If you are not the intended recipient or\nhave received this e-mail in error please notify the sender immediately and destroy this e-mail. Any\nunauthorized copying, disclosure or distribution of the material in this e-mail is strictly forbidden.\nInformationen zum Datenschutz finden Sie auf unserr Homepage unter hgo-gmbh.de/datenschutz\nInformation about the data protection you find on our website hgo-gmbh.de/en/data-privacy-statement\n",
-    "labels": [
-      {
-        "start": 349,
-        "end": 476,
-        "label": "DATUM"
-      },
-      {
-        "start": 1379,
-        "end": 1416,
-        "label": "LINK"
-      },
-      {
-        "start": 286,
-        "end": 309,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 236,
-        "end": 257,
-        "label": "STRASSE"
-      },
-      {
-        "start": 1293,
-        "end": 1316,
-        "label": "LINK"
-      },
-      {
-        "start": 214,
-        "end": 235,
-        "label": "FIRMA"
-      },
-      {
-        "start": 310,
-        "end": 325,
-        "label": "LINK"
-      },
-      {
-        "start": 266,
-        "end": 280,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 361,
-        "end": 375,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 184,
-        "end": 192,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 340,
-        "end": 348,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 258,
-        "end": 265,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 177,
-        "end": 183,
-        "label": "VORNAME"
-      },
-      {
-        "start": 333,
-        "end": 339,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "36.txt",
-    "text": "Sehr geehrte Damen und Herren, \nIch Monique Schmidtke, Eigentümer der Immobilie an der Strohstr. 02 in 72709 Strausberg bitte sie den Stromzähler mit der Zähler Nr.23976538 zu entsperren. \nDa es für die Wohnung einen neuen Mieter gibt und dieser nicht dafür verantwortlich ist, dass der Stromzähler gesperrt ist, sondern dieses wurde von den vorherigen Mieterverschuldeten \nMit freundlichen Grüßen \nSchmidtke\n",
-    "labels": [
-      {
-        "start": 87,
-        "end": 96,
-        "label": "STRASSE"
-      },
-      {
-        "start": 109,
-        "end": 119,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 44,
-        "end": 53,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 399,
-        "end": 408,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 164,
-        "end": 172,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 36,
-        "end": 43,
-        "label": "VORNAME"
-      },
-      {
-        "start": 103,
-        "end": 108,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 97,
-        "end": 99,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "37.txt",
-    "text": "Guten Tag,\nim Anhang mein Stromzählerstand.\nIch bitte um eine kurze Rückmeldung.\nMfg Bonbach\n",
-    "labels": [
-      {
-        "start": 85,
-        "end": 92,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "38.txt",
-    "text": "Sehr geehrter Damen und Herren, Hiermit sende ich Ihnen die Kündigung Bestätigung. Bitte sehen Sie den Anhang dankeSent from my Galaxy\n",
-    "labels": [
-      {
-        "start": 115,
-        "end": 134,
-        "label": "GESENDET_MIT"
-      }
-    ]
-  },
-  {
-    "file": "39.txt",
-    "text": "Sehr geehrte Damen und Herren,\nwir bitten Sie um die Reduzierung der Abschlagskosten der Eheleute Reuter, da das Objekt am Wilmsenplatz 23 in 64085 Haldensleben ab dem 15.08.2023 unbewohnt ist und verkauft wird.\nMit freundlichen Grüßen\nGülay Geißler\nWende GbR\nEmmerich-Hartung-Ring 74\n64085 Haldensleben\nTel.: 02390 324348\n[cid:image001.jpg@01D9D68F.2E36C8F0]\nzgrein-groth@example.com<mailto:zgrein-groth@example.com>\nwww.wende-immobilien.de<http://www.wende-immobilien.de/>\n",
-    "labels": [
-      {
-        "start": 418,
-        "end": 474,
-        "label": "LINK"
-      },
-      {
-        "start": 360,
-        "end": 417,
-        "label": "LINK"
-      },
-      {
-        "start": 323,
-        "end": 359,
-        "label": "LINK"
-      },
-      {
-        "start": 260,
-        "end": 281,
-        "label": "STRASSE"
-      },
-      {
-        "start": 310,
-        "end": 322,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 123,
-        "end": 135,
-        "label": "STRASSE"
-      },
-      {
-        "start": 148,
-        "end": 160,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 291,
-        "end": 303,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 148,
-        "end": 160,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 291,
-        "end": 303,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 168,
-        "end": 178,
-        "label": "DATUM"
-      },
-      {
-        "start": 250,
-        "end": 259,
-        "label": "FIRMA"
-      },
-      {
-        "start": 242,
-        "end": 249,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 98,
-        "end": 104,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 236,
-        "end": 241,
-        "label": "VORNAME"
-      },
-      {
-        "start": 142,
-        "end": 147,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 285,
-        "end": 290,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 142,
-        "end": 147,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 285,
-        "end": 290,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 136,
-        "end": 138,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 176,
-        "end": 178,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 311,
-        "end": 313,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 282,
-        "end": 284,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "41.txt",
-    "text": "Hiermit schicke ich die Unterlagen für den Zähler von Monica Kade ,\nMirjam-Mälzer-Straße 36, 75680 Neuss.\nDie Kundennummer 402390007 gehört zur Zählernummer 1APA018847123 .\nAnbei schicke ich die Unterlagen für diesen Zähler.\nDa ein Fehler aufgetreten ist, möchten Sie die Unterlagen von Familie\n Hans-Werner/Miriam Schuster\nPergandegasse 9\n21333 Grimma\neinsehen. Wir haben die Erlaubnis von Familie Schuster erhalten, für die\nPrüfung des Zähler mit der Nummer 1APA0189762453 .\nVielen Dank für die schnelle Klärung Familie Kade.\n",
-    "labels": [
-      {
-        "start": 68,
-        "end": 88,
-        "label": "STRASSE"
-      },
-      {
-        "start": 460,
-        "end": 474,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 324,
-        "end": 337,
-        "label": "STRASSE"
-      },
-      {
-        "start": 157,
-        "end": 170,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 296,
-        "end": 307,
-        "label": "VORNAME"
-      },
-      {
-        "start": 123,
-        "end": 132,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 315,
-        "end": 323,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 399,
-        "end": 407,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 315,
-        "end": 323,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 399,
-        "end": 407,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 54,
-        "end": 60,
-        "label": "VORNAME"
-      },
-      {
-        "start": 346,
-        "end": 352,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 308,
-        "end": 314,
-        "label": "VORNAME"
-      },
-      {
-        "start": 93,
-        "end": 98,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 99,
-        "end": 104,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 340,
-        "end": 345,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 61,
-        "end": 65,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 522,
-        "end": 526,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 89,
-        "end": 91,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 127,
-        "end": 128,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 338,
-        "end": 339,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 467,
-        "end": 468,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "42.txt",
-    "text": "Sehr geehrte Damen und Herren,\nnach Tarifwechsel Strom sehe ich meinen neuen Vertrag nicht mehr im Online Portal. Ich bitte, den Vertrag hinzufügen:\nVertragskonto: Nerger Grauel409291555Zählernummer:456123-5007643\nVielen Dank!\n",
-    "labels": [
-      {
-        "start": 199,
-        "end": 213,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 177,
-        "end": 186,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 164,
-        "end": 170,
-        "label": "VORNAME"
-      },
-      {
-        "start": 171,
-        "end": 177,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "43.txt",
-    "text": "Sehr geehrte Damen & Herren,\nanbei der Beleg ohne Geld Eingang bei mir bzw. genauer gesagt zuerst war Geld eingegangen was wieder zurücküberwiesen wurde weil der Vertrag eigentlich nicht zu Ende war\naber nun habe ich einen neue Vertragsnr. und deshalb bitte um Überweisung meines Guthabens.\nHering\nEduard Thies\n+49(0)7938 52503\nsandra55@example.com\n",
-    "labels": [
-      {
-        "start": 328,
-        "end": 348,
-        "label": "EMAIL"
-      },
-      {
-        "start": 311,
-        "end": 327,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 298,
-        "end": 304,
-        "label": "VORNAME"
-      },
-      {
-        "start": 291,
-        "end": 297,
-        "label": "FIRMA"
-      },
-      {
-        "start": 305,
-        "end": 310,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "46.txt",
-    "text": "Stromvertrag \nLieferstelle:\nHesseallee 6, 01664 Mittweida\nStromzähler 1EBZ0100763912\nSehr geehrte Damen und Herren,\nich bin zum 01.03.2023 in die Lieferstelle eingezogen. \nBitte hinterlegen Sie als Grundversorger den Einzug bei sich.\nVielen Dank.\nMit freundlichen Grüßen\nJoachim Trupp\n",
-    "labels": [
-      {
-        "start": 70,
-        "end": 84,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 128,
-        "end": 138,
-        "label": "DATUM"
-      },
-      {
-        "start": 28,
-        "end": 38,
-        "label": "STRASSE"
-      },
-      {
-        "start": 48,
-        "end": 57,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 271,
-        "end": 278,
-        "label": "VORNAME"
-      },
-      {
-        "start": 279,
-        "end": 284,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 42,
-        "end": 47,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 39,
-        "end": 40,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 44,
-        "end": 45,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 45,
-        "end": 46,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 79,
-        "end": 80,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "47.txt",
-    "text": "Guten Tag,\n \nvor kurzem habe ich mich entschieden zu E.ON Strom zu wechseln.\n \nLeider gibt es nun bei der Regestrierung unter Punkt 2 Probleme (siehe \nFotos im Anhang).\n \nWas kann ich jetzt noch machen?\n \nMit freundlichen Grüßen\nErich Hermighausen\n \nAlbina-Bruder-Allee 7\n26209 Hatten\n﻿\n",
-    "labels": [
-      {
-        "start": 250,
-        "end": 269,
-        "label": "STRASSE"
-      },
-      {
-        "start": 235,
-        "end": 247,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 278,
-        "end": 284,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 229,
-        "end": 234,
-        "label": "VORNAME"
-      },
-      {
-        "start": 272,
-        "end": 277,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 270,
-        "end": 271,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "48.txt",
-    "text": "Sehr geehrte Damen und Herren,\nwie mit einer Ihrer Mitarbeiterinnen besprochen, wollte sich diese\nbezüglich meiner Kündigung gestern telefonisch bei mir melden. Leider war\ndies nicht der Fall.\nIch würde Sie höflichst bitten meinen Vertrag zu kündigen! Ich bitte um\nkurze Rückmeldung.\nMit sonnigen Grüßen\nDieter Ortmann\n",
-    "labels": [
-      {
-        "start": 311,
-        "end": 318,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 304,
-        "end": 310,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "49.txt",
-    "text": "Sehr geehrte Damen und Herren,\n \nzusätzlich zu dem Besuch des Notdienstes am 06.07 sowie meinen Anruf in dieser Woche, möchte ich Ihnen mitteilen, dass Mein Stromzähler aktuell nichts anzeigt. Ein Bild dazu anbei.\n \nFür meinen gewisse Zeitraum im Juli war zwischenzeitlich (Monatsmitte) etwas sichtbar.\n \nIch bitte um Behebung des Problems.\n \nMit freundlichen Grüße\nRena Atzler\nNadia-Wende-Gasse 578\n46950 Viersen\n \n70506/8384700\n",
-    "labels": [
-      {
-        "start": 378,
-        "end": 395,
-        "label": "STRASSE"
-      },
-      {
-        "start": 416,
-        "end": 429,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 406,
-        "end": 413,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 371,
-        "end": 377,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 77,
-        "end": 82,
-        "label": "DATUM"
-      },
-      {
-        "start": 400,
-        "end": 405,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 366,
-        "end": 370,
-        "label": "VORNAME"
-      },
-      {
-        "start": 396,
-        "end": 399,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "50.txt",
-    "text": "Guten Tag,\nVertragskonto : 401300594\nZählernummer : 1HLY0205770365\nAnbei Kontoauszug\nMit freundlichen Grüßen\nCemil Bolnbach\nDiese Nachricht wurde von meinem Android Mobiltelefon mit GMX Mail gesendet.\n",
-    "labels": [
-      {
-        "start": 124,
-        "end": 200,
-        "label": "GESENDET_MIT"
-      },
-      {
-        "start": 52,
-        "end": 66,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 27,
-        "end": 36,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 115,
-        "end": 123,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 109,
-        "end": 114,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "53.txt",
-    "text": "Sehr geehrte Damen und Herren,\n \nfür ein altes Konto hatte ich die Mailanschrift hans73@example.com\n<mailto:hans73@example.com> gewählt. Da wir umgezogen sind und das Konto\nnicht mehr aktiv ist, habe ich diesem alten Konto eine neue Mailadresse\ngegeben, um die vorgenannte Adresse für mein aktuelles Konto:\n \nE.ON KonstantStrom\nIn Belieferung\nJasmin Meyer\nHans-Jörg-Kade-Platz 47, 74403 Luckenwalde\nVertragskonto:\n407714264\nZählernummer:\n1EFR22650578465\n \nbenutzen möchte. Leider war hier eine Umstellung nicht möglich. Ich bitte um\nPrüfung und Mitteilung ob dies nicht möglich ist, denn die zur Zeit gültige\nAdresse: anastasiarogner@example.net <mailto:anastasiarogner@example.net> nutze\nich normalerweise nicht und lese daher auch keine eingehenden Mails.\n \nBei Erstellung des neuen Kontos nach Umzug wurde mir mitgeteilt, dass ich\nhans73@example.com <mailto:hans73@example.com> nicht ein zweites Mal\nverwenden kann, was verständlich ist. Aber dieses Konto ist jetzt aktuell\nund eine Umstellung wäre daher sehr hilfreich.\n \nFür eine kurze Rückantwort an hans73@example.com <mailto:hans73@example.com>\nbedanke ich mich vorab!\n \nMit freundlichen Grüßen\n \nJasmin Meyer B.A.\n",
-    "labels": [
-      {
-        "start": 356,
-        "end": 376,
-        "label": "STRASSE"
-      },
-      {
-        "start": 81,
-        "end": 99,
-        "label": "EMAIL"
-      },
-      {
-        "start": 108,
-        "end": 126,
-        "label": "EMAIL"
-      },
-      {
-        "start": 834,
-        "end": 852,
-        "label": "EMAIL"
-      },
-      {
-        "start": 861,
-        "end": 879,
-        "label": "EMAIL"
-      },
-      {
-        "start": 1056,
-        "end": 1074,
-        "label": "EMAIL"
-      },
-      {
-        "start": 1083,
-        "end": 1101,
-        "label": "EMAIL"
-      },
-      {
-        "start": 438,
-        "end": 453,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 387,
-        "end": 398,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 414,
-        "end": 423,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 343,
-        "end": 349,
-        "label": "VORNAME"
-      },
-      {
-        "start": 1155,
-        "end": 1161,
-        "label": "VORNAME"
-      },
-      {
-        "start": 350,
-        "end": 355,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 1162,
-        "end": 1167,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 381,
-        "end": 386,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 377,
-        "end": 379,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "54.txt",
-    "text": "Sehr geehrte Damen und Herren,\n \nwir sind umgezogen:\n \nGrundstücksges. Mudering 49\nNeue Adresse:\nRuststraße 057, 79298 Duderstadt\n \n(vorher Jessika-Putz-Straße 1, 79298 Duderstadt)\n \nAlle anderen Daten bleiben bestehen (Bankverbindung zB)\n \nMit freundlichen Grüßen\n \nHelge Albers\nBuchhaltung\n \nGrundstücksges. Mudering 49\n",
-    "labels": [
-      {
-        "start": 55,
-        "end": 82,
-        "label": "FIRMA"
-      },
-      {
-        "start": 294,
-        "end": 321,
-        "label": "FIRMA"
-      },
-      {
-        "start": 140,
-        "end": 159,
-        "label": "STRASSE"
-      },
-      {
-        "start": 97,
-        "end": 107,
-        "label": "STRASSE"
-      },
-      {
-        "start": 119,
-        "end": 129,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 169,
-        "end": 179,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 119,
-        "end": 129,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 169,
-        "end": 179,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 273,
-        "end": 279,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 267,
-        "end": 272,
-        "label": "VORNAME"
-      },
-      {
-        "start": 113,
-        "end": 118,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 163,
-        "end": 168,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 113,
-        "end": 118,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 163,
-        "end": 168,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 109,
-        "end": 111,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 160,
-        "end": 161,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "59.txt",
-    "text": "Sehr geehrte Damen und Herren,\num unsere Abrechnung erstellen zu können benötigen wir DRINGEND die Zischenabrechnung Gas zum 31.12.2022 inkl. Gas Soforthilfe etc.\nDer Zählerstand zum 31.12.2023 war 24156, Vertragsnummer 400798707, Isabelle-Hövel-Platz 143 in 97904 Schongau\nBitte senden Sie uns diese Zwischenabrechnung schnellstmöglich zu, gerne auch vorab über E-Mail.\nViele Grüße,\nCarlo Becker\nFaust UG - Carstenstr. 7 - 97904 Schongau\nTelefon (03092) 193044  - Mobil +49(0)5875526756\nbarbarakruschwitz@example.com\nRegistergericht: Schongau HRB 2095\nGeschäftsführer: Adriana Lange-Ring, Carlo Becker\n",
-    "labels": [
-      {
-        "start": 488,
-        "end": 517,
-        "label": "EMAIL"
-      },
-      {
-        "start": 471,
-        "end": 487,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 447,
-        "end": 461,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 408,
-        "end": 419,
-        "label": "STRASSE"
-      },
-      {
-        "start": 397,
-        "end": 405,
-        "label": "FIRMA"
-      },
-      {
-        "start": 220,
-        "end": 229,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 265,
-        "end": 273,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 430,
-        "end": 438,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 535,
-        "end": 543,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 390,
-        "end": 396,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 596,
-        "end": 602,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 384,
-        "end": 389,
-        "label": "VORNAME"
-      },
-      {
-        "start": 590,
-        "end": 595,
-        "label": "VORNAME"
-      },
-      {
-        "start": 259,
-        "end": 264,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 424,
-        "end": 429,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 198,
-        "end": 203,
-        "label": "ZÄHLERSTAND"
-      },
-      {
-        "start": 223,
-        "end": 224,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 226,
-        "end": 227,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 228,
-        "end": 229,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 260,
-        "end": 261,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 420,
-        "end": 421,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 425,
-        "end": 426,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 479,
-        "end": 480,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 484,
-        "end": 485,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "60.txt",
-    "text": "Sehr geehrtes E.ON Team,\nich habe heute ein Schreiben aus Ihrem Hause erhalten, in dem Sie auf\nRabattmöglichkeiten hinweisen, wenn man sowohl Gas- als auch\nStromliefervertrag bei E.ON hat.\nDas würde mich interessieren.\nAllerdings habe ich eine Photovoltaikanlage auf dem Dach uns speise\nStrom ins öffentliche Netz.\nWäre E.ON dann auch mein Ansprechpartner für die Strom-Vergütung?\nFreundliche Grüße,\nFrederic Bauer\nEugenia-Seifert-Weg 530\n50879 Rothenburg ob der Tauber\n",
-    "labels": [
-      {
-        "start": 445,
-        "end": 469,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 415,
-        "end": 434,
-        "label": "STRASSE"
-      },
-      {
-        "start": 400,
-        "end": 408,
-        "label": "VORNAME"
-      },
-      {
-        "start": 409,
-        "end": 414,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 439,
-        "end": 444,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 435,
-        "end": 438,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "62.txt",
-    "text": "Vertragsnummer: 403755518\nCanan Schenk\nVerbraucherstelle: Hans-Henning-Wilmsen-Weg 958, 74815 Osterburg\nZähler: 92739304\nSehr geehrte Damen und Herren,\nIch kündige den Vertrag wegen dem Umzug zum 30.11.23\nUm eine schriftliche Bestätigung wird gebeten.\nNeue Adresse:\nDippelgasse 83\n74815 Osterburg\nViele Grüße\nCanan Schenk\n",
-    "labels": [
-      {
-        "start": 58,
-        "end": 82,
-        "label": "STRASSE"
-      },
-      {
-        "start": 266,
-        "end": 277,
-        "label": "STRASSE"
-      },
-      {
-        "start": 94,
-        "end": 103,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 287,
-        "end": 296,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 16,
-        "end": 25,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 112,
-        "end": 120,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 32,
-        "end": 38,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 315,
-        "end": 321,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 26,
-        "end": 31,
-        "label": "VORNAME"
-      },
-      {
-        "start": 309,
-        "end": 314,
-        "label": "VORNAME"
-      },
-      {
-        "start": 88,
-        "end": 93,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 281,
-        "end": 286,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 83,
-        "end": 86,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 278,
-        "end": 280,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "63.txt",
-    "text": "Sehr geehrte Damen und Herren,\nich würde gerne meine Verträge mit folgenden Vertragsnummern bündeln.\n1. 405292004\n2. 404110580\nMehrere Versuche auf der entsprechenden Internetseite sind leider schief\ngelaufen.\nMit freundlichen Grüßen\nCarola Renner\nMisicherstr. 193\n07882 Belzig\nliebeltbirger@example.org\nTel. 01234 55632\n",
-    "labels": [
-      {
-        "start": 278,
-        "end": 303,
-        "label": "EMAIL"
-      },
-      {
-        "start": 248,
-        "end": 260,
-        "label": "STRASSE"
-      },
-      {
-        "start": 309,
-        "end": 320,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 104,
-        "end": 113,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 117,
-        "end": 126,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 234,
-        "end": 240,
-        "label": "VORNAME"
-      },
-      {
-        "start": 241,
-        "end": 247,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 271,
-        "end": 277,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 266,
-        "end": 270,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 261,
-        "end": 264,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "64.txt",
-    "text": "Corina Nerger-Koch Düren, den 26.8.2023\nLiesel-Mude-Platz 380\n  An die\nKöhler\nBritta-Wirth-Allee 359\n22085 Ebern\n*Kunden-Nr.: 204211951*\n*Verbrauchsstelle: Liesel-Mude-Platz 380, 32884 Düren*\n*Zähler: 970220-592573*\nSehr geehrte Damen und Herren,\nhiermit *widerrufe* ich den von mir geschlossenen Vertrag über die \nStromlieferung von Matthäi Komfort Extra Öko.\nWiderruf gemäß Formular anbei.\n  Corina Nerger-Koch\n",
-    "labels": [
-      {
-        "start": 334,
-        "end": 359,
-        "label": "FIRMA"
-      },
-      {
-        "start": 40,
-        "end": 57,
-        "label": "STRASSE"
-      },
-      {
-        "start": 156,
-        "end": 173,
-        "label": "STRASSE"
-      },
-      {
-        "start": 201,
-        "end": 214,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 7,
-        "end": 18,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 401,
-        "end": 412,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 126,
-        "end": 135,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 0,
-        "end": 6,
-        "label": "VORNAME"
-      },
-      {
-        "start": 394,
-        "end": 400,
-        "label": "VORNAME"
-      },
-      {
-        "start": 179,
-        "end": 184,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 19,
-        "end": 24,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 185,
-        "end": 190,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 58,
-        "end": 61,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 174,
-        "end": 177,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "74.txt",
-    "text": "Sehr geehrte Damen und Herren,\nim Anhang finden Sie einen Screenshot mit den Umsatzdetails zu meiner getätigten Zahlung am 21.8.2023. Meine fällige Abschlagszahlung vom 18. August 2023 wird immernoch als offen dargestellt und wurde inzwischen von Ihnen gemahnt.\nMeine Vertragsnummer lautet 406 784 251\nDie Zählernummer lautet 861546-572484\nMit freundlichen Grüßen,\nIsabell Binner\n",
-    "labels": [
-      {
-        "start": 326,
-        "end": 339,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 290,
-        "end": 301,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 365,
-        "end": 372,
-        "label": "VORNAME"
-      },
-      {
-        "start": 373,
-        "end": 379,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "76.txt",
-    "text": "Guten Tag\nWie telefonisch besprochen, möchte ich den Betrag für den Bautrockner zusätzlich\nZum Abschlag extra bezahlen.\nIm Anhang die Kostenabrechnung.\nMir freundlichen Grüßen\nLinda Dörschner\nBirger-Rust-Gasse 90\n15874 Cloppenburg\nTel. 02851 33116\nIch werde den Betrag von 115,64 Euro auf mein Vertragskonto überweisen.\n",
-    "labels": [
-      {
-        "start": 192,
-        "end": 209,
-        "label": "STRASSE"
-      },
-      {
-        "start": 236,
-        "end": 247,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 273,
-        "end": 284,
-        "label": "ZAHLUNG"
-      },
-      {
-        "start": 219,
-        "end": 230,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 182,
-        "end": 191,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 176,
-        "end": 181,
-        "label": "VORNAME"
-      },
-      {
-        "start": 213,
-        "end": 218,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 210,
-        "end": 212,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "77.txt",
-    "text": "Guten Tag,\nLeider habe ich meinen Abschlag an die IBAN meines alten Vertragskontos\nüberwiesen und bitte nun, dass der gezahlte Betrag auf mein neues\nVertragskonto umgebucht wird.\nGezahlt wurde am 21.07.2023 ein Betrag in Höhe von 179,24€ an die IBAN DE33 4516 6479 4013 4466 01.\nMein alte Vertragsnummer lautet 232084937408 und meine neue Vertragsnummer ist die 408061266.\nIch bedanke mich recht herzlich.\nMit freundlichen Grüßen Milka Eberhardt-Weller.\n",
-    "labels": [
-      {
-        "start": 250,
-        "end": 277,
-        "label": "IBAN"
-      },
-      {
-        "start": 436,
-        "end": 452,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 196,
-        "end": 206,
-        "label": "DATUM"
-      },
-      {
-        "start": 362,
-        "end": 372,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 362,
-        "end": 371,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 230,
-        "end": 237,
-        "label": "ZAHLUNG"
-      },
-      {
-        "start": 430,
-        "end": 435,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "79.txt",
-    "text": "Sehr geehrte Damen und Herren, \nhiermit sende ich Ihnen, den Kontoauszug für Juni 2023. \nMit freundlichen Grüßen \nJanin Fechner MBA.\n",
-    "labels": [
-      {
-        "start": 120,
-        "end": 127,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 114,
-        "end": 119,
-        "label": "VORNAME"
-      },
-      {
-        "start": 128,
-        "end": 131,
-        "label": "TITEL"
-      }
-    ]
-  },
-  {
-    "file": "83.txt",
-    "text": "Guten Abend, \nleider kann ich mich auf ihrem Portal nicht registrieren, da der oben genannte Vertrag mit falscher E-Mail versehen wurde. \nBitte auf die richtige E-Mail-Adresse korrigieren. \nDie lautet: aldoflantz@example.net\nMit freundlichen Grüßen \nGülsen Wiek\n+49(0)7997 99657\nVon meinem iPad gesendet\n",
-    "labels": [
-      {
-        "start": 279,
-        "end": 303,
-        "label": "GESENDET_MIT"
-      },
-      {
-        "start": 202,
-        "end": 224,
-        "label": "EMAIL"
-      },
-      {
-        "start": 262,
-        "end": 278,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 250,
-        "end": 256,
-        "label": "VORNAME"
-      },
-      {
-        "start": 257,
-        "end": 261,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "85.txt",
-    "text": "Sehr geehrte Damen und Herren,\nimAnhang befinden sich 2 Bilder, die zeigen, dass die Ratenzahlung von August zweimal abgebucht wurde. Bitte überweisen Sie mir den Betrag von 90,00€ zurück auf mein Konto.\nMit freundlichen Grüßen\nHans-Bernd Hertrampf\nDiese Nachricht wurde von meinem Android Mobiltelefon mit [WEB.DE][1] Mail gesendet.\n[1]: http://WEB.DE\n",
-    "labels": [
-      {
-        "start": 249,
-        "end": 352,
-        "label": "GESENDET_MIT"
-      },
-      {
-        "start": 228,
-        "end": 238,
-        "label": "VORNAME"
-      },
-      {
-        "start": 239,
-        "end": 248,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 174,
-        "end": 180,
-        "label": "ZAHLUNG"
-      }
-    ]
-  },
-  {
-    "file": "86.txt",
-    "text": "Sehr geehrte Damen und Herren,\nhiermit wird der folgende Vertrag fristgerecht widerrufen.\nLieferstelle:\nPriska Löchel\nIrmtraut-Reuter-Ring 392\n27090 Zschopau\nZählernummer: 1DZG0060736543\nVertragspartner:\nPriska Löchel\nIrmtraut-Reuter-Ring 392\n27090 Zschopau\nBitte bestätigen Sie diesen Widerruf.\n",
-    "labels": [
-      {
-        "start": 118,
-        "end": 138,
-        "label": "STRASSE"
-      },
-      {
-        "start": 218,
-        "end": 238,
-        "label": "STRASSE"
-      },
-      {
-        "start": 172,
-        "end": 186,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 149,
-        "end": 157,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 249,
-        "end": 257,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 104,
-        "end": 110,
-        "label": "VORNAME"
-      },
-      {
-        "start": 204,
-        "end": 210,
-        "label": "VORNAME"
-      },
-      {
-        "start": 111,
-        "end": 117,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 211,
-        "end": 217,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 143,
-        "end": 148,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 243,
-        "end": 248,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 139,
-        "end": 142,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 239,
-        "end": 242,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "87.txt",
-    "text": "Guten Tag, ich beziehe strom von Ihnen und wohl auch von der EnBW. Mein Vermieter hat ohne Absprache mich bei der EnBW angemeldet. Ich würde gerne bei Ihnen bleiben und bitte Sie sich mit der EnBW in Verbindung zu setzen.\nMit freundlichen Grüßen Leonid Walter-Koch\n+49(0) 868385636\n",
-    "labels": [
-      {
-        "start": 265,
-        "end": 281,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 253,
-        "end": 264,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 246,
-        "end": 252,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "88.txt",
-    "text": "Sehr geehrte Damen und Herren,\nhiermit widerrufe ich den von mir abgeschlossenen Stromvertrag mit E.ON Energie.\n1.) Angaben zum Vertragspartner\nOtto Hartmann\nGeb.-Datum: 22.05.1984\nrusterdal@example.com\n2.) Angaben zur Verbrauchsstelle\nSchacht Schottin GmbH & Co. KG Auftragsnummer: 7564839\nTarifname: E.ON ÖkoStrom Extra\nDatum der Auftragserstellung: 21.07.2023\nDatum der Übermittlung an E.ON Energie: 21.07.2023\nZählernummer: 30253\nAdresse: Sölzergasse 2, 90754 Wunsiedel\nBitte bestätigen Sie mir den Widerruf mit Antwort auf diese E-Mail.\nMit freundlichen Grüßen\nOtto Hartmann\n",
-    "labels": [
-      {
-        "start": 236,
-        "end": 266,
-        "label": "FIRMA"
-      },
-      {
-        "start": 181,
-        "end": 202,
-        "label": "EMAIL"
-      },
-      {
-        "start": 170,
-        "end": 180,
-        "label": "DATUM"
-      },
-      {
-        "start": 352,
-        "end": 362,
-        "label": "DATUM"
-      },
-      {
-        "start": 403,
-        "end": 413,
-        "label": "DATUM"
-      },
-      {
-        "start": 352,
-        "end": 362,
-        "label": "DATUM"
-      },
-      {
-        "start": 403,
-        "end": 413,
-        "label": "DATUM"
-      },
-      {
-        "start": 443,
-        "end": 454,
-        "label": "STRASSE"
-      },
-      {
-        "start": 464,
-        "end": 473,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 149,
-        "end": 157,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 571,
-        "end": 579,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 283,
-        "end": 290,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 458,
-        "end": 463,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 428,
-        "end": 433,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 144,
-        "end": 148,
-        "label": "VORNAME"
-      },
-      {
-        "start": 566,
-        "end": 570,
-        "label": "VORNAME"
-      },
-      {
-        "start": 170,
-        "end": 171,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 171,
-        "end": 172,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 203,
-        "end": 204,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 352,
-        "end": 353,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 358,
-        "end": 359,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 360,
-        "end": 361,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 403,
-        "end": 404,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 409,
-        "end": 410,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 411,
-        "end": 412,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 430,
-        "end": 431,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 455,
-        "end": 456,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "89.txt",
-    "text": "Rechnungüberprüfung vom 21.7.2023\nIm Anhang finden sie den Überweisungsbeleg\nDanke Vincenzo Rosemann\n",
-    "labels": [
-      {
-        "start": 24,
-        "end": 33,
-        "label": "DATUM"
-      },
-      {
-        "start": 83,
-        "end": 91,
-        "label": "VORNAME"
-      },
-      {
-        "start": 92,
-        "end": 100,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "90.txt",
-    "text": "Bitte senden Sie mir den Rechnungsnachweis seit Vertragsbeginn mit den\nentsprechenden Zählerstände.\nFreundliche Grüße\nKlaus-Peter Hiller\n",
-    "labels": [
-      {
-        "start": 118,
-        "end": 129,
-        "label": "VORNAME"
-      },
-      {
-        "start": 130,
-        "end": 136,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "93.txt",
-    "text": "Sehr geehrte Damen und Herren!\nWie ich Ihnen bereits telefonisch mitgeteilt habe, kann ich meinen \nZählerstand nicht ablesen, weil dieser gar nicht angezeigt wird. Eine \nBetätigung der Infotaste hat auch keinerlei Reaktion des Zählers \nhervorgerufen. Bitte teilen Sie mir mit, wie es weiter geht. Ein Foto mit \nZählernummer erhalten Sie im Anhang. MfG Hella Weimer-Bolander\n﻿\n",
-    "labels": [
-      {
-        "start": 358,
-        "end": 373,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 352,
-        "end": 357,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "94.txt",
-    "text": "Sehr geehrte Damen und Herren,\nich bitte Sie für obiges Vertragskonto den monatlichen Abschlag auf 15,00 € zu reduzieren.\nMeine Eltern sind ausgezogen. Das Haus steht leer.\nFreundliche Grüße\nZbigniew Löwer\nZbigniew Löwer\nScheelstraße 7\n37940 Hohenmölsen\n+49 (0) 1498 905605\n",
-    "labels": [
-      {
-        "start": 254,
-        "end": 273,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 221,
-        "end": 233,
-        "label": "STRASSE"
-      },
-      {
-        "start": 242,
-        "end": 253,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 191,
-        "end": 199,
-        "label": "VORNAME"
-      },
-      {
-        "start": 206,
-        "end": 214,
-        "label": "VORNAME"
-      },
-      {
-        "start": 99,
-        "end": 106,
-        "label": "ZAHLUNG"
-      },
-      {
-        "start": 200,
-        "end": 205,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 215,
-        "end": 220,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 236,
-        "end": 241,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 234,
-        "end": 235,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 237,
-        "end": 238,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "98.txt",
-    "text": "Sehr geehrte Damen und Herren,\nanbei die Kündigungsbestätigung meines bisherigen Versorgers.\n \nMit freundlichem Gruß\n \nJosef Drewes\n",
-    "labels": [
-      {
-        "start": 125,
-        "end": 131,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 119,
-        "end": 124,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "101.txt",
-    "text": "Sehr geehrte Damen und Herren,\nwie bereits besprochen wurde heute bei uns ein defekter Stromzähler durch\ndie Firma Lichtstrom im Auftrag von Avacon ausgetauscht.\nEin Einbau- bzw. Ausbaubeleg wurde uns nicht ausgehändigt es befindet sich\nlediglich ein Beleg am Gerät siehe Anhang.\nFür Rückfragen stehe ich Ihnen gern zur Verfügung.\nMit freundlichen Grüßen\nPhillip Zorbach\n",
-    "labels": [
-      {
-        "start": 115,
-        "end": 125,
-        "label": "FIRMA"
-      },
-      {
-        "start": 355,
-        "end": 362,
-        "label": "VORNAME"
-      },
-      {
-        "start": 363,
-        "end": 370,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 141,
-        "end": 147,
-        "label": "FIRMA"
-      }
-    ]
-  },
-  {
-    "file": "103.txt",
-    "text": "Hallo,\nAnbei meine Vertragsbestätigung.\nMit freundlichen Grüßen\nDr. Ewald Kramer\n",
-    "labels": [
-      {
-        "start": 74,
-        "end": 80,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 68,
-        "end": 73,
-        "label": "VORNAME"
-      },
-      {
-        "start": 64,
-        "end": 67,
-        "label": "TITEL"
-      }
-    ]
-  },
-  {
-    "file": "104.txt",
-    "text": "Sehr geehrte Damen und Herren \nHiermit bestätige ich den Eingang Ihres Schreibens.  Ich kann Ihnen eine Ratenzahlung in Höhe von 30€ monatlich zum 20ten jedes Monats anbieten.  Mehr ist mir momentan leider nicht möglich,  sobald sich etwas an meiner finanziellen Situation ändert , werde ich natürlich die restrückstände begleichen.  \nBitte um Rückmeldung \nMit freundlichen Grüßen \nMarianne Gude \nGesendet von AOL auf Android\n",
-    "labels": [
-      {
-        "start": 397,
-        "end": 425,
-        "label": "GESENDET_MIT"
-      },
-      {
-        "start": 382,
-        "end": 390,
-        "label": "VORNAME"
-      },
-      {
-        "start": 391,
-        "end": 395,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 129,
-        "end": 131,
-        "label": "ZAHLUNG"
-      }
-    ]
-  },
-  {
-    "file": "107.txt",
-    "text": "Sehr geehrte Damen und Herren,\nich möchte Ihnen auf diesem Weg schon jetzt ein Foto eines Schreiben senden, welches Ihnen ab morgen noch über den Postweg zugestellt wird. Bezüglich der Schlussrechnung des Vertrags 242525310667 bitte ich um dringende Beachtung.\nMit freundlichen Grüßen\nDorothe Henck\n",
-    "labels": [
-      {
-        "start": 214,
-        "end": 226,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 285,
-        "end": 292,
-        "label": "VORNAME"
-      },
-      {
-        "start": 293,
-        "end": 298,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "110.txt",
-    "text": "Guten Tag, bei dem begleichen der offenen Rechnung vom 1.06-1.08 ist mir ein Fehler in der Rechnungsnummer unterlaufen. Meine Vertragsnummer lautet: 404686610Im Anhang liegt ein Kontoauszug vor, dass ich den Betrag von 282€ beglichen habe. Mit freundlichen Grüßen Heiderose Drubin\n",
-    "labels": [
-      {
-        "start": 55,
-        "end": 64,
-        "label": "DATUM"
-      },
-      {
-        "start": 264,
-        "end": 273,
-        "label": "VORNAME"
-      },
-      {
-        "start": 149,
-        "end": 158,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 274,
-        "end": 280,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 219,
-        "end": 222,
-        "label": "ZAHLUNG"
-      }
-    ]
-  },
-  {
-    "file": "111.txt",
-    "text": "Sehr geehrte Damen und Herren,\nich habe eine Frage und zwar hab ich schon öfter angerufen ..Ich kann mich nicht registrieren zeigt immer immer ein Fehler...was kann ich machen das ich mich Registrieren kann und die App nutzen kann? Habe mal ein Bild hinzugefügt das zeigt der mir immer an ..\nMit freundlichen Grüßen\nBooken\nDiese Nachricht wurde von meinem Android Mobiltelefon mit GMX Mail gesendet.\n",
-    "labels": [
-      {
-        "start": 323,
-        "end": 399,
-        "label": "GESENDET_MIT"
-      },
-      {
-        "start": 316,
-        "end": 322,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "113.txt",
-    "text": "Hier wie gewünscht in der Anlage die Rechnung der Trocknungsfirma aus der die benötigten Daten ersichtlich sind\nMit netten Grüßen \nWagner\n",
-    "labels": [
-      {
-        "start": 131,
-        "end": 137,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "114.txt",
-    "text": "Kunde: \t\t\tWernecke GmbH & Co. OHG und Niemeier Carsten Stiftung & Co. KG\nVerbrauchsstelle:\tKlappstr. 33\nZähler:\t\t\tDE71117317620819513570\nVertragsnummer: 408591713\nSehr geehrte Damen und Herren,\nwir bedanken uns für Ihre Abschlagsanpassung gemäß Ihres Schreibens vom 29.07.2023, \nauch wenn Ihr Schreiben auf unsere eingelegten Widersprüche nicht eingegangen ist.\nDer guten Ordnung halber verweisen wir erneut zu Ihrer im Dezember 2022 angekündigten Preiserhöhung auf unseren Widerspruch vom 6. Januar 2023, den wir nach wie vor aus dargelegtem Grund aufrecht erhalten. \nMit freundlichen Grüßen\nDr. Abbas Fechner\n- Hausverwaltung -\n",
-    "labels": [
-      {
-        "start": 10,
-        "end": 72,
-        "label": "FIRMA"
-      },
-      {
-        "start": 114,
-        "end": 136,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 490,
-        "end": 504,
-        "label": "DATUM"
-      },
-      {
-        "start": 420,
-        "end": 433,
-        "label": "DATUM"
-      },
-      {
-        "start": 266,
-        "end": 276,
-        "label": "DATUM"
-      },
-      {
-        "start": 91,
-        "end": 100,
-        "label": "STRASSE"
-      },
-      {
-        "start": 153,
-        "end": 162,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 603,
-        "end": 610,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 597,
-        "end": 602,
-        "label": "VORNAME"
-      },
-      {
-        "start": 593,
-        "end": 596,
-        "label": "TITEL"
-      },
-      {
-        "start": 101,
-        "end": 103,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "117.txt",
-    "text": "Guten Tag.  Wir möchten unsere Abschlagzahlungen auf den 2 jeden Monats verlagern für Erdgas Vertrag 402071749 und Strom Vertrag 402071749. Bitte aktualisieren/abändern bitte . W.Weißbrot\nGesendet von Fliegner Mail auf Andro. id\n",
-    "labels": [
-      {
-        "start": 188,
-        "end": 228,
-        "label": "GESENDET_MIT"
-      },
-      {
-        "start": 101,
-        "end": 110,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 129,
-        "end": 138,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 101,
-        "end": 110,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 129,
-        "end": 138,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 179,
-        "end": 187,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 177,
-        "end": 179,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "118.txt",
-    "text": "Sehr geehrte Damen und Herren,\nIch möchte Sie hiermit bitten, keine Anrufe / Werbung mehr zu tätigen an und für folgende Vertragsnehmerin:\nHerr Rupert Döhn\nVitali-Zirme-Weg 21\n52391 Bruchsal\nVertragskonto: 405576049.\nVielen Dank im Voraus,\nYvonne Hölzenbecher (Tochter)\nDiese Nachricht wurde von meinem Android Mobiltelefon mit GMX Mail gesendet.\n",
-    "labels": [
-      {
-        "start": 270,
-        "end": 346,
-        "label": "GESENDET_MIT"
-      },
-      {
-        "start": 156,
-        "end": 172,
-        "label": "STRASSE"
-      },
-      {
-        "start": 247,
-        "end": 259,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 206,
-        "end": 215,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 182,
-        "end": 190,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 240,
-        "end": 246,
-        "label": "VORNAME"
-      },
-      {
-        "start": 144,
-        "end": 150,
-        "label": "VORNAME"
-      },
-      {
-        "start": 176,
-        "end": 181,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 151,
-        "end": 155,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 173,
-        "end": 175,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "119.txt",
-    "text": "Sehr geehrte Damen und Herren,\nhiermit bitte ich sie mir die schriftlich die Daten mitzuteilen, welche \nsie nach DSGVO § 16 über mich bei Ihren Unternehmen gespeichert haben. \nDanke.\nMfG Arndt Wernecke\n",
-    "labels": [
-      {
-        "start": 193,
-        "end": 201,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 187,
-        "end": 192,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "122.txt",
-    "text": "Sehr geehrte Damen und Herren,\ndie Betreuung ist nun unbefristet, ich bitte um Aktualisierung.\n \nMit freundlichen Grüßen\nFrau Magdalene Knappe\n \n \n \nMob: +49(0)5333316920\nFax: (05535) 682231\nWibke-Albers-Straße 567\n69604 Borken\n \nDiese E-Mail enthält vertrauliche und/oder rechtlich geschützte\nInformationen. Wenn Sie nicht der richtige Adressat sind oder diese E-Mail\nirrtümlich erhalten haben, informieren Sie bitte sofort den Absender und\nvernichten Sie diese Mail. Das unerlaubte Kopieren sowie die unbefugte\nWeitergabe dieser Mail ist nicht gestattet.\n",
-    "labels": [
-      {
-        "start": 191,
-        "end": 210,
-        "label": "STRASSE"
-      },
-      {
-        "start": 154,
-        "end": 170,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 176,
-        "end": 190,
-        "label": "FAX"
-      },
-      {
-        "start": 126,
-        "end": 135,
-        "label": "VORNAME"
-      },
-      {
-        "start": 136,
-        "end": 142,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 221,
-        "end": 227,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 215,
-        "end": 220,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 211,
-        "end": 214,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "123.txt",
-    "text": "Sehr geehrte Damen und Herren,\nwie angefordert, sende ich Ihnen die fehlenden Daten bzw. Unterlagen zu.\nVertragsnummer: 406 308 419\nAngabe zum Zeitraum, in dem der Mehrverbrauch angefallen ist: 10.07.2023\nbis 24.07.2023\nAngabe über die Höhe des Mehrverbrauchs in Kilowattstunden: 208\nKilowattstunden\nKopie des Trocknungsprotokolls: liegt bei\nBei weiteren Fragen stehe ich Ihnen gerne zur Verfügung.\nMit freundlichen Grüßen,\nAnna-Luise Röhrdanz\n",
-    "labels": [
-      {
-        "start": 120,
-        "end": 131,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 194,
-        "end": 204,
-        "label": "DATUM"
-      },
-      {
-        "start": 209,
-        "end": 219,
-        "label": "DATUM"
-      },
-      {
-        "start": 424,
-        "end": 434,
-        "label": "VORNAME"
-      },
-      {
-        "start": 435,
-        "end": 443,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "125.txt",
-    "text": "Sehr geehrte Damen und Herren, \nLeider wurden wir von einem Unwetter getroffen, weshalb unser Keller vollgelaufen ist.\nDeshalb hatten wir für 3 Wochen Trocknungsgeräte im Keller stehen.\nAnbei erhalten sie den Energieverbrauch/-nachweis der Geräte mit der Bitte, mir für diesen eine Zwischenrechnung zukommen zu lassen. Diese kann ich dann bei meiner Versicherung einreichen, welche die Kosten übernimmt. \nMein Vertragskonto lautet 405604519.\nAufgrund der Einfachheit halber, reicht mir die Rechnung per Email.\nSollten sie noch Fragen haben, können sie sich jederzeit gerne bei mir melden.\nMit freundlichen Grüßen \nWladimir Klotz\n",
-    "labels": [
-      {
-        "start": 431,
-        "end": 440,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 614,
-        "end": 622,
-        "label": "VORNAME"
-      },
-      {
-        "start": 623,
-        "end": 628,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "127.txt",
-    "text": "Sehr geehrte Damen und Herren!\nIch bitte Sie die Abschlussrechnungen für obige Vertragsnummer an folgende\nAdresse zu senden:\nAnna Sölzer\nC/o Dr Fadime Sölzer\n Schollplatz 550\n 40239 Düsseldorf\n Email: fschulz@example.org\n Mobil: 01704486372\n Mit freundlichen Grüßen\n Dr. Fadime Sölzer\n",
-    "labels": [
-      {
-        "start": 201,
-        "end": 220,
-        "label": "EMAIL"
-      },
-      {
-        "start": 229,
-        "end": 240,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 159,
-        "end": 170,
-        "label": "STRASSE"
-      },
-      {
-        "start": 182,
-        "end": 192,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 130,
-        "end": 136,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 151,
-        "end": 157,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 278,
-        "end": 284,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 144,
-        "end": 150,
-        "label": "VORNAME"
-      },
-      {
-        "start": 271,
-        "end": 277,
-        "label": "VORNAME"
-      },
-      {
-        "start": 130,
-        "end": 136,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 151,
-        "end": 157,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 278,
-        "end": 284,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 176,
-        "end": 181,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 125,
-        "end": 129,
-        "label": "VORNAME"
-      },
-      {
-        "start": 171,
-        "end": 174,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 107,
-        "end": 109,
-        "label": "TITEL"
-      },
-      {
-        "start": 141,
-        "end": 143,
-        "label": "TITEL"
-      },
-      {
-        "start": 267,
-        "end": 269,
-        "label": "TITEL"
-      }
-    ]
-  },
-  {
-    "file": "128.txt",
-    "text": "Am 13.07.2023 wurde ein neuer Gaszähler eingebaut. Anbei ein Foto vom aktuellen Zähler.\nDiese Nachricht wurde von meinem Android Mobiltelefon mit GMX Mail gesendet.\n",
-    "labels": [
-      {
-        "start": 88,
-        "end": 164,
-        "label": "GESENDET_MIT"
-      },
-      {
-        "start": 3,
-        "end": 13,
-        "label": "DATUM"
-      }
-    ]
-  },
-  {
-    "file": "130.txt",
-    "text": "Sehr geehrte Damen und Herren,\naufgrund eines Wasserschadens wurden bei uns Trocknungsgeräte der Firma Tröst aufgestellt (s. Anhang).\nGemäß dem Schreiben beantrage ich die entsprechende Nichtberücksichtigung bei der Neuberechnung der jährlichen Abschlusszahlung.\nBestätigen Sie dies bitte.\nMit freundlichen Grüßen\nHans-Günther Caspar\n(zz. tel. nur erreichbar über 0529/6785562)\n",
-    "labels": [
-      {
-        "start": 314,
-        "end": 326,
-        "label": "VORNAME"
-      },
-      {
-        "start": 364,
-        "end": 376,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 327,
-        "end": 333,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "131.txt",
-    "text": "Sehr geehrte Damen und Herren,\nanbei das gewünschte Ausbauprotokoll.\nmfg\nIng. Heinz-Jürgen Heser\nOtfried-Täsche-Platz 2/2\n49479 Ibbenbüren\n",
-    "labels": [
-      {
-        "start": 97,
-        "end": 116,
-        "label": "STRASSE"
-      },
-      {
-        "start": 78,
-        "end": 90,
-        "label": "VORNAME"
-      },
-      {
-        "start": 128,
-        "end": 138,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 91,
-        "end": 96,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 122,
-        "end": 127,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 118,
-        "end": 121,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "133.txt",
-    "text": "Hallo zusammen,\nich versuche, in das Kundenkonto dem Portal zu kommen.\nDa es bisher nicht funktioniert hat, habe ich mehrmals versucht, das\nPasswort zu ändern.\nMittlerweile weiß ich nicht mehr, welches Passwort gültih ist. Wie komm ich\nda raus ?\nMfG\nJacob Mangold\n",
-    "labels": [
-      {
-        "start": 256,
-        "end": 263,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 250,
-        "end": 255,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "135.txt",
-    "text": "Sehr geehrte Damen und Herren,\nanbei die angeforderten Daten zum Wechsel zu EON.\nVertragsnummer: 407 498 959\nÜbergabedatum: 30.04.2023\nVerkäufer: Hellwig GmbH & Co. KG\nMaria-Theresia-Hendriks-Platz 9\n14403 Dresden\nKäufer: Lothar Klapp\nViktoria-Spieß-Straße 16\n54597 Steffeln\nZählernummer 444003-5221259\nZählerstand 38335,6\nAblesedatum: 30.04.2023\nMit freundlichen Grüßen\nAchim Junck-Binner\n------------------------------------------------------------------------\nGesendet mit der Graf GmbH & Co. KG Mail App\n<https://kommunikationsdienste.t-online.de/redirects/email_app_android_sendmail_footer>\n",
-    "labels": [
-      {
-        "start": 463,
-        "end": 507,
-        "label": "GESENDET_MIT"
-      },
-      {
-        "start": 168,
-        "end": 197,
-        "label": "STRASSE"
-      },
-      {
-        "start": 146,
-        "end": 167,
-        "label": "FIRMA"
-      },
-      {
-        "start": 235,
-        "end": 256,
-        "label": "STRASSE"
-      },
-      {
-        "start": 288,
-        "end": 302,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 377,
-        "end": 389,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 97,
-        "end": 108,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 124,
-        "end": 134,
-        "label": "DATUM"
-      },
-      {
-        "start": 336,
-        "end": 346,
-        "label": "DATUM"
-      },
-      {
-        "start": 266,
-        "end": 274,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 206,
-        "end": 213,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 315,
-        "end": 322,
-        "label": "ZÄHLERSTAND"
-      },
-      {
-        "start": 222,
-        "end": 228,
-        "label": "VORNAME"
-      },
-      {
-        "start": 229,
-        "end": 234,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 371,
-        "end": 376,
-        "label": "VORNAME"
-      },
-      {
-        "start": 260,
-        "end": 265,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 200,
-        "end": 205,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 257,
-        "end": 259,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 102,
-        "end": 103,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 105,
-        "end": 106,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 107,
-        "end": 108,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 198,
-        "end": 199,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 263,
-        "end": 264,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 301,
-        "end": 302,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "139.txt",
-    "text": "Sehr geehrte Damen und Herren,\nIch erbitte den offenen Betrag von 163,23 Euro,\nAm 1.10.2023 begleichen zu dürfen, da ich in wenigen Tagen eine Überweisung\nbekomme.\nIch war jetzt lange Zeit nicht vor Ort, wegen eines Schimmel Befalls. Dabei\ngingen mir einigen Pflichten unter, die ich jetzt nach holen möchte.\nIch würde mich freuen, wenn dies möglich wäre.\nVielen Dank.\nGrüße Diana Schulz \nZdravko-Gutknecht-Ring 93 57192 Worbis\n",
-    "labels": [
-      {
-        "start": 389,
-        "end": 411,
-        "label": "STRASSE"
-      },
-      {
-        "start": 82,
-        "end": 91,
-        "label": "DATUM"
-      },
-      {
-        "start": 381,
-        "end": 387,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 421,
-        "end": 427,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 66,
-        "end": 72,
-        "label": "ZAHLUNG"
-      },
-      {
-        "start": 375,
-        "end": 380,
-        "label": "VORNAME"
-      },
-      {
-        "start": 415,
-        "end": 420,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 412,
-        "end": 414,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "140.txt",
-    "text": "Sehr geehrte Damen und Herren, \nIm Anhanhg zu finden ist die Vereinbarung. Vielen Dank im voraus für die Bearbeitung. \nMit freundlichen Grüßen \nIng. Henrike Jäkel Ing. Henrike Jäkel\n",
-    "labels": [
-      {
-        "start": 149,
-        "end": 156,
-        "label": "VORNAME"
-      },
-      {
-        "start": 168,
-        "end": 175,
-        "label": "VORNAME"
-      },
-      {
-        "start": 144,
-        "end": 148,
-        "label": "TITEL"
-      },
-      {
-        "start": 163,
-        "end": 167,
-        "label": "TITEL"
-      },
-      {
-        "start": 157,
-        "end": 162,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 176,
-        "end": 181,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "141.txt",
-    "text": "Sehr geehrte Damen und Herren,\nich nehme Bezug auf die Mahnung vom 23.08.2023.\nBereits vor einigen Wochen habe ich über Ihr Kontaktportal eine Anfrage bezüglich der Zahlungsmöglichkeiten geschickt. Leider habe ich bis heute keine Rückmeldung erhalten.\nMir ist es nicht möglich den geforderten Betrag auf einmal zu leisten, da ich bereits mit den aktuellen Abschlagszahlungen für das Gas an der Grenze meiner Möglichkeiten bin. Aus diesem Grund bitte ich um eine Stundung. Zur Zeit wäre es mir möglich eine Rate in Höhe von 50€ monatlich zu entrichten.\nDa ich im November eine Sonderzahlung von meinem Arbeitgeber erwarte, wäre zu diesem Zeitpunkt eine Sonderleistungen der Forderung möglich.\nIch danke für Ihr Verständnis und verbleibe\nMit freundlichen Grüßen\nHilda Gutknecht\n",
-    "labels": [
-      {
-        "start": 67,
-        "end": 78,
-        "label": "DATUM"
-      },
-      {
-        "start": 766,
-        "end": 775,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 760,
-        "end": 765,
-        "label": "VORNAME"
-      },
-      {
-        "start": 523,
-        "end": 525,
-        "label": "ZAHLUNG"
-      }
-    ]
-  },
-  {
-    "file": "143.txt",
-    "text": "Sehr geehrte Damen und Herren,\nin der Anlage sende ich Ihnen meine Abwendungsvereinbarung.\nMit freundlichen Grüßen\nAgatha Wieloch-Killer\n",
-    "labels": [
-      {
-        "start": 122,
-        "end": 136,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 115,
-        "end": 121,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "147.txt",
-    "text": "Sehr geehrte Damen und Herren,\n \nich habe meinen Stromvertrag (Vertragsnummer: 401528618) mit meinem\nGasvertrag (Vertragsnummer: 401528618) gebündelt. In den Rechnungen für 2023\nerscheint dieser Vorteil „Bündelbonus“ nicht. Ich bitte Sie diesen zu\nberücksichtigen und die Rechnungen entsprechend anzupassen.\n \nBei Fragen stehe ich Ihnen sehr gerne zur Verfügung.\n \n \nMit freundlichen Grüßen\nJohann Pohl-Schlauchin\n \nLambert-Ladeck-Allee 971\n06134 Erding\n \nTel.: 0930244918\nvassilioshein@example.org\n",
-    "labels": [
-      {
-        "start": 473,
-        "end": 498,
-        "label": "EMAIL"
-      },
-      {
-        "start": 416,
-        "end": 436,
-        "label": "STRASSE"
-      },
-      {
-        "start": 398,
-        "end": 413,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 462,
-        "end": 472,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 391,
-        "end": 397,
-        "label": "VORNAME"
-      },
-      {
-        "start": 447,
-        "end": 453,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 442,
-        "end": 446,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 437,
-        "end": 440,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "151.txt",
-    "text": "Sehr geehrte Damen und Herren,\nbitte senden Sie mir meinen aktuellen Arbeits- und Grundpreis brutto per E-Mail zu.\nSteht aktuell eine Preisanpassung an, falls ja teilen Sie mir bitte das Datum der Erhöhung und die neuen Preiskonditionen mit, alternativ lassen Sie mir bitte das Preisanpassungsschreiben per E-Mail zukommen.\n \nVielen Dank!\nMit freundlichen Grüßen\nMijo Steinberg\nDittmar-Hering-Gasse 4, 90719 Bad Kissingen\nStromzähler 1ESY1166483729\n",
-    "labels": [
-      {
-        "start": 378,
-        "end": 398,
-        "label": "STRASSE"
-      },
-      {
-        "start": 434,
-        "end": 448,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 368,
-        "end": 377,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 412,
-        "end": 421,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 402,
-        "end": 407,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 363,
-        "end": 367,
-        "label": "VORNAME"
-      },
-      {
-        "start": 399,
-        "end": 400,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 442,
-        "end": 443,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "153.txt",
-    "text": "Hallo\nHabe versucht mehrmals telefonisch mein Anliegen zu klären\nLeider wenig Erfolg\nHabe offene Betrag über dieses Konto\nMöchte Sie bitten um teilzahlung bitte um Rückmeldung\n Mfg Kusch\n",
-    "labels": [
-      {
-        "start": 181,
-        "end": 186,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "155.txt",
-    "text": "Sehr geehrte Damen und Herren,\nich habe aufgrund des Todes meines Vaters den Stromvertrag von ihm übernommen. Diesen habe ich am 21.August 2023 gewechselt. Die neue Vertragsnummer ist 406728910.\nDie Zählernummer allerdings ist gleich geblieben 1APADA91675322.\nWenn ich mich jetzt in mein Vertragskonto online einloggen möchte, wird mir nur der alte Vertrag angezeigt. Dort steht auch, dass dieser alte Vertrag deaktiviert wurde. Den neuen Vertrag kann ich aber leider online nicht sehen.\nWie gehe ich nun vor, dass ich den neuen Vertrag in meinem Benutzerkonto sehen kann?\nMit freunlichen Grüßen\nHenriette Knappe-Gierschner\n",
-    "labels": [
-      {
-        "start": 606,
-        "end": 623,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 129,
-        "end": 143,
-        "label": "DATUM"
-      },
-      {
-        "start": 244,
-        "end": 258,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 596,
-        "end": 605,
-        "label": "VORNAME"
-      },
-      {
-        "start": 184,
-        "end": 193,
-        "label": "VERTRAGSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "156.txt",
-    "text": "Guten Tag,Vertragsnummer:409219580 Roberto Meyer Zimmerallee 8 in 79096 Hainichen. Mein Anliegen ist, da ich bis ende Oktober selten zuhause bin und kaum Strom verbrauche bitte ich ein neuen Abschlag von maximal von 20 Euro. Habe von 24.07 bis 16.08 23 gerade mal ein Verbrauch von:19 kw gehabt. MFG Roberto Meyer ( +49(0)4978 131366)\n",
-    "labels": [
-      {
-        "start": 316,
-        "end": 333,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 49,
-        "end": 60,
-        "label": "STRASSE"
-      },
-      {
-        "start": 244,
-        "end": 252,
-        "label": "DATUM"
-      },
-      {
-        "start": 72,
-        "end": 81,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 25,
-        "end": 34,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 216,
-        "end": 223,
-        "label": "ZAHLUNG"
-      },
-      {
-        "start": 35,
-        "end": 42,
-        "label": "VORNAME"
-      },
-      {
-        "start": 300,
-        "end": 307,
-        "label": "VORNAME"
-      },
-      {
-        "start": 234,
-        "end": 239,
-        "label": "DATUM"
-      },
-      {
-        "start": 43,
-        "end": 48,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 308,
-        "end": 313,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 66,
-        "end": 71,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 32,
-        "end": 33,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 61,
-        "end": 62,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 248,
-        "end": 249,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 325,
-        "end": 326,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "158.txt",
-    "text": "Bitte um Korrektur von Schlussrechnung\nSiehe anhang\nGrüß\nBurkhardt Haering\n",
-    "labels": [
-      {
-        "start": 57,
-        "end": 66,
-        "label": "VORNAME"
-      },
-      {
-        "start": 67,
-        "end": 74,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "159.txt",
-    "text": "Vertragsnummer 404494889\nSehr geehrte Damen und Herren,\nMit diesem Schreiben möchte ich Sie über meine Namensänderung aufgrund meiner Hochzeit am 14.4.23 informieren.\nAb sofort heiße ich mit Nachnamen Vitali Rogner. Bitte ändern Sie Ihre Datenbestände entsprechend.\nEine Bestätigung der Namensänderung finden Sie im Anhang.\nMit freundlichen Grüßen\nVitali Rogner\n",
-    "labels": [
-      {
-        "start": 15,
-        "end": 24,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 146,
-        "end": 153,
-        "label": "DATUM"
-      },
-      {
-        "start": 201,
-        "end": 207,
-        "label": "VORNAME"
-      },
-      {
-        "start": 348,
-        "end": 354,
-        "label": "VORNAME"
-      },
-      {
-        "start": 208,
-        "end": 214,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 355,
-        "end": 361,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "164.txt",
-    "text": "Sehr geehrte Damen und Herren,\nich bitte Sie für meine neue Mietswohnung so schnell wie möglich den Strom freizuschalten und mir Vertragsunterlagen zuzuschicken.\nAnschrift der Wohnung:\nMielcarekstraße 05\n29975 Tübingen Inn\nZählernummer: 320206623943\nMit freundlichen Grüßen\nGiuseppe Eckbauer\n+49 (0) 8659 215108\n",
-    "labels": [
-      {
-        "start": 292,
-        "end": 311,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 185,
-        "end": 200,
-        "label": "STRASSE"
-      },
-      {
-        "start": 210,
-        "end": 222,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 237,
-        "end": 249,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 274,
-        "end": 282,
-        "label": "VORNAME"
-      },
-      {
-        "start": 283,
-        "end": 291,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 204,
-        "end": 209,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 202,
-        "end": 203,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 208,
-        "end": 209,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 302,
-        "end": 303,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 307,
-        "end": 308,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "167.txt",
-    "text": "Sehr geehrte Damen und Herren,\nbitte den Termin für den Abschlag ändern; von Mitte des Monats zu Anfang des Monats.\nMeine Daten:\nVor-, Nachname: Silva Mende\nGeburtsdatum: 14.04.1962\nLieferadresse: Geiselstr. 4, 35656 Saulgau\nZählernummer: 0934228439\nKundennummer: 409677455\nMit freundlichen Grüßen\n",
-    "labels": [
-      {
-        "start": 171,
-        "end": 181,
-        "label": "DATUM"
-      },
-      {
-        "start": 197,
-        "end": 207,
-        "label": "STRASSE"
-      },
-      {
-        "start": 240,
-        "end": 249,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 264,
-        "end": 273,
-        "label": "ZÄHLERSTAND"
-      },
-      {
-        "start": 217,
-        "end": 224,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 145,
-        "end": 150,
-        "label": "VORNAME"
-      },
-      {
-        "start": 151,
-        "end": 156,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 211,
-        "end": 216,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 172,
-        "end": 173,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 175,
-        "end": 176,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 208,
-        "end": 209,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 242,
-        "end": 243,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 246,
-        "end": 247,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 264,
-        "end": 265,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 270,
-        "end": 271,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "168.txt",
-    "text": "Sehr geehrte Damen und Herren,\nBitte ändern Sie meine Fälligkeiten ab. Ab jetzt bitte ich Sie immer die Abschläge zum Ende des Monats also zum 30ten einzuziehen.\nMFG\nSchmiedt\n",
-    "labels": [
-      {
-        "start": 166,
-        "end": 174,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "170.txt",
-    "text": "Sehr geehrte Damen und Herren,\n \nder angefügte Vertrag ist in „mein eon“ nicht angelegt. Ich bitte hier\ndringend um Korrektur, damit ich \nin beiden Vertragskonten die Zahlungsart auf Lastschriftverfahren umstellen\nkann.\n \nMit besten Grüßen\n \nElmar Karge-Hövel\nMontage und Objektbetreuung\nBruderplatz 998\n99130 Celle\n \nTel.: 0970585654 – 70034\nMobil: (07941) 852483\n",
-    "labels": [
-      {
-        "start": 324,
-        "end": 342,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 350,
-        "end": 364,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 248,
-        "end": 259,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 288,
-        "end": 299,
-        "label": "STRASSE"
-      },
-      {
-        "start": 242,
-        "end": 247,
-        "label": "VORNAME"
-      },
-      {
-        "start": 304,
-        "end": 309,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 310,
-        "end": 315,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 300,
-        "end": 303,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "171.txt",
-    "text": "Sehr geehrte Inergieversorger!\nEs ist nicht akzeptabel das mein Zugang nicht funktioniert ,ich bitte Sie dieses zeitnah bazuändern!!!\nVon meinem/meiner Galaxy gesendet\n",
-    "labels": [
-      {
-        "start": 134,
-        "end": 167,
-        "label": "GESENDET_MIT"
-      }
-    ]
-  },
-  {
-    "file": "172.txt",
-    "text": "Sehr geehrte Damen und Herren,\nAuf Grund eines Umzuges, und eines Strom Wechsels in den Öko Strom bei Eon.\nMöchte ich rückwirkend zum 31.07.2023 meinen Vertrag bei Eon Kündigen. Wie\ntelefonisch vereinbart, schicke ich Ihnen eine Email mit einem\nSonderkündigungsrecht.\nMeine Vertragsnummer wie folgt: das ist die alte Vertragsnummer 407434215\nMeine neue Adresse: Alfredo Schacht\nGottlieb-Mans-Allee 9\n23901 Luckau.\nBei Rückfragen +49(0)4886 25829\nMfG Alfredo Schacht\n",
-    "labels": [
-      {
-        "start": 378,
-        "end": 397,
-        "label": "STRASSE"
-      },
-      {
-        "start": 429,
-        "end": 445,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 134,
-        "end": 144,
-        "label": "DATUM"
-      },
-      {
-        "start": 332,
-        "end": 341,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 362,
-        "end": 369,
-        "label": "VORNAME"
-      },
-      {
-        "start": 450,
-        "end": 457,
-        "label": "VORNAME"
-      },
-      {
-        "start": 370,
-        "end": 377,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 458,
-        "end": 465,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 406,
-        "end": 412,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 400,
-        "end": 405,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 398,
-        "end": 399,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 402,
-        "end": 403,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 431,
-        "end": 432,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 444,
-        "end": 445,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "178.txt",
-    "text": "Hiermit übersende ich Ihnen den unterschriebenen Stromvertrag.\nMit freundlichem Gruß\nGenoveva Jäkel\n",
-    "labels": [
-      {
-        "start": 85,
-        "end": 93,
-        "label": "VORNAME"
-      },
-      {
-        "start": 94,
-        "end": 99,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "180.txt",
-    "text": "Sehr geehrte Damen und Herren,\nwir haben Probleme bei der Meldung des Zählerstandes zu o. g. Vertragskonto.\nAm 14.8.23 haben wir für den Zähler 62613684 einen Stand von 37.102,5\nabgelesen.\nSollte die Registrierung des Zählerstandes so nicht möglich sein, bitte ich\num Zusendung der Anforderung mit dem Gastzugangscode per Post.\nMit freundlichen Grüßen\nKäthe Heser\nJoanna-Scholl-Weg 420\n18190 Sanitz\n",
-    "labels": [
-      {
-        "start": 364,
-        "end": 381,
-        "label": "STRASSE"
-      },
-      {
-        "start": 169,
-        "end": 177,
-        "label": "ZÄHLERSTAND"
-      },
-      {
-        "start": 111,
-        "end": 118,
-        "label": "DATUM"
-      },
-      {
-        "start": 144,
-        "end": 152,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 392,
-        "end": 398,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 352,
-        "end": 357,
-        "label": "VORNAME"
-      },
-      {
-        "start": 358,
-        "end": 363,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 386,
-        "end": 391,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 382,
-        "end": 385,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  }
-]
\ No newline at end of file
Index: notebooks/data/granular_dataset_split/test.json
===================================================================
diff --git a/notebooks/data/granular_dataset_split/test.json b/notebooks/data/granular_dataset_split/test.json
deleted file mode 100644
--- a/notebooks/data/granular_dataset_split/test.json	(revision 68e3fd01408523769b50e7566e6fd0db7c5afb8a)
+++ /dev/null	(revision 68e3fd01408523769b50e7566e6fd0db7c5afb8a)
@@ -1,1747 +0,0 @@
-[
-  {
-    "file": "0.txt",
-    "text": "Wie angefordert der Kontoauszug. Abbuchung Euro 103,22.\nGesendet mit der Stiffel AG Mail App\n<http://www.t-online.de/service/redir/emailmobilapp_ios_smartphone_footerlink.htm>\n",
-    "labels": [
-      {
-        "start": 93,
-        "end": 175,
-        "label": "LINK"
-      },
-      {
-        "start": 56,
-        "end": 92,
-        "label": "GESENDET_MIT"
-      },
-      {
-        "start": 48,
-        "end": 54,
-        "label": "ZAHLUNG"
-      }
-    ]
-  },
-  {
-    "file": "142.txt",
-    "text": "Sehr geehrte Damen und Herren,\nin der Anlage befindet sich die Vollmacht meiner Mutter.\nBitte fügen Sie den Vertrag 402495305  in Mein E.ON von Bertram Steinberg-Wende \nmit dem Vertrag 402495305 hinzu.\n-- \nMit freundlichen Grüssen\nBertram Steinberg-Wende\n",
-    "labels": [
-      {
-        "start": 152,
-        "end": 167,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 239,
-        "end": 254,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 116,
-        "end": 125,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 185,
-        "end": 194,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 144,
-        "end": 151,
-        "label": "VORNAME"
-      },
-      {
-        "start": 231,
-        "end": 238,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "2.txt",
-    "text": "Sehr geehrte Damen und Herren,\nleider wurde mein Abschlag den ich für August überwiesen habe für den Abschlag für Juni verrechnet.\nWie schon mindesten 10 mal von mir berichtet, habe ich den Abschlag von148 € für Juni auf das Konto das in mein e-on angegeben ist überwiesen,DE40926301819767992111.\nSie müssten nur den Betrag umbuchen auf DE57671088940322928241.\nIch bitte Sie dies zu machen, weil ich sonst wieder eine Zahlungserinnerung für August bekomme.\nMit freundichen Grüssen\nDipl.-Ing. Leo Reichmann\nl\n",
-    "labels": [
-      {
-        "start": 273,
-        "end": 295,
-        "label": "IBAN"
-      },
-      {
-        "start": 337,
-        "end": 359,
-        "label": "IBAN"
-      },
-      {
-        "start": 481,
-        "end": 491,
-        "label": "TITEL"
-      },
-      {
-        "start": 496,
-        "end": 505,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 202,
-        "end": 207,
-        "label": "ZAHLUNG"
-      },
-      {
-        "start": 70,
-        "end": 76,
-        "label": "DATUM"
-      },
-      {
-        "start": 441,
-        "end": 447,
-        "label": "DATUM"
-      },
-      {
-        "start": 70,
-        "end": 76,
-        "label": "DATUM"
-      },
-      {
-        "start": 441,
-        "end": 447,
-        "label": "DATUM"
-      },
-      {
-        "start": 114,
-        "end": 118,
-        "label": "DATUM"
-      },
-      {
-        "start": 212,
-        "end": 216,
-        "label": "DATUM"
-      },
-      {
-        "start": 492,
-        "end": 495,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "3.txt",
-    "text": "Guten Tag,\nhiermit schicke ich Ihnen die noch fehlenden Angaben:\nÜbergabedatum: 01.08.2023\nMieter: Isabelle Eckbauer (+49 (0) 5402 008802)\n Ahmet Gerlach (+49(0)7195176538)\nVermieter: Dr. Franz-Xaver Huhn\nZählernummer: 1ISK0070547123\nZählerstand: 0022386623\nVielen Dank\nIsabelle Eckbauer\n",
-    "labels": [
-      {
-        "start": 118,
-        "end": 137,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 155,
-        "end": 171,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 219,
-        "end": 233,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 80,
-        "end": 90,
-        "label": "DATUM"
-      },
-      {
-        "start": 188,
-        "end": 199,
-        "label": "VORNAME"
-      },
-      {
-        "start": 247,
-        "end": 257,
-        "label": "ZÄHLERSTAND"
-      },
-      {
-        "start": 99,
-        "end": 107,
-        "label": "VORNAME"
-      },
-      {
-        "start": 270,
-        "end": 278,
-        "label": "VORNAME"
-      },
-      {
-        "start": 108,
-        "end": 116,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 279,
-        "end": 287,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 146,
-        "end": 153,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 140,
-        "end": 145,
-        "label": "VORNAME"
-      },
-      {
-        "start": 184,
-        "end": 187,
-        "label": "TITEL"
-      },
-      {
-        "start": 200,
-        "end": 204,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "146.txt",
-    "text": "Sehr geehrte Damen und Herren, \nwie besprochen sende ich Ihnen die Unterlagen zur Vertragsnummer 401 401 350 sowie die Angebotsnummer OR-0004579076 zu. \nFür weitere Rückfragen können Sie mich gerne per Mail erreichen.\nMit freundlichen Grüßen \nDipl.-Ing. Darius Oestrovsky\n",
-    "labels": [
-      {
-        "start": 134,
-        "end": 147,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 243,
-        "end": 253,
-        "label": "TITEL"
-      },
-      {
-        "start": 97,
-        "end": 108,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 261,
-        "end": 271,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 254,
-        "end": 260,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "145.txt",
-    "text": "Sehr geehrte Frau Scholl-Kambs,\nWie bereits Telefonisch besprochen sende ich ihnen das Schreiben von\nBonnNetz. Vielen Dank für ihre Hilfe.\nMit freundlichen Grüßen\nRosa-Maria Klotz\n",
-    "labels": [
-      {
-        "start": 18,
-        "end": 30,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 163,
-        "end": 173,
-        "label": "VORNAME"
-      },
-      {
-        "start": 174,
-        "end": 179,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "148.txt",
-    "text": "Sehr geehrte Damen und Herren\nleider wurde meine Zählernummer immer noch nicht in Ihren Unterlagen geändert. Die Zählernummer lautet bereits seit Vertragsbeginn 1ESY1162808638.\nMit freundlichen Grüßen\nDanica Mohaupt\nD-99763 Erbisdorf\nNettestraße 1\nTel.: +49(0) 993726788\nFax: +49(0)5740 58320\nHandy (02675) 31629\nE-Mail: tomislav80@example.net\n",
-    "labels": [
-      {
-        "start": 321,
-        "end": 343,
-        "label": "EMAIL"
-      },
-      {
-        "start": 254,
-        "end": 270,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 276,
-        "end": 292,
-        "label": "FAX"
-      },
-      {
-        "start": 299,
-        "end": 312,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 161,
-        "end": 175,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 234,
-        "end": 245,
-        "label": "STRASSE"
-      },
-      {
-        "start": 224,
-        "end": 233,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 216,
-        "end": 223,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 208,
-        "end": 215,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 201,
-        "end": 207,
-        "label": "VORNAME"
-      },
-      {
-        "start": 161,
-        "end": 162,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 165,
-        "end": 166,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 166,
-        "end": 167,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 246,
-        "end": 247,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 308,
-        "end": 309,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "157.txt",
-    "text": "Hallo,\nBitte keine Werbung an leiftschentscher@example.net oder +49 (0) 5864 007393 schicken\nDanke\n",
-    "labels": [
-      {
-        "start": 30,
-        "end": 58,
-        "label": "EMAIL"
-      },
-      {
-        "start": 64,
-        "end": 83,
-        "label": "TELEFONNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "165.txt",
-    "text": "Sehr geehrte Damen und Herren,\nmit Mail vom 16.02.2023 hatte ich bezüglich der neuen Preise ab 01. März 2023 hatte ich ihnen mitgeteilt, dass ich als langjähriges Mitglied des Landwirtvereins Hinterdupfing deren Vorteilsangebote annehme. Im Rahmen der Energieversorgung bestehen hier entsprechende Verträge.\nIch bitte um Mitteilung, ob bei dem neuen Preis zum 01. März 2023 dies berücksichtigt wurde. Sofern nicht, bitte ich um Aktualisierung des neuen Preises.\nMit freundlichen Grüßen\nGuiseppe Krein-Bolzmann\n",
-    "labels": [
-      {
-        "start": 95,
-        "end": 108,
-        "label": "DATUM"
-      },
-      {
-        "start": 360,
-        "end": 373,
-        "label": "DATUM"
-      },
-      {
-        "start": 495,
-        "end": 509,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 44,
-        "end": 54,
-        "label": "DATUM"
-      },
-      {
-        "start": 486,
-        "end": 494,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "19.txt",
-    "text": "Sehr geehrte Damen und Herren,\nmein Stromtarif E.ON Klassik Strom Extra 24 läuft noch mit der Preisgarantie von 23,08 Cent netto ( 27,47 Cent brutto) bis zum 30.09.2023.\nWelchen Tarif zu welchen Konditionen können Sie mir ab diesem Zeitpunkt anbieten?\nKann der Tarif zu gleichen Bedingungen weiter verlängert werden?\nVielen Dank!\nMit freundlichen Grüßen\nSigurd Lachmann\n",
-    "labels": [
-      {
-        "start": 158,
-        "end": 168,
-        "label": "DATUM"
-      },
-      {
-        "start": 112,
-        "end": 122,
-        "label": "ZAHLUNG"
-      },
-      {
-        "start": 131,
-        "end": 141,
-        "label": "ZAHLUNG"
-      },
-      {
-        "start": 361,
-        "end": 369,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 354,
-        "end": 360,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "18.txt",
-    "text": "Schönen guten Tag, \nHelmar Staude, 21.06.1998\nIch habe gestern Ausversehen die Stromrechnung überwiesen die eigentlich per Lastschrift eingezogen wird. \nGestern habe ich mit einem aus ihrem Kundenservice telefoniert, der mir gesagt hat ich solle mich nochmal melden falls ich das Geld zurück überwiesen haben möchte, statt als Gutschrift. \nHiermit möchte ich ihnen mitteilen das ich die 111,02 Euro zurück überwiesen haben möchte. \nBitte veranlassen sie dies so schnell wie möglich. \nMit freundlichen Grüßen \nHelmar Staude \nGesendet mit der mobilen Mail App\n",
-    "labels": [
-      {
-        "start": 524,
-        "end": 557,
-        "label": "GESENDET_MIT"
-      },
-      {
-        "start": 387,
-        "end": 398,
-        "label": "ZAHLUNG"
-      },
-      {
-        "start": 35,
-        "end": 45,
-        "label": "DATUM"
-      },
-      {
-        "start": 20,
-        "end": 26,
-        "label": "VORNAME"
-      },
-      {
-        "start": 509,
-        "end": 515,
-        "label": "VORNAME"
-      },
-      {
-        "start": 27,
-        "end": 33,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 516,
-        "end": 522,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "20.txt",
-    "text": "Guten Tag. \nDer nächste Abschlag ist am 31.8 fällig. \nHabe das Ende Juli mit einem Kollegen am Call Center ausgemacht. \nBitte um Bearbeitung das der Betrag Ende August überwiesen wird. \nDas Konto ist ausgeglichen. \nVielen Dank. \nMit freundlichen Grüßen \nHerr Gundolf Hellwig \nErwin-Müller-Platz 1/4\n94535 Eging am See\n",
-    "labels": [
-      {
-        "start": 276,
-        "end": 294,
-        "label": "STRASSE"
-      },
-      {
-        "start": 305,
-        "end": 317,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 259,
-        "end": 266,
-        "label": "VORNAME"
-      },
-      {
-        "start": 267,
-        "end": 274,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 161,
-        "end": 167,
-        "label": "DATUM"
-      },
-      {
-        "start": 299,
-        "end": 304,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 40,
-        "end": 44,
-        "label": "DATUM"
-      },
-      {
-        "start": 68,
-        "end": 72,
-        "label": "DATUM"
-      },
-      {
-        "start": 295,
-        "end": 298,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "166.txt",
-    "text": "Kundenummer : 408527820\nSehr geehrte Damen und Herren,\nich bitte um einen günstigeren Tarif. Ich bin schon seit einigen Jahren\nKunde bei Ihnen und die Strompreis Erhöhung im März ist mir zu teuer.\nFalls Sie mir nicht entgegen kommen können, werde ich leider kündigen\nmüssen.\nIch bedanke mich im Voraus.\nTelefonisch bin ich unter folgender Rufnummer erreichbar : 09926 90657\nMit freundlichen Grüßen\nHolger Speer\n",
-    "labels": [
-      {
-        "start": 362,
-        "end": 373,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 14,
-        "end": 23,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 398,
-        "end": 404,
-        "label": "VORNAME"
-      },
-      {
-        "start": 405,
-        "end": 410,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "175.txt",
-    "text": "Sehr geehrte Damen und Herren,\nbitte bemerken Sie das Dokument im Anhang.\n-- \nMit freundlichen Grüßen\ndas Team | rechtliche Betreuungen Drubin\nAnita Schenk\nRechtliche Betreuungen\nNiko-Pölitz-Straße 3\n50225 Rottweil\nTel. 09814526041\nFax 09814526043\n",
-    "labels": [
-      {
-        "start": 102,
-        "end": 142,
-        "label": "FIRMA"
-      },
-      {
-        "start": 179,
-        "end": 197,
-        "label": "STRASSE"
-      },
-      {
-        "start": 221,
-        "end": 231,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 237,
-        "end": 247,
-        "label": "FAX"
-      },
-      {
-        "start": 206,
-        "end": 214,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 149,
-        "end": 155,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 143,
-        "end": 148,
-        "label": "VORNAME"
-      },
-      {
-        "start": 200,
-        "end": 205,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 198,
-        "end": 199,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 246,
-        "end": 247,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "176.txt",
-    "text": "Sehr geehrte Damen und Herren,\nSie haben bis heute nicht auf meine E-Mail vom 25.08.2023, 10:31, \ngeantwortet. Nach wie vor befinde ich mich nicht in der Belieferung. Ich \nfinde die Situation unsäglich und fordere Sie auf, mich unverüglich zu \nkontaktieren.\nMit freundlichen Grüßen\nNuray Hübel\nPechelweg 1\n28558 Osterode am Harz\nTel.: (00727) 30389\n",
-    "labels": [
-      {
-        "start": 312,
-        "end": 328,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 335,
-        "end": 348,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 78,
-        "end": 88,
-        "label": "DATUM"
-      },
-      {
-        "start": 294,
-        "end": 303,
-        "label": "STRASSE"
-      },
-      {
-        "start": 282,
-        "end": 287,
-        "label": "VORNAME"
-      },
-      {
-        "start": 288,
-        "end": 293,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 306,
-        "end": 311,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 90,
-        "end": 91,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 94,
-        "end": 95,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 304,
-        "end": 305,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "177.txt",
-    "text": "Zähler Wechselprotokoll.\nVertragsnummer: 402424354\nGotthold Baum\n05.11.1991\nSchaafring 8\n55257 Budenheim\n",
-    "labels": [
-      {
-        "start": 65,
-        "end": 75,
-        "label": "DATUM"
-      },
-      {
-        "start": 76,
-        "end": 86,
-        "label": "STRASSE"
-      },
-      {
-        "start": 95,
-        "end": 104,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 41,
-        "end": 50,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 51,
-        "end": 59,
-        "label": "VORNAME"
-      },
-      {
-        "start": 89,
-        "end": 94,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 60,
-        "end": 64,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 87,
-        "end": 88,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "32.txt",
-    "text": "Guten Abend liebes Beschwerde- Team,\nleider kann ich den beim Abschluss zugesicherten Bonus von 315€ immer noch nicht in den Dokumenten des oben genannten Vertrages einsehen.(siehe Anhang)\nIm stornierten Vertrag( 402619080) war dieser in den Dokumenten ersichtlich( siehe Anhang) und der neue Ersatzvertrag sollte eins zu eins die gleichen Konditionen enthalten. \nIch schrieb eine Beschwerde UND rief deswegen im Kundenservice an.\nTelefonisch wurde mir der Bonus bei meinem Anruf für den aktuellen Vertrag bestätigt. \nAuch die Kollegin, die mich auf meine Beschwerde hin am 15.09. um 19Uhr anrief, bestätigte mir dies telefonisch. \nBeide sagten mir eine schriftliche Bestätigung zu. \nDie Unterlagen haben ich erhalten, allerdings ist in den Dokumenten des aktuellen Vertrag kein Bonus festgehalten! \nIch frage Sie nun, wieso mir diesen nicht einfach wie versprochen bestätigt werden kann?\nLangsam bin ich wirklich sehr genervt. Es ist für Sie wie auch für mich Vergeudung kostbarer Zeit. \nDaher bitte ich ein letztes Mal um Dokumente mit Bestätigung des Bonus von 315€ und hoffe das wir die Sache hiermit endlich ad acta legen können. \nVielen Dank und freundliche Grüße:\nErcan Fritsch\nAnhang: \n1. Erster Vertrag\n2. von Ihnen abgeschlossener Ersatzvertrag\nVon meinem iPhone gesendet\n",
-    "labels": [
-      {
-        "start": 1255,
-        "end": 1281,
-        "label": "GESENDET_MIT"
-      },
-      {
-        "start": 213,
-        "end": 222,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 574,
-        "end": 580,
-        "label": "DATUM"
-      },
-      {
-        "start": 1177,
-        "end": 1184,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 1171,
-        "end": 1176,
-        "label": "VORNAME"
-      },
-      {
-        "start": 96,
-        "end": 100,
-        "label": "ZAHLUNG"
-      },
-      {
-        "start": 1064,
-        "end": 1068,
-        "label": "ZAHLUNG"
-      }
-    ]
-  },
-  {
-    "file": "34.txt",
-    "text": "#### Order \n \nAnliegen*: Erdgas \n \nJahresverbrauch (kWh/Jahr)*: ohne Relevanz \n \nNachricht: Vertragsnummer 407 571 241 + 242 871 349 670 Ihr Schreiben aus August. Ich möchte vom Bündelbonus partizipieren. Mein Bündel-Code ist 721 992 747 Ich erbitte Informationen und einen Vorschlag \n \nIhr Name*: Vladimir Schleich \n \nFirmenname*: Vladimir Schleich \n \nPLZ und Ort*: 68616 Staffelstein \n \nE-Mail*: linda21@example.com \n \n \nIch akzeptiere die unten genannte Einwilligungserklärung.* \n \n: on \n \n",
-    "labels": [
-      {
-        "start": 398,
-        "end": 417,
-        "label": "EMAIL"
-      },
-      {
-        "start": 121,
-        "end": 136,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 107,
-        "end": 118,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 373,
-        "end": 385,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 298,
-        "end": 306,
-        "label": "VORNAME"
-      },
-      {
-        "start": 332,
-        "end": 340,
-        "label": "VORNAME"
-      },
-      {
-        "start": 307,
-        "end": 315,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 341,
-        "end": 349,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 155,
-        "end": 161,
-        "label": "DATUM"
-      },
-      {
-        "start": 367,
-        "end": 372,
-        "label": "POSTLEITZAHL"
-      }
-    ]
-  },
-  {
-    "file": "40.txt",
-    "text": "Sehr geehrte Damen und Herren. Ich entschuldige mich für die entstandenen Schulden und möchte hiermit eine Abwendungsvereinbarung mit ihnen treffen.\nLeider konnte ich die Summe nicht direkt zahlen da mir als allein Erziehender die Mittel dazu fehlen. Die erste Rate in Höhe von 35,57€ werde ich so schnell wie möglich überweisen.\nFreundliche Grüße Stephen Beckmann\n",
-    "labels": [
-      {
-        "start": 356,
-        "end": 364,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 348,
-        "end": 355,
-        "label": "VORNAME"
-      },
-      {
-        "start": 278,
-        "end": 284,
-        "label": "ZAHLUNG"
-      }
-    ]
-  },
-  {
-    "file": "45.txt",
-    "text": "Sehr geehrter Herr Kallert,\nanbei, wie eben besprochen, die Kontoauszüge, mit den von uns geleisteten\nAbschlägen. Ich bin mal bis zum Februar zurückgegangen.\nMit freundlichen Grüßen\nGerda Lorch\nRolf-Peter-Ullmann-Platz 405\n44082 Torgau\nMobil +49 (0) 5653 119113\nPrivat +49 (0) 1727 919892\n",
-    "labels": [
-      {
-        "start": 194,
-        "end": 218,
-        "label": "STRASSE"
-      },
-      {
-        "start": 242,
-        "end": 261,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 269,
-        "end": 288,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 19,
-        "end": 26,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 229,
-        "end": 235,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 182,
-        "end": 187,
-        "label": "VORNAME"
-      },
-      {
-        "start": 188,
-        "end": 193,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 223,
-        "end": 228,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 219,
-        "end": 222,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "52.txt",
-    "text": "Sehr geehrte Damen und Herren,\nIch bitte um Löschung sämtlicher persönlicher Daten bei Ihnen, insbesondere des MeinEON Accounts, da ich nicht mehr bei Ihnen Kunde bin.\nMit freundlichen Grüßen\nCäcilie Schulz\n",
-    "labels": [
-      {
-        "start": 192,
-        "end": 199,
-        "label": "VORNAME"
-      },
-      {
-        "start": 200,
-        "end": 206,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "57.txt",
-    "text": "Sehr geehrte(-r) Sachbearbeiter(-in) \n \n \nzum folgenden Vertragskonto wurde über Mein E.ON - Kontakt am 18.08.2023 folgende Kundenanfrage zum Thema \"\"Sonstiges\"\" abgesendet. Bitte um Bearbeitung! \n \nALLE DATEN AUF EINEN BLICK: \n \n \nGeschäftspartner: 0101833271 \nVertragskonto: 242354742018 \nTelefonnummer für Rückfragen: \nNachricht/Anfrage:  \n„VERTRAGS NR.: 401 160 536 \"Ihr Schreiben vom 15 August 2023 wg. E-Mail-Adresse\" “ \n \n \n \nFreundliche Grüße \nIhr E.ON Kundenservice \n \nwww.eon.de \n \nE.ON Deutschland GmbH \nVorsitzender des Aufsichtsrats/Chairman of the Supervisory Board: Dr. Ingo Luge Geschäftsführung/Executive Board: Dr. Victoria Ossadnik (Vorsitzende der Geschäftsführung/CEO) Dr. Philip Beckmann Torsten Flosbach Dr. Uwe Kolks Dr. Wolfgang Noetel Otmar Zisler \nSitz: Arnulfstraße 203, 80634 München Amtsgericht München HRB 209327 Ust-IdNr.: DE259922663 Gläubiger-ID: DE41EON00000129793  \n",
-    "labels": [
-      {
-        "start": 389,
-        "end": 403,
-        "label": "DATUM"
-      },
-      {
-        "start": 358,
-        "end": 369,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 104,
-        "end": 114,
-        "label": "DATUM"
-      },
-      {
-        "start": 277,
-        "end": 289,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 251,
-        "end": 260,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 251,
-        "end": 260,
-        "label": "VERTRAGSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "61.txt",
-    "text": "Vertragsnummer: 404032442\nSehr geehrte Damen und Herren,\nanbei wie telefonisch besprochen die kWh der Trocknung in unserem Haus, mit der Bitte um eine separate Rechnung.\nBeste Grüße Gertraude Steinberg\n",
-    "labels": [
-      {
-        "start": 182,
-        "end": 191,
-        "label": "VORNAME"
-      },
-      {
-        "start": 192,
-        "end": 201,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 16,
-        "end": 25,
-        "label": "VERTRAGSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "66.txt",
-    "text": "Sehr geehrte Damen und Herren,\nbitte bündeln sie nachfolgende Verträge unter dem Bündelcode 099282762.\nVerträge: 407 776 915\n405 804 183\n403 903 357\n403 205 774\n403 344 921\nVielen Dank.\nMfg Traute Walter\nDiese Nachricht wurde von meinem Android Mobiltelefon mit [WEB.DE][1] Mail gesendet.\n[1]: http://WEB.DE\n",
-    "labels": [
-      {
-        "start": 294,
-        "end": 307,
-        "label": "LINK"
-      },
-      {
-        "start": 113,
-        "end": 124,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 125,
-        "end": 136,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 137,
-        "end": 148,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 149,
-        "end": 160,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 161,
-        "end": 172,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 190,
-        "end": 196,
-        "label": "VORNAME"
-      },
-      {
-        "start": 197,
-        "end": 203,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "70.txt",
-    "text": "Sehr geehrte Damen und Herren,\n \nich verstehe Ihr Schreiben leider nicht.\n \nDer genannte Vertrag ist seit 09/2022 beendet. In diesem Vertrag handelte es\nsich um den Allgemeinstromzähler vom Wielochstraße 2, Gera. Dieser Zähler\nhat nun die Vertragsnummer 407130068.\n \n \nMit freundlichen Grüßen\n \nFriedhelm Schacht\n \nHendriksring 0\n76115 Mühlhausen\n0927999263\n+49(0)1969 77811\n",
-    "labels": [
-      {
-        "start": 358,
-        "end": 374,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 315,
-        "end": 327,
-        "label": "STRASSE"
-      },
-      {
-        "start": 336,
-        "end": 346,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 295,
-        "end": 304,
-        "label": "VORNAME"
-      },
-      {
-        "start": 348,
-        "end": 357,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 254,
-        "end": 263,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 305,
-        "end": 312,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 330,
-        "end": 335,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 106,
-        "end": 107,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 110,
-        "end": 111,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 255,
-        "end": 256,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 259,
-        "end": 260,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 260,
-        "end": 261,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 328,
-        "end": 329,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 347,
-        "end": 348,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 362,
-        "end": 363,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "71.txt",
-    "text": "Sehr geehrte Damen und Herren,\nIch habe für meinen Stromvertrag die Überweisung des Abschlags aus Versehen auf das falsche Konto getätigt.\nDas Konto, an welches ich überwiesen hatte, hat die IBAN DE60 9436 5282 2507 8700 65. Auf dieses Konto sollte ich bei meinem letzten Betrag bei der Fliegner Radisch GmbH überweisen, jedoch hat sich die IBAN mit dem Vetragswechsel geändert und ich habe das nicht mitbekommen, da der Brief zu neuen Stromvertrag von der Post nicht zugestellt wurde.\nIm Anhang finden Sie die Zahlungsnnachweise. \nKönnen Sie diese Beträge umbuchen?\nMit freundlichen Grüßen\nYasmin Mühle\n",
-    "labels": [
-      {
-        "start": 196,
-        "end": 223,
-        "label": "IBAN"
-      },
-      {
-        "start": 287,
-        "end": 308,
-        "label": "FIRMA"
-      },
-      {
-        "start": 591,
-        "end": 597,
-        "label": "VORNAME"
-      },
-      {
-        "start": 598,
-        "end": 603,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "73.txt",
-    "text": "Sehr geehrte Damen und Herren,\n \nich fordere Sie nochmals auf den Vertragspartner gem. meinem beigefügtem\nSchreiben vom 23.08.2023 zu korrigieren und mir dieses schriftlich zu\nbestätigen.\n \nDer Rechnungsempfänger für die Verbrauchsstelle muss zwingend\n„Höfig Scheuermann GmbH“ lauten, damit wir die offenen Posten aus\nbeigefügter Mahnung begleichen können.\n \nMit freundlichen Grüßen \n \nInge Beer\n- Vorstand -\n \n \nHöfig Scheuermann GmbH\nHolzapfelring 968\n46156 Bogen\n \nMobil: +49 (0) 6949 839568\nE-Mail: <mailto:ernst-dieteraumann@example.org>\nernst-dieteraumann@example.org\n",
-    "labels": [
-      {
-        "start": 511,
-        "end": 541,
-        "label": "EMAIL"
-      },
-      {
-        "start": 543,
-        "end": 573,
-        "label": "EMAIL"
-      },
-      {
-        "start": 475,
-        "end": 494,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 253,
-        "end": 275,
-        "label": "FIRMA"
-      },
-      {
-        "start": 413,
-        "end": 435,
-        "label": "FIRMA"
-      },
-      {
-        "start": 436,
-        "end": 449,
-        "label": "STRASSE"
-      },
-      {
-        "start": 454,
-        "end": 459,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 460,
-        "end": 465,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 245,
-        "end": 249,
-        "label": "VORNAME"
-      },
-      {
-        "start": 386,
-        "end": 390,
-        "label": "VORNAME"
-      },
-      {
-        "start": 391,
-        "end": 395,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 450,
-        "end": 453,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "75.txt",
-    "text": "Sehr geehrte Damen und Herren,\nwie heute Morgen telefonisch angefragt, würde ich gern die Postadresse des\nKundenkontos meiner Eltern ändern.\nDiese sind umgezogen und solange das Haus leer steht, kann dort keine Post\nempfangen werden.\nVertragsnummer: 409071025\nFabian Beier\nHerrmannstr. 1\n23013 Crailsheim\nneu:\nFabian Beier\nTäschestraße 684\n46491 Eichstätt\nKontonr. bleibt identisch.\nGeburtsdatum: 29.11.1964\nHier gibt es auch noch einen Stromvertrag, zu welchem mir die\nVertragsnummer derzeit leider nicht vorliegt. Hier müsste die Post bitte\nauch an die neue Anschrift gesendet werden.\nMein Vater liegt derzeit im Krankenhaus, weswegen ich Sie leider\nkontaktieren muss, nachdem ich gestern die sehr nasse Erdgasrechnung vor\nder alten Adresse liegend fand.\nSollten Sie noch Fragen haben, melden Sie sich gern.\nViele Grüße\nIsabell Schönland\n",
-    "labels": [
-      {
-        "start": 273,
-        "end": 285,
-        "label": "STRASSE"
-      },
-      {
-        "start": 323,
-        "end": 335,
-        "label": "STRASSE"
-      },
-      {
-        "start": 294,
-        "end": 304,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 830,
-        "end": 839,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 346,
-        "end": 355,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 250,
-        "end": 259,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 822,
-        "end": 829,
-        "label": "VORNAME"
-      },
-      {
-        "start": 260,
-        "end": 266,
-        "label": "VORNAME"
-      },
-      {
-        "start": 310,
-        "end": 316,
-        "label": "VORNAME"
-      },
-      {
-        "start": 267,
-        "end": 272,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 317,
-        "end": 322,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 288,
-        "end": 293,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 340,
-        "end": 345,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 336,
-        "end": 339,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 255,
-        "end": 256,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 286,
-        "end": 287,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 291,
-        "end": 292,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 344,
-        "end": 345,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 400,
-        "end": 401,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 401,
-        "end": 402,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 403,
-        "end": 404,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "78.txt",
-    "text": "Guten Tag,\nim Anhang ist ein aktuelles Foto vom Zählerstand.\nBitte um eine Anpassung Ihrer letzten Rechnung bzw Forderung und den monatlichen Abschlag, der Ihrerseits verdoppelt wurde.\nVertragsnummer: 408307553\nFreundliche Grüße\nRosemarie Niemeier\n",
-    "labels": [
-      {
-        "start": 229,
-        "end": 238,
-        "label": "VORNAME"
-      },
-      {
-        "start": 201,
-        "end": 210,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 239,
-        "end": 247,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "81.txt",
-    "text": "Betreff: Fristlose Kündigung meines Stromvertrags\nSehr geehrte Damen und Herren,\nich, Christa-Maria Schmiedecke, möchte hiermit meinen Stromvertrag mit Ihnen fristlos\nkündigen. Die relevanten Vertragsdaten lauten wie folgt:\nVertragskonto: 408072646\nZählernummer: 1ISK0059213705\nDer Grund für diese fristlose Kündigung sind unzumutbare Vertragsänderungen,\ndie ohne meine Zustimmung vorgenommen wurden und sich erheblich nachteilig\nauf meine Interessen auswirken.\nWiederholte, nicht genehmigte Abschlagsänderungen ihrerseits, haben zu\nerheblichen Unannehmlichkeiten geführt. Trotz meiner Mitteilungen zu diesem\nProblem, habe ich bisher keine Erklärung erhalten, warum diese Änderungen\nohne meine Zustimmung erfolgt sind oder welche Maßnahmen ergriffen werden,\num eine Wiederholung auszuschliessen. Leider blieb eine zufriedenstellende\nLösung in angemessener Zeit aus. Daher sehe ich mich gezwungen, von meinem\nRecht zur fristlosen Kündigung Gebrauch zu machen.\nGemäß den Vertragsbedingungen bin ich bereit, alle ausstehenden Zahlungen\nbis zum heutigen Datum zu begleichen. Ich bitte um Informationen darüber,\nwie der Vertragsabschluss und die Schlussabrechnung erfolgen werden.\nIch erwarte eine schriftliche Bestätigung dieser Kündigung sowie weitere\nInformationen bezüglich der Schlussabrechnung innerhalb von 14 Tagen ab\nErhalt dieses Schreibens.\nMit freundlichen Grüßen,\n \nChrista-Maria Schmiedecke\nRobert-Becker-Weg 276\n53474 Bad Neuenahr\nM +49 (0) 564 234 031 1\n",
-    "labels": [
-      {
-        "start": 1443,
-        "end": 1464,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 1400,
-        "end": 1417,
-        "label": "STRASSE"
-      },
-      {
-        "start": 86,
-        "end": 99,
-        "label": "VORNAME"
-      },
-      {
-        "start": 1374,
-        "end": 1387,
-        "label": "VORNAME"
-      },
-      {
-        "start": 263,
-        "end": 277,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 1428,
-        "end": 1440,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 100,
-        "end": 111,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 1388,
-        "end": 1399,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 239,
-        "end": 248,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 1422,
-        "end": 1427,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 1418,
-        "end": 1421,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "96.txt",
-    "text": "Sehr geehrte Damen und Herren,\nwir sind bereits online registriert und möchten zu bestehenden Verträgen\n(400458969, 401961488, 404677964) folgende Verträge hinzufügen um online\nZugriff darauf zu haben:\n242087426324 \n401424417 \nHerzliche Grüße\nUta Aumann\n",
-    "labels": [
-      {
-        "start": 202,
-        "end": 214,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 105,
-        "end": 114,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 116,
-        "end": 125,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 127,
-        "end": 136,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 216,
-        "end": 225,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 247,
-        "end": 253,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 243,
-        "end": 246,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "102.txt",
-    "text": "Hallo EON,\nBitte erstatten Sie auf folgendes Konto zurück\nChantal Roskoth\nIban: DE28263410720363784400\nbei der Kartoffelbank. \nMit freundlichen Grüßen\nChantal Roskoth\n",
-    "labels": [
-      {
-        "start": 80,
-        "end": 102,
-        "label": "IBAN"
-      },
-      {
-        "start": 111,
-        "end": 124,
-        "label": "BANK"
-      },
-      {
-        "start": 58,
-        "end": 65,
-        "label": "VORNAME"
-      },
-      {
-        "start": 151,
-        "end": 158,
-        "label": "VORNAME"
-      },
-      {
-        "start": 66,
-        "end": 73,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 159,
-        "end": 166,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "105.txt",
-    "text": "Im Anhang sende ich ihnen meinen Stromvertrag mit der Bitte um Bestätigung.\nBei Rückfragen erreichen sie mich unter: (08091) 41203\nMit freundlichen Grüßen,\nSimona Hofmann\n-- \nDiese E-Mail wurde von Hiller GbR-Antivirussoftware auf Viren geprüft. www.avast.com\n",
-    "labels": [
-      {
-        "start": 175,
-        "end": 259,
-        "label": "GESENDET_MIT"
-      },
-      {
-        "start": 117,
-        "end": 130,
-        "label": "TELEFONNUMMER"
-      },
-      {
-        "start": 163,
-        "end": 170,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 156,
-        "end": 162,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "108.txt",
-    "text": "Sehr geehrter EON,\nHiermit teile ich euch noch mal eine Kopie des Übergabeprotokolls mit zum\nAbschließen des o.g. Stromvertrags.\n*Vertragskonto: 408736951*\n*Zählernummer: 1EBZ0102456941*\nIch bitte euch gerne um eine schnelle Bearbeitung der Unterlagen und\nmöglichst eine Rückmeldung.\nmit den besten Grüßen\nJadwiga Gute\n",
-    "labels": [
-      {
-        "start": 171,
-        "end": 185,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 145,
-        "end": 154,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 306,
-        "end": 313,
-        "label": "VORNAME"
-      },
-      {
-        "start": 314,
-        "end": 318,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "109.txt",
-    "text": "Guten Tag liebes EON-Team,\ndie Adresse lautet:\nErdal-Pieper-Straße 778\n70417 Auerbach\nBezeichnung: Kellergeschoss\nBitte entnehmen Sie das aktuelle Bild des Stromzählers der Anlage.\nDies ist der Wert aus dem Übergabeprotokoll der Wohnung:\nZähler Nr. 5785.075, 1861084733875645/NZ Stand: 048960,50.\nVielen Dank im Voraus!\nIch freue mich über eine positive Rückmeldung.\nMarion Bloch\n",
-    "labels": [
-      {
-        "start": 249,
-        "end": 278,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 47,
-        "end": 66,
-        "label": "STRASSE"
-      },
-      {
-        "start": 286,
-        "end": 295,
-        "label": "ZÄHLERSTAND"
-      },
-      {
-        "start": 77,
-        "end": 85,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 367,
-        "end": 373,
-        "label": "VORNAME"
-      },
-      {
-        "start": 374,
-        "end": 379,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 71,
-        "end": 76,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 67,
-        "end": 70,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "112.txt",
-    "text": "Sehr geehrte Damen und Herren,\nMit diesem Schreiben möchte ich Sie über meine Namensänderung aufgrund\nmeiner Hochzeit am 28.01.2022 informieren. Ab sofort heiße ich mit\nNachnamen Klemt. Bitte ändern Sie Ihre Datenbestände entsprechend und\nschicken mir binnen 14 Tagen eine Bestätigung zu.\nEine Kopie der Eheurkunde und des Personalausweises finden Sie im Anhang.\nMit freundlichen Grüßen,\nPavel Klemt( früher Kreusel)\n",
-    "labels": [
-      {
-        "start": 121,
-        "end": 131,
-        "label": "DATUM"
-      },
-      {
-        "start": 408,
-        "end": 415,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 388,
-        "end": 393,
-        "label": "VORNAME"
-      },
-      {
-        "start": 179,
-        "end": 184,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 394,
-        "end": 399,
-        "label": "NACHNAME"
-      }
-    ]
-  },
-  {
-    "file": "115.txt",
-    "text": "Sehr geehrte Damen und Herren,\nich hatte am 18.06. mit dem Kundensupport telefoniert und um eine Korrektur\nder Konto-Zuordnung zu meiner E-Mail-Adresse gebeten:\n- 404418995, Ines Haase: alter, beendeter Vertrag\n- 404487643 und 40649786, Rosita Rogner: aktueller Vertrag\nMeine E-Mail-Adresse ist mit dem beendeten Konto 404418995 verbunden.\nTelefonisch wurde mir mitgeteilt, dass dies auf meinen aktuellen Vertrag\n(404487643 und 40649786) geändert wird. Dies ist bisher nicht geschehen.\nBitte teilen Sie mir mit, wenn die Bearbeitung erfolgt ist.\nMit freundlichen Grüßen\nRosita Rogner\n",
-    "labels": [
-      {
-        "start": 163,
-        "end": 172,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 319,
-        "end": 328,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 213,
-        "end": 222,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 414,
-        "end": 423,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 44,
-        "end": 50,
-        "label": "DATUM"
-      },
-      {
-        "start": 227,
-        "end": 235,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 428,
-        "end": 436,
-        "label": "VERTRAGSNUMMER"
-      },
-      {
-        "start": 237,
-        "end": 243,
-        "label": "VORNAME"
-      },
-      {
-        "start": 570,
-        "end": 576,
-        "label": "VORNAME"
-      },
-      {
-        "start": 244,
-        "end": 250,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 577,
-        "end": 583,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 179,
-        "end": 184,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 174,
-        "end": 178,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "129.txt",
-    "text": "Sehr geehrte Damen und Herren,\nich plane, den Energieversorger zu wechseln.\nBezüglich Ihrer Preisgarantie habe ich jedoch eine Verständnisfrage.\nSie formulieren diese wie folgt: Ausgenommen von der Preisgarantie sind \nPreisänderungen, die auf Änderungen der U-steuer sowie Preisänderungen, \ndie auf nach Vertragsabschluss während der Preisgarantie erstmals \nwirksam werdenden neuen Steuern, Abgaben oder sons\ntigen unmittelbar die Beschaffung, Erzeugung, Speicherung, Netznutzung \n(Übertragung u. Verteilung), Belieferung oder den Verbrauch von \nelektrischer Energie betreffenden Belastungen oder entsprechenden neuen \nEntlastungen beruhen.\nFrage: was bedeutet für Sie \" die Beschaffung, Erzeugung, Speicherung, \nNetznutzung\"? Ist die  von Ihnen angebotene Preisgarantie damit nicht \nerheblich eingeschränkt? Anders formuliert: Wenn sich bei der \nBeschaffung, Erzeugung, Speicherung oder Netzung die Kostenstruktur \nbelastend verändert, zieht die Preisgarantie nicht?\nM.f.G.\nLoni Scheuermann\n",
-    "labels": [
-      {
-        "start": 980,
-        "end": 991,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 975,
-        "end": 979,
-        "label": "VORNAME"
-      }
-    ]
-  },
-  {
-    "file": "132.txt",
-    "text": "Sehr geehrte Damen und Herren,\nhiermit wird der folgende Vertrag fristgerecht widerrufen.\nLieferstelle:\nMeryem Huhn\nMiroslav-Juncken-Platz 10\n04199 Bamberg\nZählernummer: 754782\nVertragspartner:\nMeryem Huhn\nMiroslav-Juncken-Platz 10\n04199 Bamberg\nBitte bestätigen Sie diesen Widerruf.\n",
-    "labels": [
-      {
-        "start": 116,
-        "end": 138,
-        "label": "STRASSE"
-      },
-      {
-        "start": 206,
-        "end": 228,
-        "label": "STRASSE"
-      },
-      {
-        "start": 148,
-        "end": 155,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 238,
-        "end": 245,
-        "label": "WOHNORT"
-      },
-      {
-        "start": 104,
-        "end": 110,
-        "label": "VORNAME"
-      },
-      {
-        "start": 194,
-        "end": 200,
-        "label": "VORNAME"
-      },
-      {
-        "start": 170,
-        "end": 176,
-        "label": "ZÄHLERNUMMER"
-      },
-      {
-        "start": 111,
-        "end": 115,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 201,
-        "end": 205,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 143,
-        "end": 147,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 233,
-        "end": 237,
-        "label": "POSTLEITZAHL"
-      },
-      {
-        "start": 139,
-        "end": 141,
-        "label": "HAUSNUMMER"
-      },
-      {
-        "start": 229,
-        "end": 231,
-        "label": "HAUSNUMMER"
-      }
-    ]
-  },
-  {
-    "file": "134.txt",
-    "text": "Sehr geehrte Damen und Herren,\nwie in o.g. Telefonat besprochen, warten wir noch immer auf unsere Gasabrechnung.\nDen Zählerstand hatte ich in besagtem Telefonat mitgeteilt: 10263 zum 24.04.2023.\nIch bitte um Rechnungserstellung bis spätestens 11.08.2023.\nVielen Dank\nMit freundlichen Grüßen\nSilvia Wähner\nDiese Nachricht wurde von meinem Android Mobiltelefon mit GMX Mail gesendet.\n",
-    "labels": [
-      {
-        "start": 305,
-        "end": 381,
-        "label": "GESENDET_MIT"
-      },
-      {
-        "start": 183,
-        "end": 194,
-        "label": "DATUM"
-      },
-      {
-        "start": 243,
-        "end": 254,
-        "label": "DATUM"
-      },
-      {
-        "start": 291,
-        "end": 297,
-        "label": "VORNAME"
-      },
-      {
-        "start": 298,
-        "end": 304,
-        "label": "NACHNAME"
-      },
-      {
-        "start": 173,
-        "end": 178,
-        "label": "ZÄHLERSTAND"
-      }
-    ]
-  }
-]
\ No newline at end of file
Index: notebooks/1_data_preparation/2_data_split/granular_data_split.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"id\": \"initial_id\",\n   \"metadata\": {\n    \"collapsed\": true,\n    \"ExecuteTime\": {\n     \"end_time\": \"2025-07-17T16:14:46.401118Z\",\n     \"start_time\": \"2025-07-17T16:14:46.374362Z\"\n    }\n   },\n   \"source\": [\n    \"#!/usr/bin/env python3\\n\",\n    \"\\\"\\\"\\\"\\n\",\n    \"Script to split JSON dataset into train/validation/test sets\\n\",\n    \"ensuring all labels appear in test set with good representation.\\n\",\n    \"\\\"\\\"\\\"\\n\",\n    \"\\n\",\n    \"import json\\n\",\n    \"import os\\n\",\n    \"import random\\n\",\n    \"from collections import defaultdict, Counter\\n\",\n    \"from typing import List, Dict, Tuple, Set\\n\",\n    \"\\n\",\n    \"def load_json_data(filepath: str) -> List[Dict]:\\n\",\n    \"    \\\"\\\"\\\"Load JSON data from file.\\\"\\\"\\\"\\n\",\n    \"    with open(filepath, 'r', encoding='utf-8') as f:\\n\",\n    \"        return json.load(f)\\n\",\n    \"\\n\",\n    \"def save_json_data(data: List[Dict], filepath: str) -> None:\\n\",\n    \"    \\\"\\\"\\\"Save data to JSON file.\\\"\\\"\\\"\\n\",\n    \"    os.makedirs(os.path.dirname(filepath), exist_ok=True)\\n\",\n    \"    with open(filepath, 'w', encoding='utf-8') as f:\\n\",\n    \"        json.dump(data, f, ensure_ascii=False, indent=2)\\n\",\n    \"\\n\",\n    \"def get_labels_from_sample(sample: Dict) -> Set[str]:\\n\",\n    \"    \\\"\\\"\\\"Extract unique labels from a sample.\\\"\\\"\\\"\\n\",\n    \"    return {label['label'] for label in sample.get('labels', [])}\\n\",\n    \"\\n\",\n    \"def analyze_label_distribution(data: List[Dict]) -> Dict[str, int]:\\n\",\n    \"    \\\"\\\"\\\"Analyze label frequency across the dataset.\\\"\\\"\\\"\\n\",\n    \"    label_counts = Counter()\\n\",\n    \"    for sample in data:\\n\",\n    \"        labels = get_labels_from_sample(sample)\\n\",\n    \"        label_counts.update(labels)\\n\",\n    \"    return dict(label_counts)\\n\",\n    \"\\n\",\n    \"def get_samples_with_labels(data: List[Dict], target_labels: Set[str]) -> List[int]:\\n\",\n    \"    \\\"\\\"\\\"Get indices of samples that contain any of the target labels.\\\"\\\"\\\"\\n\",\n    \"    indices = []\\n\",\n    \"    for i, sample in enumerate(data):\\n\",\n    \"        sample_labels = get_labels_from_sample(sample)\\n\",\n    \"        if sample_labels.intersection(target_labels):\\n\",\n    \"            indices.append(i)\\n\",\n    \"    return indices\\n\",\n    \"\\n\",\n    \"def stratified_split(data: List[Dict], test_size: int = 40, val_size: int = 25) -> Tuple[List[Dict], List[Dict], List[Dict]]:\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"    Split data ensuring all labels appear in all sets with good representation.\\n\",\n    \"\\n\",\n    \"    Strategy:\\n\",\n    \"    1. Identify all unique labels and their frequencies\\n\",\n    \"    2. Ensure each label appears in all sets (except BIC stays in training)\\n\",\n    \"    3. Use stratified approach to maintain proportional distribution\\n\",\n    \"    4. Prioritize rare labels to appear in multiple sets\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"    print(f\\\"Total samples: {len(data)}\\\")\\n\",\n    \"\\n\",\n    \"    # Analyze label distribution\\n\",\n    \"    label_counts = analyze_label_distribution(data)\\n\",\n    \"    all_labels = set(label_counts.keys())\\n\",\n    \"    print(f\\\"Total unique labels: {len(all_labels)}\\\")\\n\",\n    \"    print(f\\\"Label distribution: {label_counts}\\\")\\n\",\n    \"\\n\",\n    \"    # BIC should only be in training set\\n\",\n    \"    bic_only_labels = {'BIC'}\\n\",\n    \"    labels_for_all_sets = all_labels - bic_only_labels\\n\",\n    \"\\n\",\n    \"    # Find rare labels (appearing in <=5 samples)\\n\",\n    \"    rare_labels = {label for label, count in label_counts.items() if count <= 5}\\n\",\n    \"    print(f\\\"Rare labels (<=5 samples): {rare_labels}\\\")\\n\",\n    \"\\n\",\n    \"    # Create sample-to-labels mapping\\n\",\n    \"    sample_labels = [get_labels_from_sample(sample) for sample in data]\\n\",\n    \"\\n\",\n    \"    # Initialize sets\\n\",\n    \"    test_indices = set()\\n\",\n    \"    val_indices = set()\\n\",\n    \"    train_indices = set()\\n\",\n    \"\\n\",\n    \"    # Step 1: Distribute samples with rare labels across all sets\\n\",\n    \"    for label in rare_labels:\\n\",\n    \"        if label in bic_only_labels:\\n\",\n    \"            continue  # BIC will be handled separately\\n\",\n    \"\\n\",\n    \"        samples_with_label = [i for i, labels in enumerate(sample_labels)\\n\",\n    \"                             if label in labels]\\n\",\n    \"\\n\",\n    \"        if len(samples_with_label) == 0:\\n\",\n    \"            continue\\n\",\n    \"\\n\",\n    \"        # Ensure this rare label appears in all sets\\n\",\n    \"        random.shuffle(samples_with_label)\\n\",\n    \"\\n\",\n    \"        # Distribute: at least 1 in each set, rest proportionally\\n\",\n    \"        if len(samples_with_label) >= 3:\\n\",\n    \"            # At least 1 in each set\\n\",\n    \"            test_indices.add(samples_with_label[0])\\n\",\n    \"            val_indices.add(samples_with_label[1])\\n\",\n    \"            train_indices.add(samples_with_label[2])\\n\",\n    \"\\n\",\n    \"            # Distribute remaining proportionally\\n\",\n    \"            remaining = samples_with_label[3:]\\n\",\n    \"            if remaining:\\n\",\n    \"                # Rough proportion: 40% test, 25% val, 35% train\\n\",\n    \"                n_test = max(1, int(len(remaining) * 0.4))\\n\",\n    \"                n_val = max(1, int(len(remaining) * 0.25))\\n\",\n    \"\\n\",\n    \"                test_indices.update(remaining[:n_test])\\n\",\n    \"                val_indices.update(remaining[n_test:n_test+n_val])\\n\",\n    \"                train_indices.update(remaining[n_test+n_val:])\\n\",\n    \"        else:\\n\",\n    \"            # Very rare labels: put in training set primarily\\n\",\n    \"            train_indices.update(samples_with_label)\\n\",\n    \"\\n\",\n    \"        print(f\\\"Distributed {len(samples_with_label)} samples for rare label '{label}'\\\")\\n\",\n    \"\\n\",\n    \"    # Step 2: Handle BIC samples (only in training)\\n\",\n    \"    bic_samples = [i for i, labels in enumerate(sample_labels)\\n\",\n    \"                   if 'BIC' in labels and i not in train_indices]\\n\",\n    \"    train_indices.update(bic_samples)\\n\",\n    \"    print(f\\\"Added {len(bic_samples)} BIC samples to training set\\\")\\n\",\n    \"\\n\",\n    \"    # Step 3: Fill remaining slots with common labels\\n\",\n    \"    used_indices = test_indices | val_indices | train_indices\\n\",\n    \"    remaining_samples = [i for i in range(len(data)) if i not in used_indices]\\n\",\n    \"\\n\",\n    \"    # Shuffle for randomness\\n\",\n    \"    random.shuffle(remaining_samples)\\n\",\n    \"\\n\",\n    \"    # Calculate how many more samples we need for each set\\n\",\n    \"    test_needed = max(0, test_size - len(test_indices))\\n\",\n    \"    val_needed = max(0, val_size - len(val_indices))\\n\",\n    \"\\n\",\n    \"    # Fill test set\\n\",\n    \"    if test_needed > 0:\\n\",\n    \"        test_additional = remaining_samples[:test_needed]\\n\",\n    \"        test_indices.update(test_additional)\\n\",\n    \"        remaining_samples = remaining_samples[test_needed:]\\n\",\n    \"\\n\",\n    \"    # Fill validation set\\n\",\n    \"    if val_needed > 0:\\n\",\n    \"        val_additional = remaining_samples[:val_needed]\\n\",\n    \"        val_indices.update(val_additional)\\n\",\n    \"        remaining_samples = remaining_samples[val_needed:]\\n\",\n    \"\\n\",\n    \"    # Rest goes to training\\n\",\n    \"    train_indices.update(remaining_samples)\\n\",\n    \"\\n\",\n    \"    # Create final datasets\\n\",\n    \"    test_data = [data[i] for i in test_indices]\\n\",\n    \"    val_data = [data[i] for i in val_indices]\\n\",\n    \"    train_data = [data[i] for i in train_indices]\\n\",\n    \"\\n\",\n    \"    # Verify label distribution\\n\",\n    \"    test_labels = set()\\n\",\n    \"    val_labels = set()\\n\",\n    \"    train_labels = set()\\n\",\n    \"\\n\",\n    \"    for sample in test_data:\\n\",\n    \"        test_labels.update(get_labels_from_sample(sample))\\n\",\n    \"    for sample in val_data:\\n\",\n    \"        val_labels.update(get_labels_from_sample(sample))\\n\",\n    \"    for sample in train_data:\\n\",\n    \"        train_labels.update(get_labels_from_sample(sample))\\n\",\n    \"\\n\",\n    \"    print(f\\\"\\\\nLabel coverage:\\\")\\n\",\n    \"    print(f\\\"Test set: {len(test_labels)} labels\\\")\\n\",\n    \"    print(f\\\"Validation set: {len(val_labels)} labels\\\")\\n\",\n    \"    print(f\\\"Training set: {len(train_labels)} labels\\\")\\n\",\n    \"\\n\",\n    \"    # Check for labels missing from train/val (except BIC)\\n\",\n    \"    missing_from_test = labels_for_all_sets - test_labels\\n\",\n    \"    missing_from_val = labels_for_all_sets - val_labels\\n\",\n    \"    missing_from_train = (all_labels - train_labels)\\n\",\n    \"\\n\",\n    \"    if missing_from_test:\\n\",\n    \"        print(f\\\"Warning: Labels missing from test set: {missing_from_test}\\\")\\n\",\n    \"    if missing_from_val:\\n\",\n    \"        print(f\\\"Warning: Labels missing from validation set: {missing_from_val}\\\")\\n\",\n    \"    if missing_from_train:\\n\",\n    \"        print(f\\\"Warning: Labels missing from training set: {missing_from_train}\\\")\\n\",\n    \"\\n\",\n    \"    return train_data, val_data, test_data\\n\",\n    \"\\n\",\n    \"def print_split_statistics(train_data: List[Dict], val_data: List[Dict], test_data: List[Dict]) -> None:\\n\",\n    \"    \\\"\\\"\\\"Print statistics about the data split.\\\"\\\"\\\"\\n\",\n    \"    print(\\\"\\\\n\\\" + \\\"=\\\"*50)\\n\",\n    \"    print(\\\"DATASET SPLIT STATISTICS\\\")\\n\",\n    \"    print(\\\"=\\\"*50)\\n\",\n    \"\\n\",\n    \"    datasets = [\\n\",\n    \"        (\\\"Training\\\", train_data),\\n\",\n    \"        (\\\"Validation\\\", val_data),\\n\",\n    \"        (\\\"Test\\\", test_data)\\n\",\n    \"    ]\\n\",\n    \"\\n\",\n    \"    for name, data in datasets:\\n\",\n    \"        print(f\\\"\\\\n{name} Set:\\\")\\n\",\n    \"        print(f\\\"  Samples: {len(data)}\\\")\\n\",\n    \"\\n\",\n    \"        # Count labels\\n\",\n    \"        label_counts = analyze_label_distribution(data)\\n\",\n    \"        print(f\\\"  Unique labels: {len(label_counts)}\\\")\\n\",\n    \"        print(f\\\"  Total label instances: {sum(label_counts.values())}\\\")\\n\",\n    \"\\n\",\n    \"        # Show label distribution\\n\",\n    \"        sorted_labels = sorted(label_counts.items(), key=lambda x: x[1], reverse=True)\\n\",\n    \"        print(f\\\"  Label distribution: {dict(sorted_labels)}\\\")\\n\",\n    \"\\n\",\n    \"def main():\\n\",\n    \"    \\\"\\\"\\\"Main function to execute the dataset split.\\\"\\\"\\\"\\n\",\n    \"    # Set random seed for reproducibility\\n\",\n    \"    random.seed(42)\\n\",\n    \"\\n\",\n    \"    # Define paths\\n\",\n    \"    input_path = \\\"../../../data/original/ground_truth.json\\\"\\n\",\n    \"    output_dir = \\\"../../../data/original/ground_truth_split/\\\"\\n\",\n    \"\\n\",\n    \"    # Load data\\n\",\n    \"    print(\\\"Loading data...\\\")\\n\",\n    \"    try:\\n\",\n    \"        data = load_json_data(input_path)\\n\",\n    \"    except FileNotFoundError:\\n\",\n    \"        print(f\\\"Error: Could not find input file at {input_path}\\\")\\n\",\n    \"        return\\n\",\n    \"    except json.JSONDecodeError:\\n\",\n    \"        print(f\\\"Error: Invalid JSON in file {input_path}\\\")\\n\",\n    \"        return\\n\",\n    \"\\n\",\n    \"    print(f\\\"Loaded {len(data)} samples\\\")\\n\",\n    \"\\n\",\n    \"    # Split data\\n\",\n    \"    print(\\\"\\\\nSplitting data...\\\")\\n\",\n    \"    train_data, val_data, test_data = stratified_split(data, test_size=40, val_size=25)\\n\",\n    \"\\n\",\n    \"    # Save split datasets\\n\",\n    \"    print(f\\\"\\\\nSaving datasets to {output_dir}...\\\")\\n\",\n    \"    save_json_data(train_data, os.path.join(output_dir, \\\"train_norm.json\\\"))\\n\",\n    \"    save_json_data(val_data, os.path.join(output_dir, \\\"validation_norm.json\\\"))\\n\",\n    \"    save_json_data(test_data, os.path.join(output_dir, \\\"test_norm.json\\\"))\\n\",\n    \"\\n\",\n    \"    # Print statistics\\n\",\n    \"    print_split_statistics(train_data, val_data, test_data)\\n\",\n    \"\\n\",\n    \"    print(f\\\"\\\\n✓ Dataset split completed successfully!\\\")\\n\",\n    \"    print(f\\\"Files saved in: {output_dir}\\\")\\n\",\n    \"\\n\",\n    \"if __name__ == \\\"__main__\\\":\\n\",\n    \"    main()\"\n   ],\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Loading data...\\n\",\n      \"Loaded 160 samples\\n\",\n      \"\\n\",\n      \"Splitting data...\\n\",\n      \"Total samples: 160\\n\",\n      \"Total unique labels: 21\\n\",\n      \"Label distribution: {'GESENDET_MIT': 27, 'ZAHLUNG': 23, 'LINK': 9, 'STRASSE': 61, 'POSTLEITZAHL': 60, 'VORNAME': 144, 'WOHNORT': 60, 'VERTRAGSNUMMER': 66, 'NACHNAME': 153, 'HAUSNUMMER': 59, 'TITEL': 15, 'DATUM': 69, 'IBAN': 6, 'TELEFONNUMMER': 33, 'ZÄHLERNUMMER': 34, 'ZÄHLERSTAND': 12, 'FAX': 5, 'FIRMA': 21, 'BANK': 3, 'BIC': 1, 'EMAIL': 13}\\n\",\n      \"Rare labels (<=5 samples): {'FAX', 'BIC', 'BANK'}\\n\",\n      \"Distributed 5 samples for rare label 'FAX'\\n\",\n      \"Distributed 3 samples for rare label 'BANK'\\n\",\n      \"Added 0 BIC samples to training set\\n\",\n      \"\\n\",\n      \"Label coverage:\\n\",\n      \"Test set: 20 labels\\n\",\n      \"Validation set: 20 labels\\n\",\n      \"Training set: 21 labels\\n\",\n      \"\\n\",\n      \"Saving datasets to ../../../data/original/ground_truth_split/...\\n\",\n      \"\\n\",\n      \"==================================================\\n\",\n      \"DATASET SPLIT STATISTICS\\n\",\n      \"==================================================\\n\",\n      \"\\n\",\n      \"Training Set:\\n\",\n      \"  Samples: 95\\n\",\n      \"  Unique labels: 21\\n\",\n      \"  Total label instances: 527\\n\",\n      \"  Label distribution: {'NACHNAME': 91, 'VORNAME': 86, 'STRASSE': 42, 'POSTLEITZAHL': 40, 'WOHNORT': 40, 'HAUSNUMMER': 40, 'VERTRAGSNUMMER': 37, 'DATUM': 36, 'ZÄHLERNUMMER': 24, 'TELEFONNUMMER': 19, 'GESENDET_MIT': 16, 'ZAHLUNG': 12, 'FIRMA': 11, 'TITEL': 8, 'EMAIL': 8, 'ZÄHLERSTAND': 7, 'LINK': 5, 'IBAN': 2, 'BANK': 1, 'BIC': 1, 'FAX': 1}\\n\",\n      \"\\n\",\n      \"Validation Set:\\n\",\n      \"  Samples: 25\\n\",\n      \"  Unique labels: 20\\n\",\n      \"  Total label instances: 128\\n\",\n      \"  Label distribution: {'NACHNAME': 24, 'VORNAME': 20, 'DATUM': 14, 'VERTRAGSNUMMER': 13, 'STRASSE': 6, 'POSTLEITZAHL': 6, 'WOHNORT': 6, 'HAUSNUMMER': 6, 'FIRMA': 5, 'GESENDET_MIT': 5, 'ZAHLUNG': 5, 'ZÄHLERNUMMER': 4, 'TELEFONNUMMER': 3, 'TITEL': 3, 'FAX': 2, 'ZÄHLERSTAND': 2, 'BANK': 1, 'IBAN': 1, 'LINK': 1, 'EMAIL': 1}\\n\",\n      \"\\n\",\n      \"Test Set:\\n\",\n      \"  Samples: 40\\n\",\n      \"  Unique labels: 20\\n\",\n      \"  Total label instances: 219\\n\",\n      \"  Label distribution: {'NACHNAME': 38, 'VORNAME': 38, 'DATUM': 19, 'VERTRAGSNUMMER': 16, 'POSTLEITZAHL': 14, 'WOHNORT': 14, 'STRASSE': 13, 'HAUSNUMMER': 13, 'TELEFONNUMMER': 11, 'GESENDET_MIT': 6, 'ZAHLUNG': 6, 'ZÄHLERNUMMER': 6, 'FIRMA': 5, 'TITEL': 4, 'EMAIL': 4, 'LINK': 3, 'IBAN': 3, 'ZÄHLERSTAND': 3, 'FAX': 2, 'BANK': 1}\\n\",\n      \"\\n\",\n      \"✓ Dataset split completed successfully!\\n\",\n      \"Files saved in: ../../../data/original/ground_truth_split/\\n\"\n     ]\n    }\n   ],\n   \"execution_count\": 9\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \".venv\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.11.9\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notebooks/1_data_preparation/2_data_split/granular_data_split.ipynb b/notebooks/1_data_preparation/2_data_split/granular_data_split.ipynb
--- a/notebooks/1_data_preparation/2_data_split/granular_data_split.ipynb	(revision 68e3fd01408523769b50e7566e6fd0db7c5afb8a)
+++ b/notebooks/1_data_preparation/2_data_split/granular_data_split.ipynb	(date 1754049828929)
@@ -1,338 +1,268 @@
-{
- "cells": [
-  {
-   "cell_type": "code",
-   "id": "initial_id",
-   "metadata": {
-    "collapsed": true,
-    "ExecuteTime": {
-     "end_time": "2025-07-17T16:14:46.401118Z",
-     "start_time": "2025-07-17T16:14:46.374362Z"
-    }
-   },
-   "source": [
-    "#!/usr/bin/env python3\n",
-    "\"\"\"\n",
-    "Script to split JSON dataset into train/validation/test sets\n",
-    "ensuring all labels appear in test set with good representation.\n",
-    "\"\"\"\n",
-    "\n",
-    "import json\n",
-    "import os\n",
-    "import random\n",
-    "from collections import defaultdict, Counter\n",
-    "from typing import List, Dict, Tuple, Set\n",
-    "\n",
-    "def load_json_data(filepath: str) -> List[Dict]:\n",
-    "    \"\"\"Load JSON data from file.\"\"\"\n",
-    "    with open(filepath, 'r', encoding='utf-8') as f:\n",
-    "        return json.load(f)\n",
-    "\n",
-    "def save_json_data(data: List[Dict], filepath: str) -> None:\n",
-    "    \"\"\"Save data to JSON file.\"\"\"\n",
-    "    os.makedirs(os.path.dirname(filepath), exist_ok=True)\n",
-    "    with open(filepath, 'w', encoding='utf-8') as f:\n",
-    "        json.dump(data, f, ensure_ascii=False, indent=2)\n",
-    "\n",
-    "def get_labels_from_sample(sample: Dict) -> Set[str]:\n",
-    "    \"\"\"Extract unique labels from a sample.\"\"\"\n",
-    "    return {label['label'] for label in sample.get('labels', [])}\n",
-    "\n",
-    "def analyze_label_distribution(data: List[Dict]) -> Dict[str, int]:\n",
-    "    \"\"\"Analyze label frequency across the dataset.\"\"\"\n",
-    "    label_counts = Counter()\n",
-    "    for sample in data:\n",
-    "        labels = get_labels_from_sample(sample)\n",
-    "        label_counts.update(labels)\n",
-    "    return dict(label_counts)\n",
-    "\n",
-    "def get_samples_with_labels(data: List[Dict], target_labels: Set[str]) -> List[int]:\n",
-    "    \"\"\"Get indices of samples that contain any of the target labels.\"\"\"\n",
-    "    indices = []\n",
-    "    for i, sample in enumerate(data):\n",
-    "        sample_labels = get_labels_from_sample(sample)\n",
-    "        if sample_labels.intersection(target_labels):\n",
-    "            indices.append(i)\n",
-    "    return indices\n",
-    "\n",
-    "def stratified_split(data: List[Dict], test_size: int = 40, val_size: int = 25) -> Tuple[List[Dict], List[Dict], List[Dict]]:\n",
-    "    \"\"\"\n",
-    "    Split data ensuring all labels appear in all sets with good representation.\n",
-    "\n",
-    "    Strategy:\n",
-    "    1. Identify all unique labels and their frequencies\n",
-    "    2. Ensure each label appears in all sets (except BIC stays in training)\n",
-    "    3. Use stratified approach to maintain proportional distribution\n",
-    "    4. Prioritize rare labels to appear in multiple sets\n",
-    "    \"\"\"\n",
-    "    print(f\"Total samples: {len(data)}\")\n",
-    "\n",
-    "    # Analyze label distribution\n",
-    "    label_counts = analyze_label_distribution(data)\n",
-    "    all_labels = set(label_counts.keys())\n",
-    "    print(f\"Total unique labels: {len(all_labels)}\")\n",
-    "    print(f\"Label distribution: {label_counts}\")\n",
-    "\n",
-    "    # BIC should only be in training set\n",
-    "    bic_only_labels = {'BIC'}\n",
-    "    labels_for_all_sets = all_labels - bic_only_labels\n",
-    "\n",
-    "    # Find rare labels (appearing in <=5 samples)\n",
-    "    rare_labels = {label for label, count in label_counts.items() if count <= 5}\n",
-    "    print(f\"Rare labels (<=5 samples): {rare_labels}\")\n",
-    "\n",
-    "    # Create sample-to-labels mapping\n",
-    "    sample_labels = [get_labels_from_sample(sample) for sample in data]\n",
-    "\n",
-    "    # Initialize sets\n",
-    "    test_indices = set()\n",
-    "    val_indices = set()\n",
-    "    train_indices = set()\n",
-    "\n",
-    "    # Step 1: Distribute samples with rare labels across all sets\n",
-    "    for label in rare_labels:\n",
-    "        if label in bic_only_labels:\n",
-    "            continue  # BIC will be handled separately\n",
-    "\n",
-    "        samples_with_label = [i for i, labels in enumerate(sample_labels)\n",
-    "                             if label in labels]\n",
-    "\n",
-    "        if len(samples_with_label) == 0:\n",
-    "            continue\n",
-    "\n",
-    "        # Ensure this rare label appears in all sets\n",
-    "        random.shuffle(samples_with_label)\n",
-    "\n",
-    "        # Distribute: at least 1 in each set, rest proportionally\n",
-    "        if len(samples_with_label) >= 3:\n",
-    "            # At least 1 in each set\n",
-    "            test_indices.add(samples_with_label[0])\n",
-    "            val_indices.add(samples_with_label[1])\n",
-    "            train_indices.add(samples_with_label[2])\n",
-    "\n",
-    "            # Distribute remaining proportionally\n",
-    "            remaining = samples_with_label[3:]\n",
-    "            if remaining:\n",
-    "                # Rough proportion: 40% test, 25% val, 35% train\n",
-    "                n_test = max(1, int(len(remaining) * 0.4))\n",
-    "                n_val = max(1, int(len(remaining) * 0.25))\n",
-    "\n",
-    "                test_indices.update(remaining[:n_test])\n",
-    "                val_indices.update(remaining[n_test:n_test+n_val])\n",
-    "                train_indices.update(remaining[n_test+n_val:])\n",
-    "        else:\n",
-    "            # Very rare labels: put in training set primarily\n",
-    "            train_indices.update(samples_with_label)\n",
-    "\n",
-    "        print(f\"Distributed {len(samples_with_label)} samples for rare label '{label}'\")\n",
-    "\n",
-    "    # Step 2: Handle BIC samples (only in training)\n",
-    "    bic_samples = [i for i, labels in enumerate(sample_labels)\n",
-    "                   if 'BIC' in labels and i not in train_indices]\n",
-    "    train_indices.update(bic_samples)\n",
-    "    print(f\"Added {len(bic_samples)} BIC samples to training set\")\n",
-    "\n",
-    "    # Step 3: Fill remaining slots with common labels\n",
-    "    used_indices = test_indices | val_indices | train_indices\n",
-    "    remaining_samples = [i for i in range(len(data)) if i not in used_indices]\n",
-    "\n",
-    "    # Shuffle for randomness\n",
-    "    random.shuffle(remaining_samples)\n",
-    "\n",
-    "    # Calculate how many more samples we need for each set\n",
-    "    test_needed = max(0, test_size - len(test_indices))\n",
-    "    val_needed = max(0, val_size - len(val_indices))\n",
-    "\n",
-    "    # Fill test set\n",
-    "    if test_needed > 0:\n",
-    "        test_additional = remaining_samples[:test_needed]\n",
-    "        test_indices.update(test_additional)\n",
-    "        remaining_samples = remaining_samples[test_needed:]\n",
-    "\n",
-    "    # Fill validation set\n",
-    "    if val_needed > 0:\n",
-    "        val_additional = remaining_samples[:val_needed]\n",
-    "        val_indices.update(val_additional)\n",
-    "        remaining_samples = remaining_samples[val_needed:]\n",
-    "\n",
-    "    # Rest goes to training\n",
-    "    train_indices.update(remaining_samples)\n",
-    "\n",
-    "    # Create final datasets\n",
-    "    test_data = [data[i] for i in test_indices]\n",
-    "    val_data = [data[i] for i in val_indices]\n",
-    "    train_data = [data[i] for i in train_indices]\n",
-    "\n",
-    "    # Verify label distribution\n",
-    "    test_labels = set()\n",
-    "    val_labels = set()\n",
-    "    train_labels = set()\n",
-    "\n",
-    "    for sample in test_data:\n",
-    "        test_labels.update(get_labels_from_sample(sample))\n",
-    "    for sample in val_data:\n",
-    "        val_labels.update(get_labels_from_sample(sample))\n",
-    "    for sample in train_data:\n",
-    "        train_labels.update(get_labels_from_sample(sample))\n",
-    "\n",
-    "    print(f\"\\nLabel coverage:\")\n",
-    "    print(f\"Test set: {len(test_labels)} labels\")\n",
-    "    print(f\"Validation set: {len(val_labels)} labels\")\n",
-    "    print(f\"Training set: {len(train_labels)} labels\")\n",
-    "\n",
-    "    # Check for labels missing from train/val (except BIC)\n",
-    "    missing_from_test = labels_for_all_sets - test_labels\n",
-    "    missing_from_val = labels_for_all_sets - val_labels\n",
-    "    missing_from_train = (all_labels - train_labels)\n",
-    "\n",
-    "    if missing_from_test:\n",
-    "        print(f\"Warning: Labels missing from test set: {missing_from_test}\")\n",
-    "    if missing_from_val:\n",
-    "        print(f\"Warning: Labels missing from validation set: {missing_from_val}\")\n",
-    "    if missing_from_train:\n",
-    "        print(f\"Warning: Labels missing from training set: {missing_from_train}\")\n",
-    "\n",
-    "    return train_data, val_data, test_data\n",
-    "\n",
-    "def print_split_statistics(train_data: List[Dict], val_data: List[Dict], test_data: List[Dict]) -> None:\n",
-    "    \"\"\"Print statistics about the data split.\"\"\"\n",
-    "    print(\"\\n\" + \"=\"*50)\n",
-    "    print(\"DATASET SPLIT STATISTICS\")\n",
-    "    print(\"=\"*50)\n",
-    "\n",
-    "    datasets = [\n",
-    "        (\"Training\", train_data),\n",
-    "        (\"Validation\", val_data),\n",
-    "        (\"Test\", test_data)\n",
-    "    ]\n",
-    "\n",
-    "    for name, data in datasets:\n",
-    "        print(f\"\\n{name} Set:\")\n",
-    "        print(f\"  Samples: {len(data)}\")\n",
-    "\n",
-    "        # Count labels\n",
-    "        label_counts = analyze_label_distribution(data)\n",
-    "        print(f\"  Unique labels: {len(label_counts)}\")\n",
-    "        print(f\"  Total label instances: {sum(label_counts.values())}\")\n",
-    "\n",
-    "        # Show label distribution\n",
-    "        sorted_labels = sorted(label_counts.items(), key=lambda x: x[1], reverse=True)\n",
-    "        print(f\"  Label distribution: {dict(sorted_labels)}\")\n",
-    "\n",
-    "def main():\n",
-    "    \"\"\"Main function to execute the dataset split.\"\"\"\n",
-    "    # Set random seed for reproducibility\n",
-    "    random.seed(42)\n",
-    "\n",
-    "    # Define paths\n",
-    "    input_path = \"../../../data/original/ground_truth.json\"\n",
-    "    output_dir = \"../../../data/original/ground_truth_split/\"\n",
-    "\n",
-    "    # Load data\n",
-    "    print(\"Loading data...\")\n",
-    "    try:\n",
-    "        data = load_json_data(input_path)\n",
-    "    except FileNotFoundError:\n",
-    "        print(f\"Error: Could not find input file at {input_path}\")\n",
-    "        return\n",
-    "    except json.JSONDecodeError:\n",
-    "        print(f\"Error: Invalid JSON in file {input_path}\")\n",
-    "        return\n",
-    "\n",
-    "    print(f\"Loaded {len(data)} samples\")\n",
-    "\n",
-    "    # Split data\n",
-    "    print(\"\\nSplitting data...\")\n",
-    "    train_data, val_data, test_data = stratified_split(data, test_size=40, val_size=25)\n",
-    "\n",
-    "    # Save split datasets\n",
-    "    print(f\"\\nSaving datasets to {output_dir}...\")\n",
-    "    save_json_data(train_data, os.path.join(output_dir, \"train_norm.json\"))\n",
-    "    save_json_data(val_data, os.path.join(output_dir, \"validation_norm.json\"))\n",
-    "    save_json_data(test_data, os.path.join(output_dir, \"test_norm.json\"))\n",
-    "\n",
-    "    # Print statistics\n",
-    "    print_split_statistics(train_data, val_data, test_data)\n",
-    "\n",
-    "    print(f\"\\n✓ Dataset split completed successfully!\")\n",
-    "    print(f\"Files saved in: {output_dir}\")\n",
-    "\n",
-    "if __name__ == \"__main__\":\n",
-    "    main()"
-   ],
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Loading data...\n",
-      "Loaded 160 samples\n",
-      "\n",
-      "Splitting data...\n",
-      "Total samples: 160\n",
-      "Total unique labels: 21\n",
-      "Label distribution: {'GESENDET_MIT': 27, 'ZAHLUNG': 23, 'LINK': 9, 'STRASSE': 61, 'POSTLEITZAHL': 60, 'VORNAME': 144, 'WOHNORT': 60, 'VERTRAGSNUMMER': 66, 'NACHNAME': 153, 'HAUSNUMMER': 59, 'TITEL': 15, 'DATUM': 69, 'IBAN': 6, 'TELEFONNUMMER': 33, 'ZÄHLERNUMMER': 34, 'ZÄHLERSTAND': 12, 'FAX': 5, 'FIRMA': 21, 'BANK': 3, 'BIC': 1, 'EMAIL': 13}\n",
-      "Rare labels (<=5 samples): {'FAX', 'BIC', 'BANK'}\n",
-      "Distributed 5 samples for rare label 'FAX'\n",
-      "Distributed 3 samples for rare label 'BANK'\n",
-      "Added 0 BIC samples to training set\n",
-      "\n",
-      "Label coverage:\n",
-      "Test set: 20 labels\n",
-      "Validation set: 20 labels\n",
-      "Training set: 21 labels\n",
-      "\n",
-      "Saving datasets to ../../../data/original/ground_truth_split/...\n",
-      "\n",
-      "==================================================\n",
-      "DATASET SPLIT STATISTICS\n",
-      "==================================================\n",
-      "\n",
-      "Training Set:\n",
-      "  Samples: 95\n",
-      "  Unique labels: 21\n",
-      "  Total label instances: 527\n",
-      "  Label distribution: {'NACHNAME': 91, 'VORNAME': 86, 'STRASSE': 42, 'POSTLEITZAHL': 40, 'WOHNORT': 40, 'HAUSNUMMER': 40, 'VERTRAGSNUMMER': 37, 'DATUM': 36, 'ZÄHLERNUMMER': 24, 'TELEFONNUMMER': 19, 'GESENDET_MIT': 16, 'ZAHLUNG': 12, 'FIRMA': 11, 'TITEL': 8, 'EMAIL': 8, 'ZÄHLERSTAND': 7, 'LINK': 5, 'IBAN': 2, 'BANK': 1, 'BIC': 1, 'FAX': 1}\n",
-      "\n",
-      "Validation Set:\n",
-      "  Samples: 25\n",
-      "  Unique labels: 20\n",
-      "  Total label instances: 128\n",
-      "  Label distribution: {'NACHNAME': 24, 'VORNAME': 20, 'DATUM': 14, 'VERTRAGSNUMMER': 13, 'STRASSE': 6, 'POSTLEITZAHL': 6, 'WOHNORT': 6, 'HAUSNUMMER': 6, 'FIRMA': 5, 'GESENDET_MIT': 5, 'ZAHLUNG': 5, 'ZÄHLERNUMMER': 4, 'TELEFONNUMMER': 3, 'TITEL': 3, 'FAX': 2, 'ZÄHLERSTAND': 2, 'BANK': 1, 'IBAN': 1, 'LINK': 1, 'EMAIL': 1}\n",
-      "\n",
-      "Test Set:\n",
-      "  Samples: 40\n",
-      "  Unique labels: 20\n",
-      "  Total label instances: 219\n",
-      "  Label distribution: {'NACHNAME': 38, 'VORNAME': 38, 'DATUM': 19, 'VERTRAGSNUMMER': 16, 'POSTLEITZAHL': 14, 'WOHNORT': 14, 'STRASSE': 13, 'HAUSNUMMER': 13, 'TELEFONNUMMER': 11, 'GESENDET_MIT': 6, 'ZAHLUNG': 6, 'ZÄHLERNUMMER': 6, 'FIRMA': 5, 'TITEL': 4, 'EMAIL': 4, 'LINK': 3, 'IBAN': 3, 'ZÄHLERSTAND': 3, 'FAX': 2, 'BANK': 1}\n",
-      "\n",
-      "✓ Dataset split completed successfully!\n",
-      "Files saved in: ../../../data/original/ground_truth_split/\n"
-     ]
-    }
-   ],
-   "execution_count": 9
-  }
- ],
- "metadata": {
-  "kernelspec": {
-   "display_name": ".venv",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.11.9"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 5
-}
+#%% md
+# Dataset Descriptives Analysis
+
+This notebook loads multiple JSON ground-truth label datasets, computes summary statistics (unique labels, label counts, samples per label, labels per sample, missing labels) for each individual dataset and combined, and creates publication-quality plots plus a summary table.
+
+**Inputs:** paths to JSON files containing lists of samples; each sample is expected to have a `labels` field which is a list of dictionaries with a `'label'` key.
+
+**Outputs:**
+- PDF plots: overall label distribution, dataset comparisons (counts and percentages), labels-per-sample histogram, label coverage.
+- Summary CSV/table with combined and individual metrics.
+
+**Main flow:**
+1. `load_all_datasets`: loads and validates datasets.
+2. `analyze_dataset`: safely extracts labels and computes metrics.
+3. `create_publication_plots`: generates and saves the visualizations.
+4. `create_summary_table`: builds the summary DataFrame.
+5. `analyze_full_dataset`: orchestrates the steps and persists results.
+
+**Assumptions / notes:** label presence per sample is deduplicated (i.e., multiple identical labels in one sample count once), malformed label entries are filtered out, and missing labels are reported.
+#%%
+#!/usr/bin/env python3
+"""
+Script to split JSON dataset into train/validation/test sets
+ensuring all labels appear in test set with good representation.
+"""
+
+import json
+import os
+import random
+from collections import defaultdict, Counter
+from typing import List, Dict, Tuple, Set
+
+def load_json_data(filepath: str) -> List[Dict]:
+    """Load JSON data from file."""
+    with open(filepath, 'r', encoding='utf-8') as f:
+        return json.load(f)
+
+def save_json_data(data: List[Dict], filepath: str) -> None:
+    """Save data to JSON file."""
+    os.makedirs(os.path.dirname(filepath), exist_ok=True)
+    with open(filepath, 'w', encoding='utf-8') as f:
+        json.dump(data, f, ensure_ascii=False, indent=2)
+
+def get_labels_from_sample(sample: Dict) -> Set[str]:
+    """Extract unique labels from a sample."""
+    return {label['label'] for label in sample.get('labels', [])}
+
+def analyze_label_distribution(data: List[Dict]) -> Dict[str, int]:
+    """Analyze label frequency across the dataset."""
+    label_counts = Counter()
+    for sample in data:
+        labels = get_labels_from_sample(sample)
+        label_counts.update(labels)
+    return dict(label_counts)
+
+def get_samples_with_labels(data: List[Dict], target_labels: Set[str]) -> List[int]:
+    """Get indices of samples that contain any of the target labels."""
+    indices = []
+    for i, sample in enumerate(data):
+        sample_labels = get_labels_from_sample(sample)
+        if sample_labels.intersection(target_labels):
+            indices.append(i)
+    return indices
+
+def stratified_split(data: List[Dict], test_size: int = 40, val_size: int = 25) -> Tuple[List[Dict], List[Dict], List[Dict]]:
+    """
+    Split data ensuring all labels appear in all sets with good representation.
+
+    Strategy:
+    1. Identify all unique labels and their frequencies
+    2. Ensure each label appears in all sets (except BIC stays in training)
+    3. Use stratified approach to maintain proportional distribution
+    4. Prioritize rare labels to appear in multiple sets
+    """
+    print(f"Total samples: {len(data)}")
+
+    # Analyze label distribution
+    label_counts = analyze_label_distribution(data)
+    all_labels = set(label_counts.keys())
+    print(f"Total unique labels: {len(all_labels)}")
+    print(f"Label distribution: {label_counts}")
+
+    # BIC should only be in training set
+    bic_only_labels = {'BIC'}
+    labels_for_all_sets = all_labels - bic_only_labels
+
+    # Find rare labels (appearing in <=5 samples)
+    rare_labels = {label for label, count in label_counts.items() if count <= 5}
+    print(f"Rare labels (<=5 samples): {rare_labels}")
+
+    # Create sample-to-labels mapping
+    sample_labels = [get_labels_from_sample(sample) for sample in data]
+
+    # Initialize sets
+    test_indices = set()
+    val_indices = set()
+    train_indices = set()
+
+    # Step 1: Distribute samples with rare labels across all sets
+    for label in rare_labels:
+        if label in bic_only_labels:
+            continue  # BIC will be handled separately
+
+        samples_with_label = [i for i, labels in enumerate(sample_labels)
+                             if label in labels]
+
+        if len(samples_with_label) == 0:
+            continue
+
+        # Ensure this rare label appears in all sets
+        random.shuffle(samples_with_label)
+
+        # Distribute: at least 1 in each set, rest proportionally
+        if len(samples_with_label) >= 3:
+            # At least 1 in each set
+            test_indices.add(samples_with_label[0])
+            val_indices.add(samples_with_label[1])
+            train_indices.add(samples_with_label[2])
+
+            # Distribute remaining proportionally
+            remaining = samples_with_label[3:]
+            if remaining:
+                # Rough proportion: 40% test, 25% val, 35% train
+                n_test = max(1, int(len(remaining) * 0.4))
+                n_val = max(1, int(len(remaining) * 0.25))
+
+                test_indices.update(remaining[:n_test])
+                val_indices.update(remaining[n_test:n_test+n_val])
+                train_indices.update(remaining[n_test+n_val:])
+        else:
+            # Very rare labels: put in training set primarily
+            train_indices.update(samples_with_label)
+
+        print(f"Distributed {len(samples_with_label)} samples for rare label '{label}'")
+
+    # Step 2: Handle BIC samples (only in training)
+    bic_samples = [i for i, labels in enumerate(sample_labels)
+                   if 'BIC' in labels and i not in train_indices]
+    train_indices.update(bic_samples)
+    print(f"Added {len(bic_samples)} BIC samples to training set")
+
+    # Step 3: Fill remaining slots with common labels
+    used_indices = test_indices | val_indices | train_indices
+    remaining_samples = [i for i in range(len(data)) if i not in used_indices]
+
+    # Shuffle for randomness
+    random.shuffle(remaining_samples)
+
+    # Calculate how many more samples we need for each set
+    test_needed = max(0, test_size - len(test_indices))
+    val_needed = max(0, val_size - len(val_indices))
+
+    # Fill test set
+    if test_needed > 0:
+        test_additional = remaining_samples[:test_needed]
+        test_indices.update(test_additional)
+        remaining_samples = remaining_samples[test_needed:]
+
+    # Fill validation set
+    if val_needed > 0:
+        val_additional = remaining_samples[:val_needed]
+        val_indices.update(val_additional)
+        remaining_samples = remaining_samples[val_needed:]
+
+    # Rest goes to training
+    train_indices.update(remaining_samples)
+
+    # Create final datasets
+    test_data = [data[i] for i in test_indices]
+    val_data = [data[i] for i in val_indices]
+    train_data = [data[i] for i in train_indices]
+
+    # Verify label distribution
+    test_labels = set()
+    val_labels = set()
+    train_labels = set()
+
+    for sample in test_data:
+        test_labels.update(get_labels_from_sample(sample))
+    for sample in val_data:
+        val_labels.update(get_labels_from_sample(sample))
+    for sample in train_data:
+        train_labels.update(get_labels_from_sample(sample))
+
+    print(f"\nLabel coverage:")
+    print(f"Test set: {len(test_labels)} labels")
+    print(f"Validation set: {len(val_labels)} labels")
+    print(f"Training set: {len(train_labels)} labels")
+
+    # Check for labels missing from train/val (except BIC)
+    missing_from_test = labels_for_all_sets - test_labels
+    missing_from_val = labels_for_all_sets - val_labels
+    missing_from_train = (all_labels - train_labels)
+
+    if missing_from_test:
+        print(f"Warning: Labels missing from test set: {missing_from_test}")
+    if missing_from_val:
+        print(f"Warning: Labels missing from validation set: {missing_from_val}")
+    if missing_from_train:
+        print(f"Warning: Labels missing from training set: {missing_from_train}")
+
+    return train_data, val_data, test_data
+
+def print_split_statistics(train_data: List[Dict], val_data: List[Dict], test_data: List[Dict]) -> None:
+    """Print statistics about the data split."""
+    print("\n" + "="*50)
+    print("DATASET SPLIT STATISTICS")
+    print("="*50)
+
+    datasets = [
+        ("Training", train_data),
+        ("Validation", val_data),
+        ("Test", test_data)
+    ]
+
+    for name, data in datasets:
+        print(f"\n{name} Set:")
+        print(f"  Samples: {len(data)}")
+
+        # Count labels
+        label_counts = analyze_label_distribution(data)
+        print(f"  Unique labels: {len(label_counts)}")
+        print(f"  Total label instances: {sum(label_counts.values())}")
+
+        # Show label distribution
+        sorted_labels = sorted(label_counts.items(), key=lambda x: x[1], reverse=True)
+        print(f"  Label distribution: {dict(sorted_labels)}")
+
+def main():
+    """Main function to execute the dataset split."""
+    # Set random seed for reproducibility
+    random.seed(42)
+
+    # Define paths
+    input_path = "../../../data/original/ground_truth.json"
+    output_dir = "../../../data/original/ground_truth_split/"
+
+    # Load data
+    print("Loading data...")
+    try:
+        data = load_json_data(input_path)
+    except FileNotFoundError:
+        print(f"Error: Could not find input file at {input_path}")
+        return
+    except json.JSONDecodeError:
+        print(f"Error: Invalid JSON in file {input_path}")
+        return
+
+    print(f"Loaded {len(data)} samples")
+
+    # Split data
+    print("\nSplitting data...")
+    train_data, val_data, test_data = stratified_split(data, test_size=40, val_size=25)
+
+    # Save split datasets
+    print(f"\nSaving datasets to {output_dir}...")
+    save_json_data(train_data, os.path.join(output_dir, "train_norm.json"))
+    save_json_data(val_data, os.path.join(output_dir, "validation_norm.json"))
+    save_json_data(test_data, os.path.join(output_dir, "test_norm.json"))
+
+    # Print statistics
+    print_split_statistics(train_data, val_data, test_data)
+
+    print(f"\n✓ Dataset split completed successfully!")
+    print(f"Files saved in: {output_dir}")
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
Index: notebooks/3_model_training_and_testing/piiranha/piiranha_start.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"metadata\": {\n    \"ExecuteTime\": {\n     \"end_time\": \"2025-07-15T14:29:38.750885Z\",\n     \"start_time\": \"2025-07-15T14:29:37.944092Z\"\n    }\n   },\n   \"cell_type\": \"code\",\n   \"source\": [\n    \"!pip install transformers\\n\",\n    \"# pip install ipywidgets\"\n   ],\n   \"id\": \"5334b350df77b30e\",\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Requirement already satisfied: transformers in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (4.52.4)\\r\\n\",\n      \"Requirement already satisfied: filelock in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from transformers) (3.18.0)\\r\\n\",\n      \"Requirement already satisfied: huggingface-hub<1.0,>=0.30.0 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from transformers) (0.32.6)\\r\\n\",\n      \"Requirement already satisfied: numpy>=1.17 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from transformers) (2.3.0)\\r\\n\",\n      \"Requirement already satisfied: packaging>=20.0 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from transformers) (25.0)\\r\\n\",\n      \"Requirement already satisfied: pyyaml>=5.1 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from transformers) (6.0.2)\\r\\n\",\n      \"Requirement already satisfied: regex!=2019.12.17 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from transformers) (2024.11.6)\\r\\n\",\n      \"Requirement already satisfied: requests in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from transformers) (2.32.4)\\r\\n\",\n      \"Requirement already satisfied: tokenizers<0.22,>=0.21 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from transformers) (0.21.1)\\r\\n\",\n      \"Requirement already satisfied: safetensors>=0.4.3 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from transformers) (0.5.3)\\r\\n\",\n      \"Requirement already satisfied: tqdm>=4.27 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from transformers) (4.67.1)\\r\\n\",\n      \"Requirement already satisfied: fsspec>=2023.5.0 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from huggingface-hub<1.0,>=0.30.0->transformers) (2025.5.1)\\r\\n\",\n      \"Requirement already satisfied: typing-extensions>=3.7.4.3 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from huggingface-hub<1.0,>=0.30.0->transformers) (4.14.0)\\r\\n\",\n      \"Requirement already satisfied: hf-xet<2.0.0,>=1.1.2 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from huggingface-hub<1.0,>=0.30.0->transformers) (1.1.3)\\r\\n\",\n      \"Requirement already satisfied: charset_normalizer<4,>=2 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from requests->transformers) (3.4.2)\\r\\n\",\n      \"Requirement already satisfied: idna<4,>=2.5 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from requests->transformers) (3.10)\\r\\n\",\n      \"Requirement already satisfied: urllib3<3,>=1.21.1 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from requests->transformers) (2.4.0)\\r\\n\",\n      \"Requirement already satisfied: certifi>=2017.4.17 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from requests->transformers) (2025.4.26)\\r\\n\"\n     ]\n    }\n   ],\n   \"execution_count\": 1\n  },\n  {\n   \"metadata\": {},\n   \"cell_type\": \"markdown\",\n   \"source\": \"## Import Piiranha Model from Huggingfase and Map the Piiranha Labels to our Custom Labels\",\n   \"id\": \"60bc199eaef4d8\"\n  },\n  {\n   \"cell_type\": \"code\",\n   \"id\": \"initial_id\",\n   \"metadata\": {\n    \"collapsed\": true,\n    \"ExecuteTime\": {\n     \"end_time\": \"2025-07-15T14:29:46.260509Z\",\n     \"start_time\": \"2025-07-15T14:29:41.534492Z\"\n    }\n   },\n   \"source\": [\n    \"import torch\\n\",\n    \"from transformers import AutoTokenizer, AutoModelForTokenClassification\\n\",\n    \"\\n\",\n    \"# Load model and tokenizer\\n\",\n    \"model_name = \\\"iiiorg/piiranha-v1-detect-personal-information\\\"\\n\",\n    \"tokenizer = AutoTokenizer.from_pretrained(model_name)\\n\",\n    \"model = AutoModelForTokenClassification.from_pretrained(model_name)\\n\",\n    \"\\n\",\n    \"device = torch.device(\\\"cuda\\\" if torch.cuda.is_available() else \\\"cpu\\\")\\n\",\n    \"model.to(device)\\n\",\n    \"\\n\",\n    \"# Label mapping: PIIRANHA → your schema\\n\",\n    \"PIIRANHA_TO_CUSTOM = {\\n\",\n    \"    \\\"GIVENNAME\\\": \\\"VORNAME\\\",\\n\",\n    \"    \\\"SURNAME\\\": \\\"NACHNAME\\\",\\n\",\n    \"    \\\"USERNAME\\\": \\\"NACHNAME\\\",  # no \\\"username\\\" slot, fall back to surname\\n\",\n    \"    \\\"ACCOUNTNUM\\\": \\\"VERTRAGSNUMMER\\\",\\n\",\n    \"    \\\"CREDITCARDNUMBER\\\": \\\"VERTRAGSNUMMER\\\",\\n\",\n    \"    \\\"BUILDINGNUM\\\": \\\"HAUSNUMMER\\\",\\n\",\n    \"    \\\"STREET\\\": \\\"STRASSE\\\",\\n\",\n    \"    \\\"CITY\\\": \\\"WOHNORT\\\",\\n\",\n    \"    \\\"STATE\\\": \\\"WOHNORT\\\",  # treat state like city\\n\",\n    \"    \\\"ZIPCODE\\\": \\\"POSTLEITZAHL\\\",\\n\",\n    \"    \\\"LOCATION\\\": \\\"WOHNORT\\\",\\n\",\n    \"    \\\"DATEOFBIRTH\\\": \\\"DATUM\\\",\\n\",\n    \"    \\\"DATE\\\": \\\"DATUM\\\",\\n\",\n    \"    \\\"EMAIL\\\": \\\"EMAIL\\\",\\n\",\n    \"    \\\"PHONENUMBER\\\": \\\"TELEFONNUMMER\\\",\\n\",\n    \"    \\\"TELEPHONENUM\\\": \\\"TELEFONNUMMER\\\",\\n\",\n    \"    \\\"IBAN\\\": \\\"IBAN\\\",\\n\",\n    \"    \\\"BIC\\\": \\\"BIC\\\",\\n\",\n    \"    \\\"URL\\\": \\\"LINK\\\",\\n\",\n    \"    \\\"ORGANIZATION\\\": \\\"FIRMA\\\",\\n\",\n    \"    \\\"TITLE\\\": \\\"TITEL\\\",\\n\",\n    \"    # the following Piiranha labels have no equivalent, so we drop them:\\n\",\n    \"    # \\\"IDCARDNUM\\\", \\\"DRIVERLICENSENUM\\\", \\\"SOCIALNUM\\\", \\\"TAXNUM\\\", \\\"PASSWORD\\\"\\n\",\n    \"}\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def apply_redaction(masked_text, start, end, pii_type, aggregate_redaction):\\n\",\n    \"    for j in range(start, end):\\n\",\n    \"        masked_text[j] = ''\\n\",\n    \"    if aggregate_redaction:\\n\",\n    \"        masked_text[start] = '[redacted]'\\n\",\n    \"    else:\\n\",\n    \"        masked_text[start] = f'[{pii_type}]'\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def convert_labels_to_custom(spans):\\n\",\n    \"    converted = []\\n\",\n    \"    for span in spans:\\n\",\n    \"        raw_label = span[\\\"label\\\"].replace(\\\"I-\\\", \\\"\\\").replace(\\\"B-\\\", \\\"\\\")\\n\",\n    \"        mapped_label = PIIRANHA_TO_CUSTOM.get(raw_label)\\n\",\n    \"        if mapped_label:\\n\",\n    \"            converted.append({\\n\",\n    \"                \\\"start\\\": span[\\\"start\\\"],\\n\",\n    \"                \\\"end\\\": span[\\\"end\\\"],\\n\",\n    \"                \\\"label\\\": mapped_label\\n\",\n    \"            })\\n\",\n    \"    return converted\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def mask_pii_spans(text, aggregate_redaction=True, return_spans=False):\\n\",\n    \"    inputs = tokenizer(text, return_tensors=\\\"pt\\\", truncation=True, padding=True)\\n\",\n    \"    inputs = {k: v.to(device) for k, v in inputs.items()}\\n\",\n    \"\\n\",\n    \"    with torch.no_grad():\\n\",\n    \"        outputs = model(**inputs)\\n\",\n    \"\\n\",\n    \"    predictions = torch.argmax(outputs.logits, dim=-1)\\n\",\n    \"\\n\",\n    \"    encoded_inputs = tokenizer.encode_plus(\\n\",\n    \"        text, return_offsets_mapping=True, add_special_tokens=True\\n\",\n    \"    )\\n\",\n    \"    offset_mapping = encoded_inputs['offset_mapping']\\n\",\n    \"\\n\",\n    \"    masked_text = list(text)\\n\",\n    \"    is_redacting = False\\n\",\n    \"    redaction_start = 0\\n\",\n    \"    current_pii_type = ''\\n\",\n    \"    predicted_spans = []\\n\",\n    \"\\n\",\n    \"    for i, (start, end) in enumerate(offset_mapping):\\n\",\n    \"        if start == end:\\n\",\n    \"            continue  # Skip special tokens\\n\",\n    \"\\n\",\n    \"        label_id = predictions[0][i].item()\\n\",\n    \"        label = model.config.id2label[label_id]\\n\",\n    \"\\n\",\n    \"        if label != 'O':\\n\",\n    \"            if not is_redacting:\\n\",\n    \"                is_redacting = True\\n\",\n    \"                redaction_start = start\\n\",\n    \"                current_pii_type = label\\n\",\n    \"            elif not aggregate_redaction and label != current_pii_type:\\n\",\n    \"                predicted_spans.append({\\\"start\\\": redaction_start, \\\"end\\\": start, \\\"label\\\": current_pii_type})\\n\",\n    \"                apply_redaction(masked_text, redaction_start, start, current_pii_type, aggregate_redaction)\\n\",\n    \"                redaction_start = start\\n\",\n    \"                current_pii_type = label\\n\",\n    \"        else:\\n\",\n    \"            if is_redacting:\\n\",\n    \"                predicted_spans.append({\\\"start\\\": redaction_start, \\\"end\\\": end, \\\"label\\\": current_pii_type})\\n\",\n    \"                apply_redaction(masked_text, redaction_start, end, current_pii_type, aggregate_redaction)\\n\",\n    \"                is_redacting = False\\n\",\n    \"\\n\",\n    \"    if is_redacting:\\n\",\n    \"        predicted_spans.append({\\\"start\\\": redaction_start, \\\"end\\\": len(masked_text), \\\"label\\\": current_pii_type})\\n\",\n    \"        apply_redaction(masked_text, redaction_start, len(masked_text), current_pii_type, aggregate_redaction)\\n\",\n    \"\\n\",\n    \"    result = ''.join(masked_text)\\n\",\n    \"    if return_spans:\\n\",\n    \"        return result, predicted_spans\\n\",\n    \"    return result\"\n   ],\n   \"outputs\": [],\n   \"execution_count\": 2\n  },\n  {\n   \"metadata\": {},\n   \"cell_type\": \"markdown\",\n   \"source\": \"## Load Original Mails and execute Anonymization\",\n   \"id\": \"124f7392427ad9c0\"\n  },\n  {\n   \"metadata\": {\n    \"ExecuteTime\": {\n     \"end_time\": \"2025-07-15T14:30:35.297238Z\",\n     \"start_time\": \"2025-07-15T14:29:49.767674Z\"\n    }\n   },\n   \"cell_type\": \"code\",\n   \"source\": [\n    \"from pathlib import Path\\n\",\n    \"\\n\",\n    \"folder = Path(\\\"../../../data/original/golden_dataset_original\\\")\\n\",\n    \"\\n\",\n    \"for file_path in folder.glob(\\\"*.txt\\\"):\\n\",\n    \"    with open(file_path, \\\"r\\\", encoding=\\\"utf-8\\\") as f:\\n\",\n    \"        text = f.read()\\n\",\n    \"\\n\",\n    \"    masked_text, spans = mask_pii_spans(text, return_spans=True)\\n\",\n    \"    mapped_spans = convert_labels_to_custom(spans)\\n\",\n    \"\\n\",\n    \"    print(f\\\"\\\\n=== {file_path.name} ===\\\")\\n\",\n    \"    print(masked_text[:500])  # Preview first 500 chars\\n\",\n    \"    print(\\\"Predicted PII spans:\\\")\\n\",\n    \"    for span in mapped_spans:\\n\",\n    \"        print(span)\\n\",\n    \"with open(\\\"../../../data/original/golden_dataset_original/1.txt\\\", \\\"r\\\", encoding=\\\"utf-8\\\") as f:\\n\",\n    \"    text = f.read()\\n\",\n    \"\\n\",\n    \"masked_text, spans = mask_pii_spans(text, return_spans=True)\\n\",\n    \"mapped_spans = convert_labels_to_custom(spans)\\n\",\n    \"\\n\",\n    \"print(masked_text)\\n\",\n    \"print(\\\"Predicted PII spans:\\\")\\n\",\n    \"for span in mapped_spans:\\n\",\n    \"    print(span)\\n\",\n    \"## Load Ground Truth and Calculate Precision, Recall & F1\\n\",\n    \"import json\\n\",\n    \"\\n\",\n    \"# Load ground truth\\n\",\n    \"with open(\\\"../../../data/original/ground_truth.json\\\", \\\"r\\\", encoding=\\\"utf-8\\\") as f:\\n\",\n    \"    ground_truth = json.load(f)\\n\",\n    \"\\n\",\n    \"# Metrics counters\\n\",\n    \"TP, FP, FN = 0, 0, 0\\n\",\n    \"\\n\",\n    \"# Optional: group similar gold labels\\n\",\n    \"GROUPED_LABELS = {\\n\",\n    \"    \\\"TITEL\\\": {\\\"TITEL\\\"},\\n\",\n    \"    \\\"VORNAME\\\": {\\\"VORNAME\\\", \\\"GIVENNAME\\\"},\\n\",\n    \"    \\\"NACHNAME\\\": {\\\"NACHNAME\\\", \\\"SURNAME\\\", \\\"USERNAME\\\"},\\n\",\n    \"    \\\"FIRMA\\\": {\\\"FIRMA\\\"},\\n\",\n    \"    \\\"TELEFONNUMMER\\\": {\\\"TELEFONNUMMER\\\", \\\"PHONENUMBER\\\", \\\"TELEPHONENUM\\\"},\\n\",\n    \"    \\\"EMAIL\\\": {\\\"EMAIL\\\"},\\n\",\n    \"    \\\"FAX\\\": {\\\"FAX\\\"},\\n\",\n    \"    \\\"STRASSE\\\": {\\\"STRASSE\\\", \\\"STREET\\\"},\\n\",\n    \"    \\\"HAUSNUMMER\\\": {\\\"HAUSNUMMER\\\", \\\"BUILDINGNUM\\\"},\\n\",\n    \"    \\\"POSTLEITZAHL\\\": {\\\"POSTLEITZAHL\\\", \\\"PLZ\\\", \\\"ZIP\\\", \\\"ZIPCODE\\\"},\\n\",\n    \"    \\\"WOHNORT\\\": {\\\"WOHNORT\\\", \\\"ORT\\\", \\\"CITY\\\"},\\n\",\n    \"    \\\"ZÄHLERNUMMER\\\": {\\\"ZÄHLERNUMMER\\\", \\\"METER_ID\\\"},\\n\",\n    \"    \\\"ZÄHLERSTAND\\\": {\\\"ZÄHLERSTAND\\\", \\\"METER_READING\\\"},\\n\",\n    \"    \\\"VERTRAGSNUMMER\\\": {\\\"VERTRAGSNUMMER\\\", \\\"ANGEBOTSNUMMER\\\", \\\"KUNDENNUMMER\\\"},\\n\",\n    \"    \\\"ZAHLUNG\\\": {\\\"BETRAG\\\", \\\"ZAHLUNG\\\", \\\"AMOUNT\\\"},\\n\",\n    \"    \\\"BANK\\\": {\\\"BANK\\\"},\\n\",\n    \"    \\\"IBAN\\\": {\\\"IBAN\\\"},\\n\",\n    \"    \\\"BIC\\\": {\\\"BIC\\\"},\\n\",\n    \"    \\\"DATUM\\\": {\\\"DATUM\\\", \\\"DATE\\\", \\\"DATEOFBIRTH\\\"},\\n\",\n    \"    \\\"GESENDET_MIT\\\": {\\\"GESENDET_MIT\\\"},\\n\",\n    \"    \\\"LINK\\\": {\\\"LINK\\\", \\\"URL\\\"}\\n\",\n    \"}\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"# Helper: normalize labels to group base (e.g. map VERTRAGSNUMMER → KUNDENNUMMER)\\n\",\n    \"def normalize_label(label):\\n\",\n    \"    for group, aliases in GROUPED_LABELS.items():\\n\",\n    \"        if label in aliases:\\n\",\n    \"            return group\\n\",\n    \"    return label\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"# Relaxed span match with IoU\\n\",\n    \"def relaxed_overlap(pred, gold, iou_threshold=0.5):\\n\",\n    \"    pred_label = normalize_label(pred[\\\"label\\\"])\\n\",\n    \"    gold_label = normalize_label(gold[\\\"label\\\"])\\n\",\n    \"    if pred_label != gold_label:\\n\",\n    \"        return False\\n\",\n    \"    inter_start = max(pred[\\\"start\\\"], gold[\\\"start\\\"])\\n\",\n    \"    inter_end = min(pred[\\\"end\\\"], gold[\\\"end\\\"])\\n\",\n    \"    intersection = max(0, inter_end - inter_start)\\n\",\n    \"    union = max(pred[\\\"end\\\"], gold[\\\"end\\\"]) - min(pred[\\\"start\\\"], gold[\\\"start\\\"])\\n\",\n    \"    iou = intersection / union if union > 0 else 0\\n\",\n    \"    return iou >= iou_threshold\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"# Evaluation loop\\n\",\n    \"for example in ground_truth:\\n\",\n    \"    text = example[\\\"text\\\"]\\n\",\n    \"    gold_spans = [label for label in example[\\\"labels\\\"] if label[\\\"start\\\"] < label[\\\"end\\\"]]\\n\",\n    \"\\n\",\n    \"    _, raw_preds = mask_pii_spans(text, return_spans=True)\\n\",\n    \"    pred_spans = convert_labels_to_custom(raw_preds)\\n\",\n    \"\\n\",\n    \"    matched_gold = set()\\n\",\n    \"    matched_pred = set()\\n\",\n    \"\\n\",\n    \"    for i, pred in enumerate(pred_spans):\\n\",\n    \"        for j, gold in enumerate(gold_spans):\\n\",\n    \"            if relaxed_overlap(pred, gold):\\n\",\n    \"                TP += 1\\n\",\n    \"                matched_gold.add(j)\\n\",\n    \"                matched_pred.add(i)\\n\",\n    \"                break\\n\",\n    \"\\n\",\n    \"    FP += len(pred_spans) - len(matched_pred)\\n\",\n    \"    FN += len(gold_spans) - len(matched_gold)\\n\",\n    \"\\n\",\n    \"# Compute metrics\\n\",\n    \"precision = TP / (TP + FP) if (TP + FP) > 0 else 0.0\\n\",\n    \"recall = TP / (TP + FN) if (TP + FN) > 0 else 0.0\\n\",\n    \"f1 = 2 * precision * recall / (precision + recall) if (precision + recall) > 0 else 0.0\\n\",\n    \"\\n\",\n    \"print(\\\"=== Evaluation Metrics ===\\\")\\n\",\n    \"print(f\\\"True Positives: {TP}\\\")\\n\",\n    \"print(f\\\"False Positives: {FP}\\\")\\n\",\n    \"print(f\\\"False Negatives: {FN}\\\")\\n\",\n    \"print(f\\\"\\\\nPrecision: {precision:.4f}\\\")\\n\",\n    \"print(f\\\"Recall:    {recall:.4f}\\\")\\n\",\n    \"print(f\\\"F1 Score:  {f1:.4f}\\\")\"\n   ],\n   \"id\": \"d93cd10903bcb4f\",\n   \"outputs\": [\n    {\n     \"name\": \"stderr\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Asking to truncate to max_length but no maximum length is provided and the model has no predefined maximum length. Default to no truncation.\\n\"\n     ]\n    },\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"\\n\",\n      \"=== 29.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"hiermit möchte ich dass all meine personenbezogenen Daten (Vertragskonto[redacted]öscht werden.\\n\",\n      \"Ich bitte um eine schriftliche Bestätigung darüber, dass alle Daten von mir mit dem o.g. Vertragskonto gelöscht worden sind.\\n\",\n      \"Mit freundlichen Grüßen,\\n\",\n      \"Liselotte Metz\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 103, 'end': 118, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 15.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"hiermit lege Ich,[redacted] Vertragsnummer[redacted] bei der Schlussrechnung 2022/ 2023 Wiederspruch ein.\\n\",\n      \"Die Wohnungsabnahme war am 15.05.2022, anbei das Übergabeprotokoll der Hausverwaltung. Der Abbrechnungszeitraum vom 16.05.-31.05.22 fäll somit nicht mehr in meinen Bemessungszeitraum. Anbei auch die neue Meldebescheinigung. Ich bitte hiermit um Klärung der Abrechnung.\\n\",\n      \"Mit freundlichen Grüßen[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 48, 'end': 65, 'label': 'VORNAME'}\\n\",\n      \"{'start': 80, 'end': 91, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 437, 'end': 454, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 114.txt ===\\n\",\n      \"Kunde: \\t\\t\\tWernecke GmbH & Co. OHG und Niemeier Carsten Stiftung & Co. KG\\n\",\n      \"Verbrauchsstelle:[redacted][redacted]ähler:\\t\\t\\tDE71117317620819513570\\n\",\n      \"Vertragsnummer:[redacted]Sehr geehrte Damen und Herren,\\n\",\n      \"wir bedanken uns für Ihre Abschlagsanpassung gemäß Ihres Schreibens vom 29.07.2023, \\n\",\n      \"auch wenn Ihr Schreiben auf unsere eingelegten Widersprüche nicht eingegangen ist.\\n\",\n      \"Der guten Ordnung halber verweisen wir erneut zu Ihrer im Dezember 2022 angekündigten Preiserhöhung auf unseren Widerspruch vom 6. Jan\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 90, 'end': 100, 'label': 'STRASSE'}\\n\",\n      \"{'start': 100, 'end': 105, 'label': 'HAUSNUMMER'}\\n\",\n      \"{'start': 152, 'end': 163, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 596, 'end': 605, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 100.txt ===\\n\",\n      \"Vertragsnummer[redacted].[redacted]Sehr geehrte Damen und Herren, wir haben am 17.07.23 ein email an euch \\n\",\n      \"geschickt und leider nach fast 1,5 Monaten immer noch keine Antwort \\n\",\n      \"bekommen. Schreiben heute noch ein Mal. \\n\",\n      \" \\n\",\n      \"in letzter Abrechnung vom 29.06.2023 ist einen Fehler aufgetreten und zwar \\n\",\n      \"Zählerstand passt nicht. Am 18.06.23 unsere tatsächliche Zählerstand war \\n\",\n      \"13962 m3. Laut Ihre Abrechnung 14042 m3. Das ist 80m3 Differenz (also 80m3 \\n\",\n      \"zu viel). Wir bieten Sie alles umzurechnen . Vielen Dan\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 14, 'end': 30, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 31, 'end': 74, 'label': 'NACHNAME'}\\n\",\n      \"{'start': 561, 'end': 567, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 128.txt ===\\n\",\n      \"Am 13.07.2023 wurde ein neuer Gaszähler eingebaut. Anbei ein Foto vom aktuellen Zähler.\\n\",\n      \"Diese Nachricht wurde von meinem Android Mobiltelefon mit GMX Mail gesendet.\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"\\n\",\n      \"=== 129.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"ich plane, den Energieversorger zu wechseln.\\n\",\n      \"Bezüglich Ihrer Preisgarantie habe ich jedoch eine Verständnisfrage.\\n\",\n      \"Sie formulieren diese wie folgt: Ausgenommen von der Preisgarantie sind \\n\",\n      \"Preisänderungen, die auf Änderungen der U-steuer sowie Preisänderungen, \\n\",\n      \"die auf nach Vertragsabschluss während der Preisgarantie erstmals \\n\",\n      \"wirksam werdenden neuen Steuern, Abgaben oder sons\\n\",\n      \"tigen unmittelbar die Beschaffung, Erzeugung, Speicherung, Netznutzung \\n\",\n      \"(Übertragung u. Ver\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 974, 'end': 984, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 101.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"wie bereits besprochen wurde heute bei uns ein defekter Stromzähler durch\\n\",\n      \"die Firma Lichtstrom im Auftrag von Avacon ausgetauscht.\\n\",\n      \"Ein Einbau- bzw. Ausbaubeleg wurde uns nicht ausgehändigt es befindet sich\\n\",\n      \"lediglich ein Beleg am Gerät siehe Anhang.\\n\",\n      \"Für Rückfragen stehe ich Ihnen gern zur Verfügung.\\n\",\n      \"Mit freundlichen Grüßen\\n\",\n      \"Phillip[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 362, 'end': 371, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 115.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"ich hatte am 18.06. mit dem Kundensupport telefoniert und um eine Korrektur\\n\",\n      \"der Konto-Zuordnung zu meiner E-Mail-Adresse gebeten:\\n\",\n      \"-[redacted] Ines Haase: alter, beendeter Vertrag\\n\",\n      \"-[redacted][redacted] Rosita Rogner: aktueller Vertrag\\n\",\n      \"Meine E-Mail-Adresse ist mit dem beendeten Konto[redacted]bunden.\\n\",\n      \"Telefonisch wurde mir mitgeteilt, dass dies auf meinen aktuellen Vertrag\\n\",\n      \"([redacted][redacted]ändert wird. Dies ist bisher nicht geschehen.\\n\",\n      \"Bitte teilen Sie mir mit, wen\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 162, 'end': 173, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 212, 'end': 226, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 226, 'end': 236, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 318, 'end': 332, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 414, 'end': 427, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 427, 'end': 440, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 569, 'end': 580, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 14.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"ich widerrufe hiermit meine Einwilligung in die Verarbeitung meiner\\n\",\n      \"personenbezogenen Daten. Ich fordere Sie darüber hinaus auf, die von Ihnen\\n\",\n      \"zu meiner Person gespeicherten personenbezogenen Daten zu löschen und mir\\n\",\n      \"anschließend die Löschung unverzüglich zu bestätigen.\\n\",\n      \"Sollten Gründe gegen die Löschung meiner personenbezogenen Daten sprechen,\\n\",\n      \"bitte ich um Angaben der jeweiligen gesetzlichen Grundlage.\\n\",\n      \"Mit freundlichen Grüßen\\n\",\n      \"Manuel[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 467, 'end': 474, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 28.txt ===\\n\",\n      \"Hallo, leider kann ich mich in mein Kundenkonto nicht einloggen\\n\",\n      \"Mit freundlichen Grüßen\\n\",\n      \"Hannes[redacted] Nachricht wurde von meinem Android Mobiltelefon mit GMX Mail gesendet.\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 94, 'end': 117, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 16.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"Sie schreiben mir am 7.10.2022 dass ich noch einen Guthaben von 82,19€ habe. Diese wurde noch nie zurück bezahlt. Der Konto , der Sie angegeben haben war richtig allerdings kam das Geld nie an. Bitte nochmal prüfen und mir das Geld zahlen. Im Anhang der Brief.\\n\",\n      \"Mit freundlichen Grüßen ,[redacted][redacted][redacted] pe Outlook pentru iOS<https://aka.ms/o0ukef>\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 317, 'end': 327, 'label': 'VORNAME'}\\n\",\n      \"{'start': 327, 'end': 339, 'label': 'NACHNAME'}\\n\",\n      \"{'start': 339, 'end': 344, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 103.txt ===\\n\",\n      \"Hallo,\\n\",\n      \"Anbei meine Vertragsbestätigung.\\n\",\n      \"Mit freundlichen Grüßen\\n\",\n      \"Dr. Ewald Kramer\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"\\n\",\n      \"=== 117.txt ===\\n\",\n      \"Guten Tag.  Wir möchten unsere Abschlagzahlungen auf den 2 jeden Monats verlagern für Erdgas Vertrag[redacted] Strom Vertrag 402071749. Bitte aktualisieren/abändern bitte . W.Weißbrot\\n\",\n      \"Gesendet von Fliegner Mail auf[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 100, 'end': 114, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 218, 'end': 229, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 102.txt ===\\n\",\n      \"Hallo EON,\\n\",\n      \"Bitte erstatten Sie auf folgendes Konto zurück[redacted][redacted] DE28263410720363784400\\n\",\n      \"bei der Kartoffelbank. \\n\",\n      \"Mit freundlichen Grüßen[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 57, 'end': 75, 'label': 'VORNAME'}\\n\",\n      \"{'start': 75, 'end': 79, 'label': 'NACHNAME'}\\n\",\n      \"{'start': 150, 'end': 167, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 17.txt ===\\n\",\n      \"Vertragsnumer[redacted]\\n\",\n      \"Wir haben Stromzähler am 21.04.23 in Büro in[redacted]gegeben. Bei Herr Hiller.\\n\",\n      \"Mit freundlichen Grüßen\\n\",\n      \"Holsten KaffeeZimmer\\n\",\n      \"ส่งจาก Outlook สำหรับ Android<https://aka.ms/AAb9ysg>\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 13, 'end': 29, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 74, 'end': 83, 'label': 'WOHNORT'}\\n\",\n      \"\\n\",\n      \"=== 13.txt ===\\n\",\n      \"Guten Tag,\\n\",\n      \"wie gerade telefonisch besprochen sende ich Ihnen den Mietvertrag im Anhang.\\n\",\n      \"Meine Eon Vertragsnummer lautet :[redacted] Zählernummer für Strom lautet: 1 ITR00 7263 9265\\n\",\n      \"Aktueller Zählerstand: 7761,1 kWh\\n\",\n      \"Bitte schalten sie mir so schnell es geht den Strom frei. Ich lebe seit 1,5 Wochen ohne Strom hier.\\n\",\n      \"Ich bitte außerdem um eine Rückmeldung auf diese Mailadresse.\\n\",\n      \"Mit freundlichen Grüßen\\n\",\n      \"Jana Hahn\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 121, 'end': 135, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 106.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"anbei übersende ich Ihnen schriftlich meine Kündigung des Erdgasvertrages mit der Vertragsnummer[redacted] Kündigung habe ich auch bereits über das Onlineportal \\\"Mein Rogner\\\" getätigt.\\n\",\n      \"Mit freundlichen Grüßen\\n\",\n      \"Gabriel[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 127, 'end': 142, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 252, 'end': 267, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 112.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"Mit diesem Schreiben möchte ich Sie über meine Namensänderung aufgrund\\n\",\n      \"meiner Hochzeit am 28.01.2022 informieren. Ab sofort heiße ich mit\\n\",\n      \"Nachnamen[redacted] Bitte ändern Sie Ihre Datenbestände entsprechend und\\n\",\n      \"schicken mir binnen 14 Tagen eine Bestätigung zu.\\n\",\n      \"Eine Kopie der Eheurkunde und des Personalausweises finden Sie im Anhang.\\n\",\n      \"Mit freundlichen Grüßen,[redacted] früher[redacted]\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 178, 'end': 185, 'label': 'NACHNAME'}\\n\",\n      \"{'start': 387, 'end': 400, 'label': 'VORNAME'}\\n\",\n      \"{'start': 407, 'end': 416, 'label': 'STRASSE'}\\n\",\n      \"\\n\",\n      \"=== 113.txt ===\\n\",\n      \"Hier wie gewünscht in der Anlage die Rechnung der Trocknungsfirma aus der die benötigten Daten ersichtlich sind\\n\",\n      \"Mit netten Grüßen \\n\",\n      \"Wagner\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"\\n\",\n      \"=== 107.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"ich möchte Ihnen auf diesem Weg schon jetzt ein Foto eines Schreiben senden, welches Ihnen ab morgen noch über den Postweg zugestellt wird. Bezüglich der Schlussrechnung des Vertrags[redacted] ich um dringende Beachtung.\\n\",\n      \"Mit freundlichen Grüßen\\n\",\n      \"Dorothe Henck\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 213, 'end': 232, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 12.txt ===\\n\",\n      \"Guten Tag\\n\",\n      \"Es wurde noch ein Zhlerfoto vom Zähler mit der Nummer 63746253-1992 benötigt.\\n\",\n      \"Kunde: Ulrich[redacted]stelle:[redacted]ähler: 63746253-1992\\n\",\n      \"Vertragsnummer:[redacted] ist im Anhang\\n\",\n      \"Mfg\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 101, 'end': 120, 'label': 'NACHNAME'}\\n\",\n      \"{'start': 127, 'end': 160, 'label': 'STRASSE'}\\n\",\n      \"{'start': 196, 'end': 213, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 10.txt ===\\n\",\n      \">\\n\",\n      \"> Sehr geehrter Damen und Herren,\\n\",\n      \">\\n\",\n      \"> Würde gerne Einer 30 Euro monatlich Ratenzahlung für meiner letzte Strom\\n\",\n      \"> Rechnung vereinbaren.\\n\",\n      \">\\n\",\n      \"> Vertragsnummer:[redacted]\\n\",\n      \"> Rechnungsnummer:[redacted]\\n\",\n      \">\\n\",\n      \"> Mit freundlichem grüßen\\n\",\n      \">\\n\",\n      \"> Herr Roger Fischer\\n\",\n      \">\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 156, 'end': 169, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 188, 'end': 214, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 38.txt ===\\n\",\n      \"Sehr geehrter Damen und Herren, Hiermit sende ich Ihnen die Kündigung Bestätigung. Bitte sehen Sie den Anhang dankeSent from my Galaxy\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"\\n\",\n      \"=== 139.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"Ich erbitte den offenen Betrag von 163,23 Euro,\\n\",\n      \"Am 1.10.2023 begleichen zu dürfen, da ich in wenigen Tagen eine Überweisung\\n\",\n      \"bekomme.\\n\",\n      \"Ich war jetzt lange Zeit nicht vor Ort, wegen eines Schimmel Befalls. Dabei\\n\",\n      \"gingen mir einigen Pflichten unter, die ich jetzt nach holen möchte.\\n\",\n      \"Ich würde mich freuen, wenn dies möglich wäre.\\n\",\n      \"Vielen Dank.\\n\",\n      \"Grüße Diana Schulz [redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 388, 'end': 428, 'label': 'STRASSE'}\\n\",\n      \"\\n\",\n      \"=== 111.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"ich habe eine Frage und zwar hab ich schon öfter angerufen ..Ich kann mich nicht registrieren zeigt immer immer ein Fehler...was kann ich machen das ich mich Registrieren kann und die App nutzen kann? Habe mal ein Bild hinzugefügt das zeigt der mir immer an ..\\n\",\n      \"Mit freundlichen Grüßen\\n\",\n      \"Booken\\n\",\n      \"Diese Nachricht wurde von meinem Android Mobiltelefon mit GMX Mail gesendet.\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"\\n\",\n      \"=== 105.txt ===\\n\",\n      \"Im Anhang sende ich ihnen meinen Stromvertrag mit der Bitte um Bestätigung.\\n\",\n      \"Bei Rückfragen erreichen sie mich unter:[redacted] freundlichen Grüßen,\\n\",\n      \"Simona Hofmann\\n\",\n      \"-- \\n\",\n      \"Diese E-Mail wurde von Hiller GbR-Antivirussoftware auf Viren geprüft. www.avast.com\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 116, 'end': 134, 'label': 'TELEFONNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 104.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren \\n\",\n      \"Hiermit bestätige ich den Eingang Ihres Schreibens.  Ich kann Ihnen eine Ratenzahlung in Höhe von 30€ monatlich zum 20ten jedes Monats anbieten.  Mehr ist mir momentan leider nicht möglich,  sobald sich etwas an meiner finanziellen Situation ändert , werde ich natürlich die restrückstände begleichen.  \\n\",\n      \"Bitte um Rückmeldung \\n\",\n      \"Mit freundlichen Grüßen \\n\",\n      \"Marianne Gude \\n\",\n      \"Gesendet von AOL auf Android\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"\\n\",\n      \"=== 110.txt ===\\n\",\n      \"Guten Tag, bei dem begleichen der offenen Rechnung vom 1.06-1.08 ist mir ein Fehler in der Rechnungsnummer unterlaufen. Meine Vertragsnummer lautet:[redacted] Anhang liegt ein Kontoauszug vor, dass ich den Betrag von 282€ beglichen habe. Mit freundlichen Grüßen[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 148, 'end': 160, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 263, 'end': 281, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 39.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"wir bitten Sie um die Reduzierung der Abschlagskosten der Eheleute Reuter, da das Objekt am[redacted][redacted] dem 15.08.2023 unbewohnt ist und verkauft wird.\\n\",\n      \"Mit freundlichen Grüßen[redacted]eißler\\n\",\n      \"Wende GbR[redacted].:[redacted]cid:image001.jpg@01D9D68F.2E36C8F0][redacted]example.com<mailto:[redacted]example.com>\\n\",\n      \"www.wende-immobilien.de<http://www.wende-immobilien.de/>\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 122, 'end': 141, 'label': 'STRASSE'}\\n\",\n      \"{'start': 141, 'end': 163, 'label': 'POSTLEITZAHL'}\\n\",\n      \"{'start': 235, 'end': 243, 'label': 'VORNAME'}\\n\",\n      \"{'start': 259, 'end': 307, 'label': 'STRASSE'}\\n\",\n      \"{'start': 309, 'end': 324, 'label': 'TELEFONNUMMER'}\\n\",\n      \"{'start': 359, 'end': 373, 'label': 'NACHNAME'}\\n\",\n      \"{'start': 392, 'end': 405, 'label': 'EMAIL'}\\n\",\n      \"\\n\",\n      \"=== 11.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"anbei, als pdf-Datei die fehlende Unterlage.\\n\",\n      \"Mit freundlichen Grüßen\\n\",\n      \"Manuela[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 107, 'end': 117, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 76.txt ===\\n\",\n      \"Guten Tag\\n\",\n      \"Wie telefonisch besprochen, möchte ich den Betrag für den Bautrockner zusätzlich\\n\",\n      \"Zum Abschlag extra bezahlen.\\n\",\n      \"Im Anhang die Kostenabrechnung.\\n\",\n      \"Mir freundlichen Grüßen[redacted]. 02851 33116\\n\",\n      \"Ich werde den Betrag von 115,64 Euro auf mein Vertragskonto überweisen.\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 175, 'end': 234, 'label': 'STRASSE'}\\n\",\n      \"\\n\",\n      \"=== 62.txt ===\\n\",\n      \"Vertragsnummer:[redacted]k\\n\",\n      \"Verbraucherstelle:[redacted][redacted]ähler: 92739304\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"Ich kündige den Vertrag wegen dem Umzug zum 30.11.23\\n\",\n      \"Um eine schriftliche Bestätigung wird gebeten.\\n\",\n      \"Neue Adresse:[redacted]e Grüße[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 15, 'end': 37, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 57, 'end': 87, 'label': 'STRASSE'}\\n\",\n      \"{'start': 87, 'end': 105, 'label': 'POSTLEITZAHL'}\\n\",\n      \"{'start': 265, 'end': 301, 'label': 'STRASSE'}\\n\",\n      \"{'start': 308, 'end': 322, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 89.txt ===\\n\",\n      \"Rechnungüberprüfung vom 21.7.2023\\n\",\n      \"Im Anhang finden sie den Überweisungsbeleg\\n\",\n      \"Danke[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 82, 'end': 101, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 177.txt ===\\n\",\n      \"Zähler Wechselprotokoll.\\n\",\n      \"Vertragsnummer:[redacted]hold Baum\\n\",\n      \"05.11.1991\\n\",\n      \"Schaa[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 40, 'end': 55, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 81, 'end': 105, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 163.txt ===\\n\",\n      \"Hiermit sende ich ihnen die Abwendungsvereinbarung .\\n\",\n      \"Bitte um Bestätigung.\\n\",\n      \"Mit freundlichen Grüßen\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"\\n\",\n      \"=== 162.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \" \\n\",\n      \"nachdem eine schriftliche Anfrage über das Kundenportal vom 23.07.2023 bis\\n\",\n      \"heute unbeantwortet geblieben ist und ich telefonisch zwei Mal regelrecht\\n\",\n      \"abgewimmelt worden bin, stelle ich meine Frage erneut auf diesem Wege und\\n\",\n      \"hoffe auf eine Antwort.\\n\",\n      \"In den Medien wurde angepriesen, dass E.on zum 01.09.2023 die Strompreise\\n\",\n      \"für ca. 14 Millionen Haushalte senkt.\\n\",\n      \"Mehrere Bekannte in meinem Umfeld haben im Juli entsprechende\\n\",\n      \"Ankündigungsschreiben bekommen.\\n\",\n      \"Aus Gründen, d\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 1682, 'end': 1693, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 88.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"hiermit widerrufe ich den von mir abgeschlossenen Stromvertrag mit E.ON Energie.\\n\",\n      \"1.) Angaben zum Vertragspartner\\n\",\n      \"Otto Hartmann\\n\",\n      \"Geb.-Datum: [redacted]example.com\\n\",\n      \"2.) Angaben zur Verbrauchsstelle\\n\",\n      \"Schacht Schottin GmbH & Co. KG Auftragsnummer: 7564839\\n\",\n      \"Tarifname: E.ON ÖkoStrom Extra\\n\",\n      \"Datum der Auftragserstellung: 21.07.2023\\n\",\n      \"Datum der Übermittlung an E.ON Energie: 21.07.2023\\n\",\n      \"Zählernummer: 30253\\n\",\n      \"Adresse:[redacted] bestätigen Sie mir den Widerruf mit Antwort auf diese E-Ma\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 170, 'end': 191, 'label': 'DATUM'}\\n\",\n      \"{'start': 442, 'end': 479, 'label': 'STRASSE'}\\n\",\n      \"\\n\",\n      \"=== 176.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"Sie haben bis heute nicht auf meine E-Mail vom 25.08.2023, 10:31, \\n\",\n      \"geantwortet. Nach wie vor befinde ich mich nicht in der Belieferung. Ich \\n\",\n      \"finde die Situation unsäglich und fordere Sie auf, mich unverüglich zu \\n\",\n      \"kontaktieren.\\n\",\n      \"Mit freundlichen Grüßen[redacted].:[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 281, 'end': 332, 'label': 'VORNAME'}\\n\",\n      \"{'start': 334, 'end': 349, 'label': 'TELEFONNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 63.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"ich würde gerne meine Verträge mit folgenden Vertragsnummern bündeln.\\n\",\n      \"1.[redacted][redacted]\\n\",\n      \"Mehrere Versuche auf der entsprechenden Internetseite sind leider schief\\n\",\n      \"gelaufen.\\n\",\n      \"Mit freundlichen Grüßen[redacted]. 193\\n\",\n      \"07882[redacted][redacted]@example.org\\n\",\n      \"Tel. 01234 55632\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 103, 'end': 116, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 116, 'end': 126, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 233, 'end': 259, 'label': 'VORNAME'}\\n\",\n      \"{'start': 270, 'end': 282, 'label': 'WOHNORT'}\\n\",\n      \"{'start': 282, 'end': 291, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 77.txt ===\\n\",\n      \"Guten Tag,\\n\",\n      \"Leider habe ich meinen Abschlag an die IBAN meines alten Vertragskontos\\n\",\n      \"überwiesen und bitte nun, dass der gezahlte Betrag auf mein neues\\n\",\n      \"Vertragskonto umgebucht wird.\\n\",\n      \"Gezahlt wurde am 21.07.2023 ein Betrag in Höhe von 179,24€ an die IBAN DE33 4516 6479 4013 4466 01.\\n\",\n      \"Mein alte Vertragsnummer lautet[redacted] meine neue Vertragsnummer ist die[redacted] bedanke mich recht herzlich.\\n\",\n      \"Mit freundlichen Grüßen[redacted]\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 310, 'end': 327, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 361, 'end': 376, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 429, 'end': 453, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 49.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \" \\n\",\n      \"zusätzlich zu dem Besuch des Notdienstes am 06.07 sowie meinen Anruf in dieser Woche, möchte ich Ihnen mitteilen, dass Mein Stromzähler aktuell nichts anzeigt. Ein Bild dazu anbei.\\n\",\n      \" \\n\",\n      \"Für meinen gewisse Zeitraum im Juli war zwischenzeitlich (Monatsmitte) etwas sichtbar.\\n\",\n      \" \\n\",\n      \"Ich bitte um Behebung des Problems.\\n\",\n      \" \\n\",\n      \"Mit freundlichen Grüße[redacted]70506/8384700\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 365, 'end': 416, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 61.txt ===\\n\",\n      \"Vertragsnummer:[redacted]Sehr geehrte Damen und Herren,\\n\",\n      \"anbei wie telefonisch besprochen die kWh der Trocknung in unserem Haus, mit der Bitte um eine separate Rechnung.\\n\",\n      \"Beste Grüße Gertraude Steinberg\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 15, 'end': 26, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 75.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"wie heute Morgen telefonisch angefragt, würde ich gern die Postadresse des\\n\",\n      \"Kundenkontos meiner Eltern ändern.\\n\",\n      \"Diese sind umgezogen und solange das Haus leer steht, kann dort keine Post\\n\",\n      \"empfangen werden.\\n\",\n      \"Vertragsnummer:[redacted][redacted]. 1[redacted]:[redacted]684\\n\",\n      \"46491[redacted]nr. bleibt identisch.\\n\",\n      \"Geburtsdatum:[redacted] gibt es auch noch einen Stromvertrag, zu welchem mir die\\n\",\n      \"Vertragsnummer derzeit leider nicht vorliegt. Hier müsste die Post bitte\\n\",\n      \"auch an die \\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 249, 'end': 260, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 260, 'end': 284, 'label': 'STRASSE'}\\n\",\n      \"{'start': 287, 'end': 308, 'label': 'POSTLEITZAHL'}\\n\",\n      \"{'start': 309, 'end': 336, 'label': 'STRASSE'}\\n\",\n      \"{'start': 345, 'end': 361, 'label': 'WOHNORT'}\\n\",\n      \"{'start': 396, 'end': 412, 'label': 'DATUM'}\\n\",\n      \"\\n\",\n      \"=== 160.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren, Ich möchte für alle Verträge Einzugsermächtigung machen wenn sie mir Unterlagen schicken würde würde mich freuen Mit freundlichen Grüßen[redacted]mer\\n\",\n      \"Von meinem iPhone gesendet\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 167, 'end': 180, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 148.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren\\n\",\n      \"leider wurde meine Zählernummer immer noch nicht in Ihren Unterlagen geändert. Die Zählernummer lautet bereits seit Vertragsbeginn 1ESY1162808638.\\n\",\n      \"Mit freundlichen Grüßen[redacted].:[redacted]:[redacted] (02675) 31629\\n\",\n      \"E-Mail:[redacted]example.net\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 200, 'end': 251, 'label': 'VORNAME'}\\n\",\n      \"{'start': 253, 'end': 274, 'label': 'TELEFONNUMMER'}\\n\",\n      \"{'start': 275, 'end': 298, 'label': 'TELEFONNUMMER'}\\n\",\n      \"{'start': 320, 'end': 332, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 175.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"bitte bemerken Sie das Dokument im Anhang.\\n\",\n      \"-- \\n\",\n      \"Mit freundlichen Grüßen\\n\",\n      \"das Team | rechtliche Betreuungen Drubin[redacted] Schenk\\n\",\n      \"Rechtliche Betreuungen[redacted]. 09814526041\\n\",\n      \"Fax[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 142, 'end': 148, 'label': 'VORNAME'}\\n\",\n      \"{'start': 178, 'end': 218, 'label': 'STRASSE'}\\n\",\n      \"{'start': 235, 'end': 248, 'label': 'TELEFONNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 74.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"im Anhang finden Sie einen Screenshot mit den Umsatzdetails zu meiner getätigten Zahlung am 21.8.2023. Meine fällige Abschlagszahlung vom 18. August 2023 wird immernoch als offen dargestellt und wurde inzwischen von Ihnen gemahnt.\\n\",\n      \"Meine Vertragsnummer lautet[redacted] Zählernummer lautet 861546-572484\\n\",\n      \"Mit freundlichen Grüßen,\\n\",\n      \"Isabell Binner\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 289, 'end': 305, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 60.txt ===\\n\",\n      \"Sehr geehrtes E.ON Team,\\n\",\n      \"ich habe heute ein Schreiben aus Ihrem Hause erhalten, in dem Sie auf\\n\",\n      \"Rabattmöglichkeiten hinweisen, wenn man sowohl Gas- als auch\\n\",\n      \"Stromliefervertrag bei E.ON hat.\\n\",\n      \"Das würde mich interessieren.\\n\",\n      \"Allerdings habe ich eine Photovoltaikanlage auf dem Dach uns speise\\n\",\n      \"Strom ins öffentliche Netz.\\n\",\n      \"Wäre E.ON dann auch mein Ansprechpartner für die Strom-Vergütung?\\n\",\n      \"Freundliche Grüße,[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 399, 'end': 470, 'label': 'STRASSE'}\\n\",\n      \"\\n\",\n      \"=== 48.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"wie mit einer Ihrer Mitarbeiterinnen besprochen, wollte sich diese\\n\",\n      \"bezüglich meiner Kündigung gestern telefonisch bei mir melden. Leider war\\n\",\n      \"dies nicht der Fall.\\n\",\n      \"Ich würde Sie höflichst bitten meinen Vertrag zu kündigen! Ich bitte um\\n\",\n      \"kurze Rückmeldung.\\n\",\n      \"Mit sonnigen Grüßen\\n\",\n      \"Dieter Ortmann\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"\\n\",\n      \"=== 64.txt ===\\n\",\n      \"[redacted] den 26.8.2023[redacted]\\n\",\n      \"22085 Ebern\\n\",\n      \"*Kunden-Nr.:[redacted]Verbrauchsstelle:[redacted][redacted]\\n\",\n      \"*Zähler: 970220-592573*\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"hiermit *widerrufe* ich den von mir geschlossenen Vertrag über die \\n\",\n      \"Stromlieferung von Matthäi Komfort Extra Öko.\\n\",\n      \"Widerruf gemäß Formular anbei.\\n\",\n      \" [redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 0, 'end': 25, 'label': 'VORNAME'}\\n\",\n      \"{'start': 39, 'end': 100, 'label': 'STRASSE'}\\n\",\n      \"{'start': 125, 'end': 138, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 155, 'end': 178, 'label': 'STRASSE'}\\n\",\n      \"{'start': 178, 'end': 191, 'label': 'POSTLEITZAHL'}\\n\",\n      \"{'start': 393, 'end': 413, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 70.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \" \\n\",\n      \"ich verstehe Ihr Schreiben leider nicht.\\n\",\n      \" \\n\",\n      \"Der genannte Vertrag ist seit 09/2022 beendet. In diesem Vertrag handelte es\\n\",\n      \"sich um den Allgemeinstromzähler vom[redacted]. Dieser Zähler\\n\",\n      \"hat nun die Vertragsnummer[redacted] freundlichen Grüßen\\n\",\n      \" \\n\",\n      \"Friedhelm Schacht\\n\",\n      \" [redacted]0927999263[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 189, 'end': 211, 'label': 'STRASSE'}\\n\",\n      \"{'start': 253, 'end': 272, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 314, 'end': 347, 'label': 'STRASSE'}\\n\",\n      \"{'start': 357, 'end': 375, 'label': 'TELEFONNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 58.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"im Auftrag meines Sohnes Kurt[redacted] ich um die Erklärung des Postens Soforthilfe Dezember. Ich hatte bereits einige Male angerufen mit der Bitte, mir den Betrag aufzuschlüsseln. Leider konnten mir Ihre Mitarbeiter nur die Berechnungsgrundlagen nennen, aber nicht die einzelnen Faktoren (Beträge). Laut Verbraucherzentrale kann man sich den Betrag ausrechnen lassen. Daraufhin ergab sich eine Erstattung von 150,46 € statt 135,34 €.\\n\",\n      \"Mit freundlichen Grüßen\\n\",\n      \"Kurt[reda\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 60, 'end': 83, 'label': 'NACHNAME'}\\n\",\n      \"{'start': 508, 'end': 526, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 159.txt ===\\n\",\n      \"Vertragsnummer[redacted]Sehr geehrte Damen und Herren,\\n\",\n      \"Mit diesem Schreiben möchte ich Sie über meine Namensänderung aufgrund meiner Hochzeit am 14.4.23 informieren.\\n\",\n      \"Ab sofort heiße ich mit Nachnamen[redacted] Bitte ändern Sie Ihre Datenbestände entsprechend.\\n\",\n      \"Eine Bestätigung der Namensänderung finden Sie im Anhang.\\n\",\n      \"Mit freundlichen Grüßen[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 14, 'end': 25, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 200, 'end': 215, 'label': 'VORNAME'}\\n\",\n      \"{'start': 347, 'end': 362, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 165.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"mit Mail vom 16.02.2023 hatte ich bezüglich der neuen Preise ab 01. März 2023 hatte ich ihnen mitgeteilt, dass ich als langjähriges Mitglied des Landwirtvereins[redacted]en Vorteilsangebote annehme. Im Rahmen der Energieversorgung bestehen hier entsprechende Verträge.\\n\",\n      \"Ich bitte um Mitteilung, ob bei dem neuen Preis zum 01. März 2023 dies berücksichtigt wurde. Sofern nicht, bitte ich um Aktualisierung des neuen Preises.\\n\",\n      \"Mit freundlichen Grüßen[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 191, 'end': 209, 'label': 'WOHNORT'}\\n\",\n      \"{'start': 485, 'end': 510, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 171.txt ===\\n\",\n      \"Sehr geehrte Inergieversorger!\\n\",\n      \"Es ist nicht akzeptabel das mein Zugang nicht funktioniert ,ich bitte Sie dieses zeitnah bazuändern!!!\\n\",\n      \"Von meinem/meiner Galaxy gesendet\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"\\n\",\n      \"=== 170.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \" \\n\",\n      \"der angefügte Vertrag ist in „mein eon“ nicht angelegt. Ich bitte hier\\n\",\n      \"dringend um Korrektur, damit ich \\n\",\n      \"in beiden Vertragskonten die Zahlungsart auf Lastschriftverfahren umstellen\\n\",\n      \"kann.\\n\",\n      \" \\n\",\n      \"Mit besten Grüßen\\n\",\n      \" [redacted] und Objektbetreuung[redacted][redacted].:[redacted]:[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 241, 'end': 267, 'label': 'VORNAME'}\\n\",\n      \"{'start': 287, 'end': 303, 'label': 'STRASSE'}\\n\",\n      \"{'start': 303, 'end': 321, 'label': 'POSTLEITZAHL'}\\n\",\n      \"{'start': 323, 'end': 348, 'label': 'TELEFONNUMMER'}\\n\",\n      \"{'start': 349, 'end': 365, 'label': 'TELEFONNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 164.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"ich bitte Sie für meine neue Mietswohnung so schnell wie möglich den Strom freizuschalten und mir Vertragsunterlagen zuzuschicken.\\n\",\n      \"Anschrift der Wohnung:[redacted]ählernummer: 320206623943\\n\",\n      \"Mit freundlichen Grüßen[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 184, 'end': 224, 'label': 'STRASSE'}\\n\",\n      \"{'start': 273, 'end': 312, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 158.txt ===\\n\",\n      \"Bitte um Korrektur von Schlussrechnung\\n\",\n      \"Siehe anhang\\n\",\n      \"Grüß[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 56, 'end': 75, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 59.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"um unsere Abrechnung erstellen zu können benötigen wir DRINGEND die Zischenabrechnung Gas zum 31.12.2022 inkl. Gas Soforthilfe etc.\\n\",\n      \"Der Zählerstand zum 31.12.2023 war 24156, Vertragsnummer[redacted][redacted][redacted] senden Sie uns diese Zwischenabrechnung schnellstmöglich zu, gerne auch vorab über E-Mail.\\n\",\n      \"Viele Grüße,\\n\",\n      \"Carlo Becker\\n\",\n      \"Faust UG - Carstenstr.[redacted]-[redacted][redacted]- Mobil[redacted]example.com\\n\",\n      \"Registergericht: [redacted]RB 2095\\n\",\n      \"Geschäftsführer:\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 219, 'end': 230, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 230, 'end': 258, 'label': 'STRASSE'}\\n\",\n      \"{'start': 258, 'end': 279, 'label': 'POSTLEITZAHL'}\\n\",\n      \"{'start': 419, 'end': 422, 'label': 'HAUSNUMMER'}\\n\",\n      \"{'start': 423, 'end': 446, 'label': 'POSTLEITZAHL'}\\n\",\n      \"{'start': 446, 'end': 463, 'label': 'TELEFONNUMMER'}\\n\",\n      \"{'start': 470, 'end': 506, 'label': 'TELEFONNUMMER'}\\n\",\n      \"{'start': 535, 'end': 545, 'label': 'WOHNORT'}\\n\",\n      \"{'start': 569, 'end': 589, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 71.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"Ich habe für meinen Stromvertrag die Überweisung des Abschlags aus Versehen auf das falsche Konto getätigt.\\n\",\n      \"Das Konto, an welches ich überwiesen hatte, hat die IBAN DE60 9436 5282 2507 8700 65. Auf dieses Konto sollte ich bei meinem letzten Betrag bei der Fliegner Radisch GmbH überweisen, jedoch hat sich die IBAN mit dem Vetragswechsel geändert und ich habe das nicht mitbekommen, da der Brief zu neuen Stromvertrag von der Post nicht zugestellt wurde.\\n\",\n      \"Im Anhang find\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 590, 'end': 604, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 65.txt ===\\n\",\n      \"Betreuungsbüro \\\"Schmidtke KG\\\" L. Jäntsch\\n\",\n      \"_______________________________________\\n\",\n      \"24.08.2023\\n\",\n      \"Betreuungssache * Herr[redacted][redacted] 113 769\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"Ihr Schreiben vom 17.08.2023 kann diesseits nicht nachvollzogen werden.\\n\",\n      \"Zum Vertragskonto[redacted] ich mit Schreiben vom 10.08.2023 darüber informiert, dass noch ein Guthaben von 132,92 € vorhanden ist. Dieses bitte ich auf obiges Vertragskonto um zu buchen und mich entsprechend darüber zu informieren.\\n\",\n      \"Vielen Dank im Voraus\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 114, 'end': 129, 'label': 'NACHNAME'}\\n\",\n      \"{'start': 129, 'end': 144, 'label': 'DATUM'}\\n\",\n      \"{'start': 273, 'end': 295, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 550, 'end': 559, 'label': 'VORNAME'}\\n\",\n      \"{'start': 594, 'end': 603, 'label': 'VORNAME'}\\n\",\n      \"{'start': 608, 'end': 643, 'label': 'STRASSE'}\\n\",\n      \"{'start': 645, 'end': 666, 'label': 'TELEFONNUMMER'}\\n\",\n      \"{'start': 667, 'end': 696, 'label': 'TELEFONNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 73.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \" \\n\",\n      \"ich fordere Sie nochmals auf den Vertragspartner gem. meinem beigefügtem\\n\",\n      \"Schreiben vom 23.08.2023 zu korrigieren und mir dieses schriftlich zu\\n\",\n      \"bestätigen.\\n\",\n      \" \\n\",\n      \"Der Rechnungsempfänger für die Verbrauchsstelle muss zwingend\\n\",\n      \"„Höfig Scheuermann GmbH“ lauten, damit wir die offenen Posten aus\\n\",\n      \"beigefügter Mahnung begleichen können.\\n\",\n      \" \\n\",\n      \"Mit freundlichen Grüßen \\n\",\n      \" \\n\",\n      \"Inge Beer\\n\",\n      \"- Vorstand -\\n\",\n      \" \\n\",\n      \" \\n\",\n      \"Höfig Scheuermann GmbH[redacted]\\n\",\n      \"46156[redacted]:[redacted]-Mail: <mailto:[redacted]exa\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 435, 'end': 453, 'label': 'STRASSE'}\\n\",\n      \"{'start': 459, 'end': 473, 'label': 'WOHNORT'}\\n\",\n      \"{'start': 474, 'end': 496, 'label': 'TELEFONNUMMER'}\\n\",\n      \"{'start': 511, 'end': 530, 'label': 'NACHNAME'}\\n\",\n      \"{'start': 543, 'end': 562, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 67.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"ich bitte Sie mein Kundenkonto samt aller zu meiner Person gespeicherten Daten zu löschen. \\n\",\n      \"Andre Sauer[redacted].[redacted]seidel@example.com\\n\",\n      \"Vielen Dank und liebe Grüße [redacted]\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 134, 'end': 142, 'label': 'STRASSE'}\\n\",\n      \"{'start': 143, 'end': 163, 'label': 'POSTLEITZAHL'}\\n\",\n      \"{'start': 210, 'end': 222, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 9.txt ===\\n\",\n      \"[redacted]:[redacted]ähler: 486498046387\\n\",\n      \"Produktwechsel\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"anbei das Formular unterschrieben zurück.\\n\",\n      \"Bitte um Kenntnisnahme.\\n\",\n      \"Mit freundlichen Grüßen\\n\",\n      \"Gert[redacted] [redacted] Nachricht wurde von meinem Android Mobiltelefon mit [WEB.DE][1] Mail gesendet.\\n\",\n      \"[1]: http://WEB.DE\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 20, 'end': 50, 'label': 'VORNAME'}\\n\",\n      \"{'start': 210, 'end': 215, 'label': 'VORNAME'}\\n\",\n      \"{'start': 216, 'end': 239, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 172.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"Auf Grund eines Umzuges, und eines Strom Wechsels in den Öko Strom bei Eon.\\n\",\n      \"Möchte ich rückwirkend zum 31.07.2023 meinen Vertrag bei Eon Kündigen. Wie\\n\",\n      \"telefonisch vereinbart, schicke ich Ihnen eine Email mit einem\\n\",\n      \"Sonderkündigungsrecht.\\n\",\n      \"Meine Vertragsnummer wie folgt: das ist die alte Vertragsnummer[redacted]Meine neue Adresse:[redacted]\\n\",\n      \"Bei Rückfragen[redacted]fG Alfredo Schacht\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 331, 'end': 342, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 361, 'end': 413, 'label': 'STRASSE'}\\n\",\n      \"{'start': 428, 'end': 447, 'label': 'TELEFONNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 98.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"anbei die Kündigungsbestätigung meines bisherigen Versorgers.\\n\",\n      \" \\n\",\n      \"Mit freundlichem Gruß\\n\",\n      \" \\n\",\n      \"Josef[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 124, 'end': 132, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 166.txt ===\\n\",\n      \"Kundenummer :[redacted]Sehr geehrte Damen und Herren,\\n\",\n      \"ich bitte um einen günstigeren Tarif. Ich bin schon seit einigen Jahren\\n\",\n      \"Kunde bei Ihnen und die Strompreis Erhöhung im März ist mir zu teuer.\\n\",\n      \"Falls Sie mir nicht entgegen kommen können, werde ich leider kündigen\\n\",\n      \"müssen.\\n\",\n      \"Ich bedanke mich im Voraus.\\n\",\n      \"Telefonisch bin ich unter folgender Rufnummer erreichbar : 09926 90657\\n\",\n      \"Mit freundlichen Grüßen\\n\",\n      \"Holger Speer\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 13, 'end': 24, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 167.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"bitte den Termin für den Abschlag ändern; von Mitte des Monats zu Anfang des Monats.\\n\",\n      \"Meine Daten:\\n\",\n      \"Vor-, Nachname:[redacted]sdatum:[redacted]adresse:[redacted]ählernummer:[redacted]nummer:[redacted] freundlichen Grüßen\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 144, 'end': 163, 'label': 'VORNAME'}\\n\",\n      \"{'start': 170, 'end': 188, 'label': 'DATUM'}\\n\",\n      \"{'start': 196, 'end': 226, 'label': 'STRASSE'}\\n\",\n      \"{'start': 238, 'end': 256, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 263, 'end': 277, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 173.txt ===\\n\",\n      \"An das Serviceteam von Eon, \\n\",\n      \"im September 2023 habe ich am[redacted] Abschlag überwiesen und am 26.9 haben sie nochmal den Abschlag für September eingezogen, so dass ich jetzt doppelt bezahlt habe für September.\\n\",\n      \"Erstatten sie mir unverzüglich die 99,96 Euro auf mein Konto bei der Striebitz Christoph AG: DE79170269554043121865\\n\",\n      \"Striebitz Reichmann AG & Co. KG Kundennummer:[redacted] freundlichen Grüßen \\n\",\n      \"Dr.[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 58, 'end': 66, 'label': 'HAUSNUMMER'}\\n\",\n      \"{'start': 371, 'end': 395, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 420, 'end': 436, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 8.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren, \\n\",\n      \" \\n\",\n      \"vielen Dank für die Erstellung der Rechnung. Leider ist mir aber aufgefallen,\\n\",\n      \"dass bei den Rechnungen für die Vertragskonten[redacted][redacted]weils\\n\",\n      \"der Eon plus Rabatt nicht gewährt wurde. Aus diesem Grund bitte ich noch um\\n\",\n      \"eine Stellungnahme wenn möglich schriftlich bzw. einen Rückruf von Frau[redacted] eine Korrektur der beiden Rechnungen. \\n\",\n      \" \\n\",\n      \"Mit freundlichen Grüßen \\n\",\n      \"Natalia Lange\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 158, 'end': 172, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 172, 'end': 185, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 338, 'end': 356, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 66.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"bitte bündeln sie nachfolgende Verträge unter dem Bündelcode[redacted]träge: 407 776 915\\n\",\n      \"405 804 183\\n\",\n      \"403 903 357\\n\",\n      \"403 205 774\\n\",\n      \"403 344 921\\n\",\n      \"Vielen Dank.\\n\",\n      \"Mfg Traute Walter\\n\",\n      \"Diese Nachricht wurde von meinem Android Mobiltelefon mit [WEB.DE][1] Mail gesendet.\\n\",\n      \"[1]: http://WEB.DE\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 91, 'end': 106, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 57.txt ===\\n\",\n      \"Sehr geehrte(-r) Sachbearbeiter(-in) \\n\",\n      \" \\n\",\n      \" \\n\",\n      \"zum folgenden Vertragskonto wurde über Mein E.ON - Kontakt am 18.08.2023 folgende Kundenanfrage zum Thema \\\"\\\"Sonstiges\\\"\\\" abgesendet. Bitte um Bearbeitung! \\n\",\n      \" \\n\",\n      \"ALLE DATEN AUF EINEN BLICK: \\n\",\n      \" \\n\",\n      \" \\n\",\n      \"Geschäftspartner: 0101833271 \\n\",\n      \"Vertragskonto:[redacted]elefonnummer für Rückfragen: \\n\",\n      \"Nachricht/Anfrage:  \\n\",\n      \"„VERTRAGS NR.:[redacted]Ihr Schreiben vom 15 August 2023 wg. E-Mail-Adresse\\\" “ \\n\",\n      \" \\n\",\n      \" \\n\",\n      \" \\n\",\n      \"Freundliche Grüße \\n\",\n      \"Ihr E.ON Kundenservice \\n\",\n      \" \\n\",\n      \"www.eon.de \\n\",\n      \" \\n\",\n      \"E.ON Deutschland G\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 276, 'end': 292, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 357, 'end': 371, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 584, 'end': 604, 'label': 'VORNAME'}\\n\",\n      \"{'start': 641, 'end': 652, 'label': 'NACHNAME'}\\n\",\n      \"{'start': 780, 'end': 798, 'label': 'STRASSE'}\\n\",\n      \"{'start': 798, 'end': 834, 'label': 'POSTLEITZAHL'}\\n\",\n      \"\\n\",\n      \"=== 5.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"mit dieser E-Mail sende ich Ihnen die Daten und Papiere zu um den\\n\",\n      \"Stromzähler zu entsperren.\\n\",\n      \"Zählernummer: 1LOG0065054693\\n\",\n      \"Handynummer: 015201837094\\n\",\n      \"Vertragsnummer:[redacted] freundlichen Grüßen\\n\",\n      \"Veronika Walter\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 194, 'end': 208, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 43.txt ===\\n\",\n      \"Sehr geehrte Damen & Herren,\\n\",\n      \"anbei der Beleg ohne Geld Eingang bei mir bzw. genauer gesagt zuerst war Geld eingegangen was wieder zurücküberwiesen wurde weil der Vertrag eigentlich nicht zu Ende war\\n\",\n      \"aber nun habe ich einen neue Vertragsnr. und deshalb bitte um Überweisung meines Guthabens.\\n\",\n      \"Hering\\n\",\n      \"Eduard Thies[redacted][redacted]example.com\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 310, 'end': 328, 'label': 'TELEFONNUMMER'}\\n\",\n      \"{'start': 328, 'end': 337, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 156.txt ===\\n\",\n      \"Guten Tag,Vertragsnummer:[redacted][redacted][redacted][redacted] Mein Anliegen ist, da ich bis ende Oktober selten zuhause bin und kaum Strom verbrauche bitte ich ein neuen Abschlag von maximal von 20 Euro. Habe von 24.07 bis 16.08 23 gerade mal ein Verbrauch von:19 kw gehabt. MFG [redacted] ([redacted]\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 25, 'end': 35, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 35, 'end': 55, 'label': 'STRASSE'}\\n\",\n      \"{'start': 55, 'end': 65, 'label': 'STRASSE'}\\n\",\n      \"{'start': 65, 'end': 82, 'label': 'POSTLEITZAHL'}\\n\",\n      \"{'start': 300, 'end': 313, 'label': 'VORNAME'}\\n\",\n      \"{'start': 315, 'end': 334, 'label': 'TELEFONNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 142.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"in der Anlage befindet sich die Vollmacht meiner Mutter.\\n\",\n      \"Bitte fügen Sie den Vertrag[redacted] Mein E.ON von Bertram Steinberg-Wende \\n\",\n      \"mit dem Vertrag[redacted].\\n\",\n      \"-- \\n\",\n      \"Mit freundlichen Grüssen\\n\",\n      \"Bert[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 115, 'end': 129, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 184, 'end': 200, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 235, 'end': 255, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 94.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"ich bitte Sie für obiges Vertragskonto den monatlichen Abschlag auf 15,00 € zu reduzieren.\\n\",\n      \"Meine Eltern sind ausgezogen. Das Haus steht leer.\\n\",\n      \"Freundliche Grüße[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 190, 'end': 274, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 80.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"Ich kann mich nicht in mein Online Portal einloggen und bekomme hier immer\\n\",\n      \"folgenden Fehler (siehe Anhang). Können sie bitte meinen online Zugang\\n\",\n      \"freischalten? Danke\\n\",\n      \"Mit freundlichen Grüßen[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 220, 'end': 240, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 81.txt ===\\n\",\n      \"Betreff: Fristlose Kündigung meines Stromvertrags\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"ich,[redacted] möchte hiermit meinen Stromvertrag mit Ihnen fristlos\\n\",\n      \"kündigen. Die relevanten Vertragsdaten lauten wie folgt:\\n\",\n      \"Vertragskonto:[redacted]ählernummer: 1ISK0059213705\\n\",\n      \"Der Grund für diese fristlose Kündigung sind unzumutbare Vertragsänderungen,\\n\",\n      \"die ohne meine Zustimmung vorgenommen wurden und sich erheblich nachteilig\\n\",\n      \"auf meine Interessen auswirken.\\n\",\n      \"Wiederholte, nicht genehmigte Abschlagsänderungen ihrerse\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 85, 'end': 112, 'label': 'VORNAME'}\\n\",\n      \"{'start': 238, 'end': 250, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 1373, 'end': 1394, 'label': 'VORNAME'}\\n\",\n      \"{'start': 1394, 'end': 1442, 'label': 'STRASSE'}\\n\",\n      \"{'start': 1442, 'end': 1465, 'label': 'TELEFONNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 143.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"in der Anlage sende ich Ihnen meine Abwendungsvereinbarung.\\n\",\n      \"Mit freundlichen Grüßen\\n\",\n      \"Agatha[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 121, 'end': 137, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 157.txt ===\\n\",\n      \"Hallo,\\n\",\n      \"Bitte keine Werbung an[redacted]example.net oder[redacted]schicken\\n\",\n      \"Danke\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 29, 'end': 47, 'label': 'NACHNAME'}\\n\",\n      \"{'start': 63, 'end': 84, 'label': 'TELEFONNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 42.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"nach Tarifwechsel Strom sehe ich meinen neuen Vertrag nicht mehr im Online Portal. Ich bitte, den Vertrag hinzufügen:\\n\",\n      \"Vertragskonto: Nerger Grauel[redacted]ählernummer:[redacted]en Dank!\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 177, 'end': 187, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 199, 'end': 218, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 4.txt ===\\n\",\n      \"Vertragspartner: [redacted]konto: [redacted]nummer:[redacted]ählernummer: \\t7 GMT00 984726553\\n\",\n      \"Gewählter Tarif: \\tE.ON Erdgas Öko\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"unser Gaszähler wurde abgebaut, da wir eine Wärmepumpe installiert haben\\n\",\n      \"und kein Gasbezug mehr benötigen.\\n\",\n      \"Das Ausbauprotokoll des Netzbetreibers füge ich der Anlage bei.\\n\",\n      \"Der Schlußstand unserer Belieferung ist bereits im Portal eingetragen.\\n\",\n      \"Ich bedanke mich für die Dato unproblematische Vertragsabwicklung.\\n\",\n      \"*Mit freundlichen Grüßen[redacted\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 17, 'end': 43, 'label': 'VORNAME'}\\n\",\n      \"{'start': 50, 'end': 69, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 76, 'end': 88, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 518, 'end': 536, 'label': 'VORNAME'}\\n\",\n      \"{'start': 563, 'end': 603, 'label': 'STRASSE'}\\n\",\n      \"{'start': 612, 'end': 632, 'label': 'TELEFONNUMMER'}\\n\",\n      \"{'start': 633, 'end': 650, 'label': 'TELEFONNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 180.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"wir haben Probleme bei der Meldung des Zählerstandes zu o. g. Vertragskonto.\\n\",\n      \"Am 14.8.23 haben wir für den Zähler[redacted]einen Stand von 37.102,5\\n\",\n      \"abgelesen.\\n\",\n      \"Sollte die Registrierung des Zählerstandes so nicht möglich sein, bitte ich\\n\",\n      \"um Zusendung der Anforderung mit dem Gastzugangscode per Post.\\n\",\n      \"Mit freundlichen Grüßen\\n\",\n      \"Kä[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 143, 'end': 153, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 354, 'end': 399, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 68.txt ===\\n\",\n      \"Liebe Grüße, ich sende Bilder als Beweis dafür, dass ich die Raten bezahlt\\n\",\n      \"habe. Vertragsnummer[redacted]a[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 95, 'end': 116, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 117, 'end': 124, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 40.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren. Ich entschuldige mich für die entstandenen Schulden und möchte hiermit eine Abwendungsvereinbarung mit ihnen treffen.\\n\",\n      \"Leider konnte ich die Summe nicht direkt zahlen da mir als allein Erziehender die Mittel dazu fehlen. Die erste Rate in Höhe von 35,57€ werde ich so schnell wie möglich überweisen.\\n\",\n      \"Freundliche Grüße Stephen Beckmann\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"\\n\",\n      \"=== 6.txt ===\\n\",\n      \"[redacted]. [redacted].[redacted]nr[redacted]Sehr geehrtes EON Team,laut eines EON Mitarbeiters bei dem Telefongespräch gestern hätte ich für diesen August 2023 nur 110€ an Abschlagszahlung für Gas bezahlt was aber nicht stimmen kann.\\n\",\n      \"Im Anhang befindet sich der Nachweis das meine Abschlagszahlung für Gas im August 2023 ganze 200€ betragen haben.\\n\",\n      \"Bitte um volle Berechnung meiner Zahlung.\\n\",\n      \"Mit freundlichen Grüßen[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 0, 'end': 25, 'label': 'VORNAME'}\\n\",\n      \"{'start': 27, 'end': 46, 'label': 'POSTLEITZAHL'}\\n\",\n      \"{'start': 47, 'end': 64, 'label': 'DATUM'}\\n\",\n      \"{'start': 66, 'end': 77, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 446, 'end': 462, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 54.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \" \\n\",\n      \"wir sind umgezogen:\\n\",\n      \" \\n\",\n      \"Grundstücksges. Mudering 49\\n\",\n      \"Neue Adresse:[redacted][redacted]vorher[redacted]\\n\",\n      \" \\n\",\n      \"Alle anderen Daten bleiben bestehen (Bankverbindung zB)\\n\",\n      \" \\n\",\n      \"Mit freundlichen Grüßen\\n\",\n      \" \\n\",\n      \"Helge Albers\\n\",\n      \"Buchhaltung\\n\",\n      \" \\n\",\n      \"Grundstücksges. Mudering 49\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 96, 'end': 112, 'label': 'STRASSE'}\\n\",\n      \"{'start': 112, 'end': 133, 'label': 'POSTLEITZAHL'}\\n\",\n      \"{'start': 139, 'end': 180, 'label': 'STRASSE'}\\n\",\n      \"\\n\",\n      \"=== 141.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"ich nehme Bezug auf die Mahnung vom 23.08.2023.\\n\",\n      \"Bereits vor einigen Wochen habe ich über Ihr Kontaktportal eine Anfrage bezüglich der Zahlungsmöglichkeiten geschickt. Leider habe ich bis heute keine Rückmeldung erhalten.\\n\",\n      \"Mir ist es nicht möglich den geforderten Betrag auf einmal zu leisten, da ich bereits mit den aktuellen Abschlagszahlungen für das Gas an der Grenze meiner Möglichkeiten bin. Aus diesem Grund bitte ich um eine Stundung. Zur Zeit wäre es mir möglich\\n\",\n      \"Predicted PII spans:\\n\",\n      \"\\n\",\n      \"=== 155.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"ich habe aufgrund des Todes meines Vaters den Stromvertrag von ihm übernommen. Diesen habe ich am 21.August 2023 gewechselt. Die neue Vertragsnummer ist[redacted]\\n\",\n      \"Die Zählernummer allerdings ist gleich geblieben 1APADA91675322.\\n\",\n      \"Wenn ich mich jetzt in mein Vertragskonto online einloggen möchte, wird mir nur der alte Vertrag angezeigt. Dort steht auch, dass dieser alte Vertrag deaktiviert wurde. Den neuen Vertrag kann ich aber leider online nicht sehen.\\n\",\n      \"Wie gehe ich \\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 183, 'end': 194, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 595, 'end': 624, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 83.txt ===\\n\",\n      \"Guten Abend, \\n\",\n      \"leider kann ich mich auf ihrem Portal nicht registrieren, da der oben genannte Vertrag mit falscher E-Mail versehen wurde. \\n\",\n      \"Bitte auf die richtige E-Mail-Adresse korrigieren. \\n\",\n      \"Die lautet: aldoflantz@example.net\\n\",\n      \"Mit freundlichen Grüßen [redacted] meinem iPad gesendet\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 249, 'end': 282, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 169.txt ===\\n\",\n      \"Hallo Zusammen,\\n\",\n      \"da ich ich für den Vertrag mit der Nummer[redacted] die falsche Zählernummer angegeben habe, anbei ein Bild von der richtigen. - 110140311\\n\",\n      \"Es grüßt Sie freundlich \\n\",\n      \"Hilde Reising\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 57, 'end': 72, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 97.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"Bezug nehmend auf Ihr Schreiben vom 11.08.2023 erhalten Sie die\\n\",\n      \"Bescheinigung der Firma über den Stromverbrauch.\\n\",\n      \"Freundliche Grüße\\n\",\n      \"Sigmund Schmidtke\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"\\n\",\n      \"=== 168.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"Bitte ändern Sie meine Fälligkeiten ab. Ab jetzt bitte ich Sie immer die Abschläge zum Ende des Monats also zum 30ten einzuziehen.\\n\",\n      \"MFG\\n\",\n      \"Schmiedt\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"\\n\",\n      \"=== 96.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"wir sind bereits online registriert und möchten zu bestehenden Verträgen[redacted][redacted] 404[redacted] folgende Verträge hinzufügen um online\\n\",\n      \"Zugriff darauf zu haben:[redacted]liche Grüße\\n\",\n      \"Uta Aumann\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 103, 'end': 115, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 115, 'end': 126, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 130, 'end': 137, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 201, 'end': 231, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 82.txt ===\\n\",\n      \"bitte rufen Sie mich an wegen Vertragsbündelung.\\n\",\n      \"Vertrag[redacted] Vertrag[redacted]en Dank im voraus.[redacted] Hermann Etzler\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 56, 'end': 70, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 78, 'end': 93, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 111, 'end': 122, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 140.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren, [redacted] finden ist die Vereinbarung. Vielen Dank im voraus für die Bearbeitung. \\n\",\n      \"Mit freundlichen Grüßen \\n\",\n      \"Ing.[redacted]äkel Ing.[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 31, 'end': 45, 'label': 'STRASSE'}\\n\",\n      \"{'start': 148, 'end': 158, 'label': 'VORNAME'}\\n\",\n      \"{'start': 167, 'end': 182, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 7.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"wann bekomme ich meine Abrechnung? Der Vertrag ist seit Januar 23 beendet\\n\",\n      \"Meine Daten:\\n\",\n      \"Vor-, Nachname:[redacted]sdatum:[redacted]adresse:[redacted]ählernummer:[redacted]nummer:[redacted] freundlichen Grüßen\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 133, 'end': 162, 'label': 'VORNAME'}\\n\",\n      \"{'start': 169, 'end': 187, 'label': 'DATUM'}\\n\",\n      \"{'start': 195, 'end': 210, 'label': 'STRASSE'}\\n\",\n      \"{'start': 222, 'end': 235, 'label': 'POSTLEITZAHL'}\\n\",\n      \"{'start': 242, 'end': 256, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 55.txt ===\\n\",\n      \"Vertragsnummer[redacted]Steffi[redacted]grund des Wasserschadens vergangenen Jahres,bitten wir dies für das kommende Jahr zu berücksichtigen\\n\",\n      \"Im Anhang die Stromverbrauchsmitteilung Trocknungsmaßnahme\\n\",\n      \"Diese Nachricht wurde von meinem Android Mobiltelefon mit GMX Mail gesendet.\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 14, 'end': 25, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 31, 'end': 49, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 41.txt ===\\n\",\n      \"Hiermit schicke ich die Unterlagen für den Zähler von[redacted],[redacted]\\n\",\n      \"Die Kundennummer[redacted]gehört zur Zählernummer 1APA018847123 .\\n\",\n      \"Anbei schicke ich die Unterlagen für diesen Zähler.\\n\",\n      \"Da ein Fehler aufgetreten ist, möchten Sie die Unterlagen von Familie\\n\",\n      \" Hans-Werner/Miriam Schuster[redacted]sehen. Wir haben die Erlaubnis von Familie Schuster erhalten, für die\\n\",\n      \"Prüfung des Zähler mit der Nummer 1APA0189762453 .\\n\",\n      \"Vielen Dank für die schnelle Klärung Familie[redacted]\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 53, 'end': 66, 'label': 'VORNAME'}\\n\",\n      \"{'start': 67, 'end': 105, 'label': 'STRASSE'}\\n\",\n      \"{'start': 122, 'end': 133, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 323, 'end': 356, 'label': 'STRASSE'}\\n\",\n      \"{'start': 521, 'end': 527, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 69.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren hiermit nochmals Bestätigung Abschlag August bezahlt wurde Mit freundlichen Grüßen[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 112, 'end': 118, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 45.txt ===\\n\",\n      \"Sehr geehrter Herr[redacted]\\n\",\n      \"anbei, wie eben besprochen, die Kontoauszüge, mit den von uns geleisteten\\n\",\n      \"Abschlägen. Ich bin mal bis zum Februar zurückgegangen.\\n\",\n      \"Mit freundlichen Grüßen\\n\",\n      \"Gerda[redacted]\\n\",\n      \"44082[redacted][redacted][redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 18, 'end': 27, 'label': 'NACHNAME'}\\n\",\n      \"{'start': 187, 'end': 222, 'label': 'STRASSE'}\\n\",\n      \"{'start': 228, 'end': 241, 'label': 'WOHNORT'}\\n\",\n      \"{'start': 241, 'end': 268, 'label': 'TELEFONNUMMER'}\\n\",\n      \"{'start': 268, 'end': 289, 'label': 'TELEFONNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 3.txt ===\\n\",\n      \"Guten Tag,\\n\",\n      \"hiermit schicke ich Ihnen die noch fehlenden Angaben:\\n\",\n      \"Übergabedatum: 01.08.2023\\n\",\n      \"Mieter: Isabelle Eckbauer[redacted][redacted]\\n\",\n      \"Vermieter: Dr.[redacted]n\\n\",\n      \"Zählernummer: 1ISK0070547123\\n\",\n      \"Zählerstand: 0022386623\\n\",\n      \"Vielen Dank[redacted]bauer\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 116, 'end': 149, 'label': 'TELEFONNUMMER'}\\n\",\n      \"{'start': 149, 'end': 172, 'label': 'NACHNAME'}\\n\",\n      \"{'start': 187, 'end': 203, 'label': 'VORNAME'}\\n\",\n      \"{'start': 269, 'end': 282, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 79.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren, \\n\",\n      \"hiermit sende ich Ihnen, den Kontoauszug für Juni 2023. \\n\",\n      \"Mit freundlichen Grüßen \\n\",\n      \"Janin Fechner MBA.\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"\\n\",\n      \"=== 178.txt ===\\n\",\n      \"Hiermit übersende ich Ihnen den unterschriebenen Stromvertrag.\\n\",\n      \"Mit freundlichem Gruß[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 84, 'end': 100, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 86.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"hiermit wird der folgende Vertrag fristgerecht widerrufen.\\n\",\n      \"Lieferstelle:[redacted]ählernummer: 1DZG0060736543\\n\",\n      \"Vertragspartner:[redacted] bestätigen Sie diesen Widerruf.\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 103, 'end': 159, 'label': 'STRASSE'}\\n\",\n      \"{'start': 203, 'end': 263, 'label': 'STRASSE'}\\n\",\n      \"\\n\",\n      \"=== 151.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"bitte senden Sie mir meinen aktuellen Arbeits- und Grundpreis brutto per E-Mail zu.\\n\",\n      \"Steht aktuell eine Preisanpassung an, falls ja teilen Sie mir bitte das Datum der Erhöhung und die neuen Preiskonditionen mit, alternativ lassen Sie mir bitte das Preisanpassungsschreiben per E-Mail zukommen.\\n\",\n      \" \\n\",\n      \"Vielen Dank!\\n\",\n      \"Mit freundlichen Grüßen[redacted]berg[redacted]zähler 1ESY1166483729\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 362, 'end': 373, 'label': 'VORNAME'}\\n\",\n      \"{'start': 377, 'end': 427, 'label': 'STRASSE'}\\n\",\n      \"\\n\",\n      \"=== 145.txt ===\\n\",\n      \"Sehr geehrte Frau[redacted]\\n\",\n      \"Wie bereits Telefonisch besprochen sende ich ihnen das Schreiben von\\n\",\n      \"BonnNetz. Vielen Dank für ihre Hilfe.\\n\",\n      \"Mit freundlichen Grüßen[redacted]tz\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 17, 'end': 31, 'label': 'NACHNAME'}\\n\",\n      \"{'start': 162, 'end': 177, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 93.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren!\\n\",\n      \"Wie ich Ihnen bereits telefonisch mitgeteilt habe, kann ich meinen \\n\",\n      \"Zählerstand nicht ablesen, weil dieser gar nicht angezeigt wird. Eine \\n\",\n      \"Betätigung der Infotaste hat auch keinerlei Reaktion des Zählers \\n\",\n      \"hervorgerufen. Bitte teilen Sie mir mit, wie es weiter geht. Ein Foto mit \\n\",\n      \"Zählernummer erhalten Sie im Anhang. MfG[redacted]\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 351, 'end': 375, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 87.txt ===\\n\",\n      \"Guten Tag, ich beziehe strom von Ihnen und wohl auch von der EnBW. Mein Vermieter hat ohne Absprache mich bei der EnBW angemeldet. Ich würde gerne bei Ihnen bleiben und bitte Sie sich mit der EnBW in Verbindung zu setzen.\\n\",\n      \"Mit freundlichen Grüßen[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 245, 'end': 282, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 78.txt ===\\n\",\n      \"Guten Tag,\\n\",\n      \"im Anhang ist ein aktuelles Foto vom Zählerstand.\\n\",\n      \"Bitte um eine Anpassung Ihrer letzten Rechnung bzw Forderung und den monatlichen Abschlag, der Ihrerseits verdoppelt wurde.\\n\",\n      \"Vertragsnummer:[redacted]liche Grüße\\n\",\n      \"Rosemarie Niemeier\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 200, 'end': 217, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 50.txt ===\\n\",\n      \"Guten Tag,\\n\",\n      \"Vertragskonto :[redacted]ählernummer : 1HLY0205770365\\n\",\n      \"Anbei Kontoauszug\\n\",\n      \"Mit freundlichen Grüßen[redacted] Nachricht wurde von meinem Android Mobiltelefon mit GMX Mail gesendet.\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 26, 'end': 38, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 108, 'end': 129, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 2.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"leider wurde mein Abschlag den ich für August überwiesen habe für den Abschlag für Juni verrechnet.\\n\",\n      \"Wie schon mindesten 10 mal von mir berichtet, habe ich den Abschlag von148 € für Juni auf das Konto das in mein e-on angegeben ist überwiesen,DE40926301819767992111.\\n\",\n      \"Sie müssten nur den Betrag umbuchen auf DE57671088940322928241.\\n\",\n      \"Ich bitte Sie dies zu machen, weil ich sonst wieder eine Zahlungserinnerung für August bekomme.\\n\",\n      \"Mit freundichen Grüssen\\n\",\n      \"Dipl.-Ing. Leo[reda\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 495, 'end': 508, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 44.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"leider habe ich noch immer keinen Lidlgutschein im Wert von 50€ erhalten. Aufgrund meins Stromvertrages. Der Juncken GmbH Kundenservice hat mich an Sie verwiesen.\\n\",\n      \"Wann kann ich mit dem Erhalt rechnen Stromerstbelieferung war der 09\\n\",\n      \"06.23.\\n\",\n      \"Vielen Dank\\n\",\n      \"Beste Grüße\\n\",\n      \"Schleich\\n\",\n      \"Diese Nachricht wurde von meinem Android Mobiltelefon mit [WEB.DE][1] Mail gesendet.\\n\",\n      \"[1]: http://WEB.DE\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"\\n\",\n      \"=== 0.txt ===\\n\",\n      \"Wie angefordert der Kontoauszug. Abbuchung Euro 103,22.\\n\",\n      \"Gesendet mit der Stiffel AG Mail App\\n\",\n      \"<http://www.t-online.de/service/redir/emailmobilapp_ios_smartphone_footerlink.htm>\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"\\n\",\n      \"=== 52.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"Ich bitte um Löschung sämtlicher persönlicher Daten bei Ihnen, insbesondere des MeinEON Accounts, da ich nicht mehr bei Ihnen Kunde bin.\\n\",\n      \"Mit freundlichen Grüßen[redacted]z\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 191, 'end': 205, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 46.txt ===\\n\",\n      \"Stromvertrag \\n\",\n      \"Lieferstelle:[redacted]zähler 1EBZ0100763912\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"ich bin zum 01.03.2023 in die Lieferstelle eingezogen. \\n\",\n      \"Bitte hinterlegen Sie als Grundversorger den Einzug bei sich.\\n\",\n      \"Vielen Dank.\\n\",\n      \"Mit freundlichen Grüßen\\n\",\n      \"Joachim Trupp\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 27, 'end': 63, 'label': 'STRASSE'}\\n\",\n      \"\\n\",\n      \"=== 91.txt ===\\n\",\n      \"Guten Tag,\\n\",\n      \"wie gewünscht sende ich Ihnen den Auftrag noch einmal zu.\\n\",\n      \"Der Auftrag wurde allerdings auch schon per Post am 24.07.2023 versandt.\\n\",\n      \"Da die Auflösung des vorherigen Vertrages Ihr Verschulden ist bitte ich nun um schnellstmögliche Bearbeitung.\\n\",\n      \"Mit freundlichem Gruß\\n\",\n      \"Prof. Gloria[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 286, 'end': 295, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 85.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"imAnhang befinden sich 2 Bilder, die zeigen, dass die Ratenzahlung von August zweimal abgebucht wurde. Bitte überweisen Sie mir den Betrag von 90,00€ zurück auf mein Konto.\\n\",\n      \"Mit freundlichen Grüßen[redacted] Nachricht wurde von meinem Android Mobiltelefon mit [WEB.DE][1] Mail gesendet.\\n\",\n      \"[1]: http://WEB.DE\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 227, 'end': 254, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 153.txt ===\\n\",\n      \"Hallo\\n\",\n      \"Habe versucht mehrmals telefonisch mein Anliegen zu klären\\n\",\n      \"Leider wenig Erfolg\\n\",\n      \"Habe offene Betrag über dieses Konto\\n\",\n      \"Möchte Sie bitten um teilzahlung bitte um Rückmeldung\\n\",\n      \" Mfg[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 180, 'end': 187, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 147.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \" \\n\",\n      \"ich habe meinen Stromvertrag (Vertragsnummer: 401528618) mit meinem\\n\",\n      \"Gasvertrag (Vertragsnummer: 401528618) gebündelt. In den Rechnungen für 2023\\n\",\n      \"erscheint dieser Vorteil „Bündelbonus“ nicht. Ich bitte Sie diesen zu\\n\",\n      \"berücksichtigen und die Rechnungen entsprechend anzupassen.\\n\",\n      \" \\n\",\n      \"Bei Fragen stehe ich Ihnen sehr gerne zur Verfügung.\\n\",\n      \" \\n\",\n      \" \\n\",\n      \"Mit freundlichen Grüßen[redacted][redacted].: 0930244918[redacted]example.org\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 390, 'end': 437, 'label': 'STRASSE'}\\n\",\n      \"{'start': 437, 'end': 459, 'label': 'POSTLEITZAHL'}\\n\",\n      \"{'start': 472, 'end': 487, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 146.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren, \\n\",\n      \"wie besprochen sende ich Ihnen die Unterlagen zur Vertragsnummer[redacted]sowie die Angebotsnummer[redacted]. \\n\",\n      \"Für weitere Rückfragen können Sie mich gerne per Mail erreichen.\\n\",\n      \"Mit freundlichen Grüßen \\n\",\n      \"Dipl.-Ing.[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 96, 'end': 109, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 253, 'end': 272, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 84.txt ===\\n\",\n      \"Durch einen Fehler ihrerseits wird mir seit Februar 2023 kein Abschlag\\n\",\n      \"abgebucht.Mehrere Anrufe und E-Mails werden einfach ignoriert. Bitte\\n\",\n      \"überprüfen Sie meinen Vertrag mit der Nr.[redacted]ollte ich nach 4 Wochen nichts hören werde ich meinen Rechtschutz\\n\",\n      \"einschalten.\\n\",\n      \"MfG Christl Koch\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 181, 'end': 193, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 90.txt ===\\n\",\n      \"Bitte senden Sie mir den Rechnungsnachweis seit Vertragsbeginn mit den\\n\",\n      \"entsprechenden Zählerstände.\\n\",\n      \"Freundliche Grüße[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 117, 'end': 137, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 47.txt ===\\n\",\n      \"Guten Tag,\\n\",\n      \" \\n\",\n      \"vor kurzem habe ich mich entschieden zu E.ON Strom zu wechseln.\\n\",\n      \" \\n\",\n      \"Leider gibt es nun bei der Regestrierung unter Punkt 2 Probleme (siehe \\n\",\n      \"Fotos im Anhang).\\n\",\n      \" \\n\",\n      \"Was kann ich jetzt noch machen?\\n\",\n      \" \\n\",\n      \"Mit freundlichen Grüßen\\n\",\n      \"Erich[redacted]\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 234, 'end': 286, 'label': 'STRASSE'}\\n\",\n      \"\\n\",\n      \"=== 1.txt ===\\n\",\n      \"Hallo liebes Eon Team,\\n\",\n      \"es geht um die Vertragsnummer[redacted] der Einrichtung meines neuen Vertrages wurde leider die Überweisung als\\n\",\n      \"Zahlungsart gewählt von dem jungen Kollegen an der Wohnungstür. Ich würde\\n\",\n      \"es gerne wieder per Lastschrift abbuchen lassen, um mir den Stress zu\\n\",\n      \"ersparen.\\n\",\n      \"Verbraucherstelle ist weiterhin die[redacted][redacted]\\n\",\n      \"Gruß Berthold Huhn\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 52, 'end': 67, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 329, 'end': 345, 'label': 'STRASSE'}\\n\",\n      \"{'start': 345, 'end': 359, 'label': 'POSTLEITZAHL'}\\n\",\n      \"\\n\",\n      \"=== 53.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \" \\n\",\n      \"für ein altes Konto hatte ich die Mailanschrift[redacted]example.com\\n\",\n      \"<mailto:[redacted].com> gewählt. Da wir umgezogen sind und das Konto\\n\",\n      \"nicht mehr aktiv ist, habe ich diesem alten Konto eine neue Mailadresse\\n\",\n      \"gegeben, um die vorgenannte Adresse für mein aktuelles Konto:\\n\",\n      \" \\n\",\n      \"E.ON KonstantStrom\\n\",\n      \"In Belieferung\\n\",\n      \"Jasmin Meyer[redacted]konto:[redacted]ählernummer:\\n\",\n      \"1EFR22650578465\\n\",\n      \" \\n\",\n      \"benutzen möchte. Leider war hier eine Umstellung nicht möglich. Ich bitte um\\n\",\n      \"Prüfung und M\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 80, 'end': 88, 'label': 'EMAIL'}\\n\",\n      \"{'start': 108, 'end': 122, 'label': 'EMAIL'}\\n\",\n      \"{'start': 355, 'end': 407, 'label': 'STRASSE'}\\n\",\n      \"{'start': 413, 'end': 425, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 617, 'end': 634, 'label': 'EMAIL'}\\n\",\n      \"{'start': 654, 'end': 677, 'label': 'EMAIL'}\\n\",\n      \"{'start': 833, 'end': 841, 'label': 'EMAIL'}\\n\",\n      \"{'start': 861, 'end': 875, 'label': 'EMAIL'}\\n\",\n      \"{'start': 1055, 'end': 1063, 'label': 'EMAIL'}\\n\",\n      \"{'start': 1083, 'end': 1097, 'label': 'EMAIL'}\\n\",\n      \"\\n\",\n      \"=== 34.txt ===\\n\",\n      \"#### Order \\n\",\n      \" \\n\",\n      \"Anliegen*: Erdgas \\n\",\n      \" \\n\",\n      \"Jahresverbrauch (kWh/Jahr)*: ohne Relevanz \\n\",\n      \" \\n\",\n      \"Nachricht: Vertragsnummer[redacted]Ihr Schreiben aus August. Ich möchte vom Bündelbonus partizipieren. Mein Bündel-Code ist 721 992 747 Ich erbitte Informationen und einen Vorschlag \\n\",\n      \" \\n\",\n      \"Ihr Name*: Vladimir Schleich \\n\",\n      \" \\n\",\n      \"Firmenname*: Vladimir Schleich \\n\",\n      \" \\n\",\n      \"PLZ und Ort*:[redacted]-Mail*:[redacted]example.com \\n\",\n      \" \\n\",\n      \" \\n\",\n      \"Ich akzeptiere die unten genannte Einwilligungserklärung.* \\n\",\n      \" \\n\",\n      \": on \\n\",\n      \" \\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 106, 'end': 137, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 366, 'end': 390, 'label': 'POSTLEITZAHL'}\\n\",\n      \"{'start': 397, 'end': 406, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 20.txt ===\\n\",\n      \"Guten Tag. \\n\",\n      \"Der nächste Abschlag ist am 31.8 fällig. \\n\",\n      \"Habe das Ende Juli mit einem Kollegen am Call Center ausgemacht. \\n\",\n      \"Bitte um Bearbeitung das der Betrag Ende August überwiesen wird. \\n\",\n      \"Das Konto ist ausgeglichen. \\n\",\n      \"Vielen Dank. \\n\",\n      \"Mit freundlichen Grüßen \\n\",\n      \"Herr[redacted][redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 258, 'end': 266, 'label': 'VORNAME'}\\n\",\n      \"{'start': 266, 'end': 318, 'label': 'STRASSE'}\\n\",\n      \"\\n\",\n      \"=== 135.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"anbei die angeforderten Daten zum Wechsel zu EON.\\n\",\n      \"Vertragsnummer:[redacted]gabedatum: 30.04.2023\\n\",\n      \"Verkäufer: Hellwig GmbH & Co. KG[redacted]äufer: L[redacted]ählernummer[redacted]ählerstand 38335,6\\n\",\n      \"Ablesedatum: 30.04.2023\\n\",\n      \"Mit freundlichen Grüßen\\n\",\n      \"Achim[redacted]----------------------------------------------------------------\\n\",\n      \"Gesendet mit der Graf GmbH & Co. KG Mail App\\n\",\n      \"<https://kommunikationsdienste.t-online.de/redirects/email_app_android_sendmail_footer>\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 96, 'end': 113, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 167, 'end': 215, 'label': 'STRASSE'}\\n\",\n      \"{'start': 223, 'end': 276, 'label': 'VORNAME'}\\n\",\n      \"{'start': 287, 'end': 304, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 376, 'end': 398, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 109.txt ===\\n\",\n      \"Guten Tag liebes EON-Team,\\n\",\n      \"die Adresse lautet:[redacted]zeichnung: Kellergeschoss\\n\",\n      \"Bitte entnehmen Sie das aktuelle Bild des Stromzählers der Anlage.\\n\",\n      \"Dies ist der Wert aus dem Übergabeprotokoll der Wohnung:\\n\",\n      \"Zähler Nr. 5785.075, 1861084733875645/NZ Stand: 048960,50.\\n\",\n      \"Vielen Dank im Voraus!\\n\",\n      \"Ich freue mich über eine positive Rückmeldung.\\n\",\n      \"Marion Bloch\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 46, 'end': 88, 'label': 'STRASSE'}\\n\",\n      \"\\n\",\n      \"=== 108.txt ===\\n\",\n      \"Sehr geehrter EON,\\n\",\n      \"Hiermit teile ich euch noch mal eine Kopie des Übergabeprotokolls mit zum\\n\",\n      \"Abschließen des o.g. Stromvertrags.\\n\",\n      \"*Vertragskonto:[redacted]Zählernummer: 1EBZ0102456941*\\n\",\n      \"Ich bitte euch gerne um eine schnelle Bearbeitung der Unterlagen und\\n\",\n      \"möglichst eine Rückmeldung.\\n\",\n      \"mit den besten Grüßen\\n\",\n      \"Jadwiga[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 144, 'end': 157, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 313, 'end': 319, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 120.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren, ich habe bereit zum 1. August den Beitrag überwiesen. Mit freundlichen Grüßen,[redacted]\\n\",\n      \"Gesendet mit der mobilen Mail App\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 109, 'end': 117, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 134.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"wie in o.g. Telefonat besprochen, warten wir noch immer auf unsere Gasabrechnung.\\n\",\n      \"Den Zählerstand hatte ich in besagtem Telefonat mitgeteilt: 10263 zum 24.04.2023.\\n\",\n      \"Ich bitte um Rechnungserstellung bis spätestens 11.08.2023.\\n\",\n      \"Vielen Dank\\n\",\n      \"Mit freundlichen Grüßen\\n\",\n      \"Silvia Wähner\\n\",\n      \"Diese Nachricht wurde von meinem Android Mobiltelefon mit GMX Mail gesendet.\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"\\n\",\n      \"=== 21.txt ===\\n\",\n      \"Liebes Team,\\n\",\n      \"Ich möchte gerne zwei Ladesäulen auf mein Grundstück bauen. \\n\",\n      \"Geht dieses das unsere Gäste mit Karte zahlen? \\n\",\n      \"Es ist für unsere \\n\",\n      \"Pension [redacted] gehört mir.\\n\",\n      \"Was können Sie mir anbieten, wenn ich es nur bestelle ? \\n\",\n      \"Vielen Dank & viele Grüße \\n\",\n      \"Alwina Häring\\n\",\n      \"Gesendet mit der mobilen Mail App\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 149, 'end': 197, 'label': 'STRASSE'}\\n\",\n      \"\\n\",\n      \"=== 35.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"wie mit Ihrem Kollegen telefonisch besprochen, anbei das Fotos des Zähler von oben genanntem Vertrag.\\n\",\n      \"Mit freundlichen Grüßen / With best regards[redacted]holz\\n\",\n      \"Einkauf / Purchasing\\n\",\n      \"Wende Stadelmann GmbH[redacted]:[redacted] 11\\n\",\n      \"www.hgo-gmbh.de\\n\",\n      \"Skype: Gerolf_Buchholz\\n\",\n      \"Amtsgericht[redacted]RB 89781\\n\",\n      \"Vorstand: Hanspeter Ruppert, Heinfried Fischer\\n\",\n      \"Aufsichtsratsvorsitzende: Dr. Astrid Köhler\\n\",\n      \"----------------------- Vertraulichkeitshinweis / Confidentiality notice ---------\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 176, 'end': 188, 'label': 'VORNAME'}\\n\",\n      \"{'start': 235, 'end': 284, 'label': 'STRASSE'}\\n\",\n      \"{'start': 285, 'end': 306, 'label': 'TELEFONNUMMER'}\\n\",\n      \"{'start': 360, 'end': 377, 'label': 'WOHNORT'}\\n\",\n      \"\\n\",\n      \"=== 23.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"Ich habe[redacted] Haus meines verstorbenen\\n\",\n      \"Onkels übernommen.\\n\",\n      \"Leider wurde damals versäumt den Namen im Vertrag zu ändern.\\n\",\n      \"Ich bitte die Daten im Vertrag entsprechend zu ändern.[redacted].06.1980\\n\",\n      \"Die Bankverbindung(Einziehung vom Konto meiner Schwester Katrin[redacted] kann weiter verwendet werden.\\n\",\n      \"Mit freundlichen Grüßen[redacted] Nachricht wurde von meinem Android Mobiltelefon mit GMX Mail gesendet.\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 39, 'end': 48, 'label': 'HAUSNUMMER'}\\n\",\n      \"{'start': 208, 'end': 235, 'label': 'VORNAME'}\\n\",\n      \"{'start': 307, 'end': 317, 'label': 'NACHNAME'}\\n\",\n      \"{'start': 371, 'end': 401, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 37.txt ===\\n\",\n      \"Guten Tag,\\n\",\n      \"im Anhang mein Stromzählerstand.\\n\",\n      \"Ich bitte um eine kurze Rückmeldung.\\n\",\n      \"Mfg[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 84, 'end': 93, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 122.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"die Betreuung ist nun unbefristet, ich bitte um Aktualisierung.\\n\",\n      \" \\n\",\n      \"Mit freundlichen Grüßen\\n\",\n      \"Frau[redacted]:[redacted]:[redacted] E-Mail enthält vertrauliche und/oder rechtlich geschützte\\n\",\n      \"Informationen. Wenn Sie nicht der richtige Adressat sind oder diese E-Mail\\n\",\n      \"irrtümlich erhalten haben, informieren Sie bitte sofort den Absender und\\n\",\n      \"vernichten Sie diese Mail. Das unerlaubte Kopieren sowie die unbefugte\\n\",\n      \"Weitergabe dieser Mail ist nicht gestattet.\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 125, 'end': 152, 'label': 'VORNAME'}\\n\",\n      \"{'start': 153, 'end': 174, 'label': 'TELEFONNUMMER'}\\n\",\n      \"{'start': 175, 'end': 235, 'label': 'TELEFONNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 123.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"wie angefordert, sende ich Ihnen die fehlenden Daten bzw. Unterlagen zu.\\n\",\n      \"Vertragsnummer:[redacted]ngabe zum Zeitraum, in dem der Mehrverbrauch angefallen ist: 10.07.2023\\n\",\n      \"bis 24.07.2023\\n\",\n      \"Angabe über die Höhe des Mehrverbrauchs in Kilowattstunden: 208\\n\",\n      \"Kilowattstunden\\n\",\n      \"Kopie des Trocknungsprotokolls: liegt bei\\n\",\n      \"Bei weiteren Fragen stehe ich Ihnen gerne zur Verfügung.\\n\",\n      \"Mit freundlichen Grüßen,[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 119, 'end': 133, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 423, 'end': 444, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 36.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren, \\n\",\n      \"Ich[redacted] Eigentümer der Immobilie an der[redacted][redacted][redacted] sie den Stromzähler mit der Zähler Nr.23976538 zu entsperren. \\n\",\n      \"Da es für die Wohnung einen neuen Mieter gibt und dieser nicht dafür verantwortlich ist, dass der Stromzähler gesperrt ist, sondern dieses wurde von den vorherigen Mieterverschuldeten \\n\",\n      \"Mit freundlichen Grüßen [redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 35, 'end': 54, 'label': 'VORNAME'}\\n\",\n      \"{'start': 86, 'end': 96, 'label': 'STRASSE'}\\n\",\n      \"{'start': 96, 'end': 102, 'label': 'HAUSNUMMER'}\\n\",\n      \"{'start': 102, 'end': 125, 'label': 'POSTLEITZAHL'}\\n\",\n      \"{'start': 398, 'end': 409, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 22.txt ===\\n\",\n      \"Seit Februar haben Sie nicht eine einzige meiner Mails oder Post von meinem Anwalt beantwortet.\\n\",\n      \"Sie haben mir Geld gestohlen und bekommen es jetzt nicht mal auf die Kette, meine Daten aus Ihrem System zu löschen. Auch dies habe ich bereits mehrfach via Portal, Mail und Telefon gefordert, da ich keinen Vertrag mehr mit Ihnen habe.\\n\",\n      \"Zum letzten Mal: LÖSCHEN SIE ALLE MEINE DATEN AUS IHREN SYSTEMEN! Sie verstoßen damit gegen die DSGVO! Wenn Sie mir bis spätestens 11.08.23 nicht schriftlich bestätigen\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 582, 'end': 600, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 26.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"Zählerwechsel am 28.02.2023 Zähler 6446393163, Stand 159668 am 28.02.2023, neuer Zähler 1EBZ0107497634 Stand 000\\n\",\n      \"Meine Daten:\\n\",\n      \"Vor-, Nachname: Herr[redacted]sdatum:[redacted]adresse:[redacted][redacted]ählernummer: 6446393163\\n\",\n      \"Kundennummer:[redacted] freundlichen Grüßen\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 177, 'end': 199, 'label': 'VORNAME'}\\n\",\n      \"{'start': 206, 'end': 224, 'label': 'DATUM'}\\n\",\n      \"{'start': 232, 'end': 249, 'label': 'STRASSE'}\\n\",\n      \"{'start': 249, 'end': 268, 'label': 'POSTLEITZAHL'}\\n\",\n      \"{'start': 305, 'end': 319, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 32.txt ===\\n\",\n      \"Guten Abend liebes Beschwerde- Team,\\n\",\n      \"leider kann ich den beim Abschluss zugesicherten Bonus von 315€ immer noch nicht in den Dokumenten des oben genannten Vertrages einsehen.(siehe Anhang)\\n\",\n      \"Im stornierten Vertrag([redacted] dieser in den Dokumenten ersichtlich( siehe Anhang) und der neue Ersatzvertrag sollte eins zu eins die gleichen Konditionen enthalten. \\n\",\n      \"Ich schrieb eine Beschwerde UND rief deswegen im Kundenservice an.\\n\",\n      \"Telefonisch wurde mir der Bonus bei meinem Anruf für den aktuellen Vertrag\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 212, 'end': 227, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 1170, 'end': 1187, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 127.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren!\\n\",\n      \"Ich bitte Sie die Abschlussrechnungen für obige Vertragsnummer an folgende\\n\",\n      \"Adresse zu senden:\\n\",\n      \"Anna Sölzer\\n\",\n      \"C/o Dr[redacted]\\n\",\n      \"[redacted]:[redacted]example.org\\n\",\n      \" Mobil: 01704486372\\n\",\n      \" Mit freundlichen Grüßen\\n\",\n      \" Dr.[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 143, 'end': 174, 'label': 'VORNAME'}\\n\",\n      \"{'start': 175, 'end': 199, 'label': 'POSTLEITZAHL'}\\n\",\n      \"{'start': 200, 'end': 209, 'label': 'NACHNAME'}\\n\",\n      \"{'start': 270, 'end': 285, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 133.txt ===\\n\",\n      \"Hallo zusammen,\\n\",\n      \"ich versuche, in das Kundenkonto dem Portal zu kommen.\\n\",\n      \"Da es bisher nicht funktioniert hat, habe ich mehrmals versucht, das\\n\",\n      \"Passwort zu ändern.\\n\",\n      \"Mittlerweile weiß ich nicht mehr, welches Passwort gültih ist. Wie komm ich\\n\",\n      \"da raus ?\\n\",\n      \"MfG\\n\",\n      \"Jacob Mangold\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"\\n\",\n      \"=== 132.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"hiermit wird der folgende Vertrag fristgerecht widerrufen.\\n\",\n      \"Lieferstelle:[redacted]ählernummer: 754782\\n\",\n      \"Vertragspartner:[redacted] bestätigen Sie diesen Widerruf.\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 103, 'end': 157, 'label': 'STRASSE'}\\n\",\n      \"{'start': 193, 'end': 251, 'label': 'STRASSE'}\\n\",\n      \"\\n\",\n      \"=== 126.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"Herr Prof.[redacted] verstorben. Bitte ändern Sie die Vertrags-Anschrift auf seine Frau[redacted].\\n\",\n      \"Neue Anschrift:[redacted] Information sende ich Ihnen im Auftrag von meiner Schwiegermutter[redacted]\\n\",\n      \"Mit freundlichen Grüßen[redacted].[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 41, 'end': 60, 'label': 'VORNAME'}\\n\",\n      \"{'start': 127, 'end': 138, 'label': 'VORNAME'}\\n\",\n      \"{'start': 155, 'end': 201, 'label': 'STRASSE'}\\n\",\n      \"{'start': 267, 'end': 279, 'label': 'VORNAME'}\\n\",\n      \"{'start': 303, 'end': 318, 'label': 'VORNAME'}\\n\",\n      \"{'start': 319, 'end': 337, 'label': 'TELEFONNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 33.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \" \\n\",\n      \"in meinem Haus, in der[redacted] seit dem 13.06.2023 \\n\",\n      \"neue Mieter eingezogen. Ich bitte den Vertrag auf die neuen Mieter \\n\",\n      \"umzuschreiben, mich Abzurechnen und künftig mit den Mietern abzurechnen. \\n\",\n      \"Den Mietvertrag und das Übergabeprotokoll sende ich als Anlage anbei. Ich \\n\",\n      \"denke da sind alle relevanten Daten enthalten.\\n\",\n      \" \\n\",\n      \"Bei Fragen stehe ich Ihnen zur Verfügung.\\n\",\n      \" \\n\",\n      \"Mit freundlichem Gruß\\n\",\n      \"Aribert Schmidt\\n\",\n      \" \\n\",\n      \"\uFEFF\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 55, 'end': 89, 'label': 'STRASSE'}\\n\",\n      \"\\n\",\n      \"=== 27.txt ===\\n\",\n      \"Hallo liebes E.On Team,\\n\",\n      \"wie telefonisch besprochen, angehangen die 2 Screenshots zur Doppelten\\n\",\n      \"Abbuchung.\\n\",\n      \"Meine Frage: Warum wurde doppelt abgebucht und wie bekomme ich mein Geld\\n\",\n      \"zurück?\\n\",\n      \"Mit freundlichen Grüßen\\n\",\n      \"Lor[redacted]image: WhatsApp Bild 2023-08-14 um 14.36.35.jpg]\\n\",\n      \"[image: WhatsApp Bild 2023-08-14 um 14.36.36.jpg]\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 214, 'end': 233, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 31.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren, Da wir durch einen Wasserschadens einen bedingten Mehrverbrauch der Trocknungsgeräten hatten., bitte ich Sie bei den nächsten Abschlagszahlungen dies nicht zu berücksichtigen. Der Betrag wird mir von der Versicherung erstattet. \\n\",\n      \"Gerne höre ich von Ihnen Viele Grüße[redacted]endet von Naser Hande KGaA Mail auf Android\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 296, 'end': 316, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 25.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"wie gewünscht sende ich Ihnen meine Daten zum Abgleich zu und bestätige die Richtigkeit.\\n\",\n      \"Meine Daten:\\n\",\n      \"Vor-, Nachname: Dr.[redacted]sdatum:[redacted]adresse:[redacted]ählernummer: 1EMH0016453739\\n\",\n      \"Aktueller Anbieter: E.ON Energie Deutschland GmbH\\n\",\n      \"Aktuelle Kundennummer:[redacted] freundlichen Grüßen\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 152, 'end': 173, 'label': 'VORNAME'}\\n\",\n      \"{'start': 180, 'end': 198, 'label': 'DATUM'}\\n\",\n      \"{'start': 206, 'end': 245, 'label': 'STRASSE'}\\n\",\n      \"{'start': 345, 'end': 359, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 19.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"mein Stromtarif E.ON Klassik Strom Extra 24 läuft noch mit der Preisgarantie von 23,08 Cent netto ( 27,47 Cent brutto) bis zum 30.09.2023.\\n\",\n      \"Welchen Tarif zu welchen Konditionen können Sie mir ab diesem Zeitpunkt anbieten?\\n\",\n      \"Kann der Tarif zu gleichen Bedingungen weiter verlängert werden?\\n\",\n      \"Vielen Dank!\\n\",\n      \"Mit freundlichen Grüßen[redacted][redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 353, 'end': 363, 'label': 'VORNAME'}\\n\",\n      \"{'start': 363, 'end': 370, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 118.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"Ich möchte Sie hiermit bitten, keine Anrufe / Werbung mehr zu tätigen an und für folgende Vertragsnehmerin:\\n\",\n      \"Herr[redacted]konto:[redacted]en Dank im Voraus,\\n\",\n      \"Yvonne Hölzenbecher (Tochter)\\n\",\n      \"Diese Nachricht wurde von meinem Android Mobiltelefon mit GMX Mail gesendet.\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 143, 'end': 199, 'label': 'STRASSE'}\\n\",\n      \"{'start': 205, 'end': 221, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 130.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"aufgrund eines Wasserschadens wurden bei uns Trocknungsgeräte der Firma Tröst aufgestellt (s. Anhang).\\n\",\n      \"Gemäß dem Schreiben beantrage ich die entsprechende Nichtberücksichtigung bei der Neuberechnung der jährlichen Abschlusszahlung.\\n\",\n      \"Bestätigen Sie dies bitte.\\n\",\n      \"Mit freundlichen Grüßen[redacted]zz. tel. nur erreichbar über[redacted]\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 313, 'end': 335, 'label': 'VORNAME'}\\n\",\n      \"{'start': 363, 'end': 377, 'label': 'TELEFONNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 125.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren, \\n\",\n      \"Leider wurden wir von einem Unwetter getroffen, weshalb unser Keller vollgelaufen ist.\\n\",\n      \"Deshalb hatten wir für 3 Wochen Trocknungsgeräte im Keller stehen.\\n\",\n      \"Anbei erhalten sie den Energieverbrauch/-nachweis der Geräte mit der Bitte, mir für diesen eine Zwischenrechnung zukommen zu lassen. Diese kann ich dann bei meiner Versicherung einreichen, welche die Kosten übernimmt. \\n\",\n      \"Mein Vertragskonto lautet[redacted]\\n\",\n      \"Aufgrund der Einfachheit halber, reicht mir die Rechnung pe\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 430, 'end': 441, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 613, 'end': 629, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 131.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"anbei das gewünschte Ausbauprotokoll.\\n\",\n      \"mfg\\n\",\n      \"Ing.[redacted][redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 77, 'end': 96, 'label': 'VORNAME'}\\n\",\n      \"{'start': 96, 'end': 139, 'label': 'STRASSE'}\\n\",\n      \"\\n\",\n      \"=== 119.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"hiermit bitte ich sie mir die schriftlich die Daten mitzuteilen, welche \\n\",\n      \"sie nach DSGVO § 16 über mich bei Ihren Unternehmen gespeichert haben. \\n\",\n      \"Danke.\\n\",\n      \"MfG Arndt[redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 192, 'end': 202, 'label': 'NACHNAME'}\\n\",\n      \"\\n\",\n      \"=== 18.txt ===\\n\",\n      \"Schönen guten Tag, [redacted][redacted] habe gestern Ausversehen die Stromrechnung überwiesen die eigentlich per Lastschrift eingezogen wird. \\n\",\n      \"Gestern habe ich mit einem aus ihrem Kundenservice telefoniert, der mir gesagt hat ich solle mich nochmal melden falls ich das Geld zurück überwiesen haben möchte, statt als Gutschrift. \\n\",\n      \"Hiermit möchte ich ihnen mitteilen das ich die 111,02 Euro zurück überwiesen haben möchte. \\n\",\n      \"Bitte veranlassen sie dies so schnell wie möglich. \\n\",\n      \"Mit freundlichen Grüßen [r\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 19, 'end': 34, 'label': 'VORNAME'}\\n\",\n      \"{'start': 34, 'end': 49, 'label': 'DATUM'}\\n\",\n      \"{'start': 508, 'end': 527, 'label': 'VORNAME'}\\n\",\n      \"\\n\",\n      \"=== 24.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \"bitte bereiten Sie mir ein Angebot für oben genannten Rahmenvertrag vor.\\n\",\n      \"Meine Daten finden Sie entsprechend nachstehend.\\n\",\n      \"Jonathan Huhn[redacted]nummer:[redacted]LV: 919684277\\n\",\n      \"Vielen Dank,\\n\",\n      \"Jonathan Huhn\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 166, 'end': 205, 'label': 'STRASSE'}\\n\",\n      \"{'start': 212, 'end': 224, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"\\n\",\n      \"=== 30.txt ===\\n\",\n      \"Sehr geehrte Damen und Herren,\\n\",\n      \" \\n\",\n      \"ich möchte Ihnen mitteilen, dass sich ab 01.09.2023 meine Kontonummer für\\n\",\n      \"Last-und Gutschriften an folgendem Objekt ändert:\\n\",\n      \" \\n\",\n      \"Vertragsnummer:[redacted]sstelle :[redacted][redacted]ähler: 1126100052313042\\n\",\n      \" \\n\",\n      \" \\n\",\n      \"Neue Kontonummer ab 01.09.2023 \\n\",\n      \" \\n\",\n      \"Dr.[redacted][redacted]IBAN: DE85230541192884717022\\n\",\n      \"BIC: GENODEF1XYZ\\n\",\n      \"Juncken Bank\\n\",\n      \" \\n\",\n      \"Mit freundlichen Grüßen und herzlichen Dank\\n\",\n      \"Dr.[redacted][redacted][redacted][redacted]\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 174, 'end': 194, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 203, 'end': 219, 'label': 'STRASSE'}\\n\",\n      \"{'start': 219, 'end': 233, 'label': 'POSTLEITZAHL'}\\n\",\n      \"{'start': 298, 'end': 305, 'label': 'VORNAME'}\\n\",\n      \"{'start': 305, 'end': 312, 'label': 'NACHNAME'}\\n\",\n      \"{'start': 420, 'end': 427, 'label': 'VORNAME'}\\n\",\n      \"{'start': 427, 'end': 438, 'label': 'NACHNAME'}\\n\",\n      \"{'start': 438, 'end': 444, 'label': 'NACHNAME'}\\n\",\n      \"{'start': 444, 'end': 465, 'label': 'POSTLEITZAHL'}\\n\",\n      \"Hallo liebes Eon Team,\\n\",\n      \"es geht um die Vertragsnummer[redacted] der Einrichtung meines neuen Vertrages wurde leider die Überweisung als\\n\",\n      \"Zahlungsart gewählt von dem jungen Kollegen an der Wohnungstür. Ich würde\\n\",\n      \"es gerne wieder per Lastschrift abbuchen lassen, um mir den Stress zu\\n\",\n      \"ersparen.\\n\",\n      \"Verbraucherstelle ist weiterhin die[redacted][redacted]\\n\",\n      \"Gruß Berthold Huhn\\n\",\n      \"\\n\",\n      \"Predicted PII spans:\\n\",\n      \"{'start': 52, 'end': 67, 'label': 'VERTRAGSNUMMER'}\\n\",\n      \"{'start': 329, 'end': 345, 'label': 'STRASSE'}\\n\",\n      \"{'start': 345, 'end': 359, 'label': 'POSTLEITZAHL'}\\n\",\n      \"=== Evaluation Metrics ===\\n\",\n      \"True Positives: 198\\n\",\n      \"False Positives: 178\\n\",\n      \"False Negatives: 988\\n\",\n      \"\\n\",\n      \"Precision: 0.5266\\n\",\n      \"Recall:    0.1669\\n\",\n      \"F1 Score:  0.2535\\n\"\n     ]\n    }\n   ],\n   \"execution_count\": 3\n  },\n  {\n   \"metadata\": {},\n   \"cell_type\": \"markdown\",\n   \"source\": \"## Per Label Results\",\n   \"id\": \"eb9219a39125641b\"\n  },\n  {\n   \"metadata\": {\n    \"ExecuteTime\": {\n     \"end_time\": \"2025-07-15T14:30:58.008645Z\",\n     \"start_time\": \"2025-07-15T14:30:35.337279Z\"\n    }\n   },\n   \"cell_type\": \"code\",\n   \"source\": [\n    \"from collections import defaultdict\\n\",\n    \"import json\\n\",\n    \"\\n\",\n    \"# Load ground truth\\n\",\n    \"with open(\\\"../../../data/original/ground_truth.json\\\", \\\"r\\\", encoding=\\\"utf-8\\\") as f:\\n\",\n    \"    ground_truth = json.load(f)\\n\",\n    \"\\n\",\n    \"# Initialize per-label counts\\n\",\n    \"label_metrics = defaultdict(lambda: {\\\"TP\\\": 0, \\\"FP\\\": 0, \\\"FN\\\": 0})\\n\",\n    \"\\n\",\n    \"# Evaluation loop\\n\",\n    \"for example in ground_truth:\\n\",\n    \"    text = example[\\\"text\\\"]\\n\",\n    \"    gold_spans = [label for label in example[\\\"labels\\\"] if label[\\\"start\\\"] < label[\\\"end\\\"]]\\n\",\n    \"\\n\",\n    \"    _, raw_preds = mask_pii_spans(text, return_spans=True)\\n\",\n    \"    pred_spans = convert_labels_to_custom(raw_preds)\\n\",\n    \"\\n\",\n    \"    matched_gold = set()\\n\",\n    \"    matched_pred = set()\\n\",\n    \"\\n\",\n    \"    for i, pred in enumerate(pred_spans):\\n\",\n    \"        for j, gold in enumerate(gold_spans):\\n\",\n    \"            if relaxed_overlap(pred, gold):\\n\",\n    \"                norm_label = normalize_label(gold[\\\"label\\\"])\\n\",\n    \"                label_metrics[norm_label][\\\"TP\\\"] += 1\\n\",\n    \"                matched_gold.add(j)\\n\",\n    \"                matched_pred.add(i)\\n\",\n    \"                break\\n\",\n    \"\\n\",\n    \"    # Count unmatched predictions as FP\\n\",\n    \"    for i, pred in enumerate(pred_spans):\\n\",\n    \"        if i not in matched_pred:\\n\",\n    \"            norm_label = normalize_label(pred[\\\"label\\\"])\\n\",\n    \"            label_metrics[norm_label][\\\"FP\\\"] += 1\\n\",\n    \"\\n\",\n    \"    # Count unmatched gold spans as FN\\n\",\n    \"    for j, gold in enumerate(gold_spans):\\n\",\n    \"        if j not in matched_gold:\\n\",\n    \"            norm_label = normalize_label(gold[\\\"label\\\"])\\n\",\n    \"            label_metrics[norm_label][\\\"FN\\\"] += 1\\n\",\n    \"\\n\",\n    \"# Print per-label metrics\\n\",\n    \"print(\\\"=== Per-Label Evaluation ===\\\")\\n\",\n    \"for label, counts in sorted(label_metrics.items()):\\n\",\n    \"    TP = counts[\\\"TP\\\"]\\n\",\n    \"    FP = counts[\\\"FP\\\"]\\n\",\n    \"    FN = counts[\\\"FN\\\"]\\n\",\n    \"    precision = TP / (TP + FP) if (TP + FP) > 0 else 0.0\\n\",\n    \"    recall = TP / (TP + FN) if (TP + FN) > 0 else 0.0\\n\",\n    \"    f1 = 2 * precision * recall / (precision + recall) if (precision + recall) > 0 else 0.0\\n\",\n    \"\\n\",\n    \"import pandas as pd\\n\",\n    \"\\n\",\n    \"rows = []\\n\",\n    \"for label, counts in label_metrics.items():\\n\",\n    \"    TP, FP, FN = counts[\\\"TP\\\"], counts[\\\"FP\\\"], counts[\\\"FN\\\"]\\n\",\n    \"    precision = TP / (TP + FP) if (TP + FP) > 0 else 0.0\\n\",\n    \"    recall = TP / (TP + FN) if (TP + FN) > 0 else 0.0\\n\",\n    \"    f1 = 2 * precision * recall / (precision + recall) if (precision + recall) > 0 else 0.0\\n\",\n    \"\\n\",\n    \"    rows.append({\\n\",\n    \"        \\\"Label\\\": label,\\n\",\n    \"        \\\"TP\\\": TP,\\n\",\n    \"        \\\"FP\\\": FP,\\n\",\n    \"        \\\"FN\\\": FN,\\n\",\n    \"        \\\"Precision\\\": precision,\\n\",\n    \"        \\\"Recall\\\": recall,\\n\",\n    \"        \\\"F1\\\": f1\\n\",\n    \"    })\\n\",\n    \"\\n\",\n    \"df = (\\n\",\n    \"    pd.DataFrame(rows)\\n\",\n    \"    .sort_values(by=\\\"TP\\\", ascending=False)  # <-- sort by TP descending\\n\",\n    \"    .reset_index(drop=True)\\n\",\n    \")\\n\",\n    \"\\n\",\n    \"print(df.to_markdown(index=False, floatfmt=\\\".4f\\\"))\\n\",\n    \"\\n\",\n    \"#    print(f\\\"\\\\nLabel: {label}\\\")\\n\",\n    \"#    print(f\\\"  TP: {TP}, FP: {FP}, FN: {FN}\\\")\\n\",\n    \"#    print(f\\\"  Precision: {precision:.4f}\\\")\\n\",\n    \"#    print(f\\\"  Recall:    {recall:.4f}\\\")\\n\",\n    \"#    print(f\\\"  F1 Score:  {f1:.4f}\\\")\"\n   ],\n   \"id\": \"d669039526a360d7\",\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"=== Per-Label Evaluation ===\\n\",\n      \"| Label          |   TP |   FP |   FN |   Precision |   Recall |     F1 |\\n\",\n      \"|:---------------|-----:|-----:|-----:|------------:|---------:|-------:|\\n\",\n      \"| VERTRAGSNUMMER |   74 |   11 |   27 |      0.8706 |   0.7327 | 0.7957 |\\n\",\n      \"| NACHNAME       |   34 |   18 |  192 |      0.6538 |   0.1504 | 0.2446 |\\n\",\n      \"| VORNAME        |   31 |   65 |  175 |      0.3229 |   0.1505 | 0.2053 |\\n\",\n      \"| TELEFONNUMMER  |   23 |    6 |   15 |      0.7931 |   0.6053 | 0.6866 |\\n\",\n      \"| STRASSE        |   20 |   42 |   54 |      0.3226 |   0.2703 | 0.2941 |\\n\",\n      \"| DATUM          |    8 |    1 |  105 |      0.8889 |   0.0708 | 0.1311 |\\n\",\n      \"| EMAIL          |    5 |    4 |   16 |      0.5556 |   0.2381 | 0.3333 |\\n\",\n      \"| WOHNORT        |    3 |    5 |   72 |      0.3750 |   0.0400 | 0.0723 |\\n\",\n      \"| HAUSNUMMER     |    0 |    5 |   72 |      0.0000 |   0.0000 | 0.0000 |\\n\",\n      \"| POSTLEITZAHL   |    0 |   21 |   71 |      0.0000 |   0.0000 | 0.0000 |\\n\",\n      \"| GESENDET_MIT   |    0 |    0 |   27 |      0.0000 |   0.0000 | 0.0000 |\\n\",\n      \"| IBAN           |    0 |    0 |    7 |      0.0000 |   0.0000 | 0.0000 |\\n\",\n      \"| TITEL          |    0 |    0 |   22 |      0.0000 |   0.0000 | 0.0000 |\\n\",\n      \"| LINK           |    0 |    0 |   14 |      0.0000 |   0.0000 | 0.0000 |\\n\",\n      \"| ZÄHLERNUMMER   |    0 |    0 |   39 |      0.0000 |   0.0000 | 0.0000 |\\n\",\n      \"| ZÄHLERSTAND    |    0 |    0 |   16 |      0.0000 |   0.0000 | 0.0000 |\\n\",\n      \"| FIRMA          |    0 |    0 |   28 |      0.0000 |   0.0000 | 0.0000 |\\n\",\n      \"| FAX            |    0 |    0 |    5 |      0.0000 |   0.0000 | 0.0000 |\\n\",\n      \"| BIC            |    0 |    0 |    1 |      0.0000 |   0.0000 | 0.0000 |\\n\",\n      \"| BANK           |    0 |    0 |    3 |      0.0000 |   0.0000 | 0.0000 |\\n\",\n      \"| ZAHLUNG        |    0 |    0 |   27 |      0.0000 |   0.0000 | 0.0000 |\\n\"\n     ]\n    }\n   ],\n   \"execution_count\": 4\n  },\n  {\n   \"metadata\": {},\n   \"cell_type\": \"markdown\",\n   \"source\": \"# Alternative approach\",\n   \"id\": \"76f7776e94f6a6cc\"\n  },\n  {\n   \"metadata\": {\n    \"ExecuteTime\": {\n     \"end_time\": \"2025-07-15T14:36:29.683834Z\",\n     \"start_time\": \"2025-07-15T14:35:06.748880Z\"\n    }\n   },\n   \"cell_type\": \"code\",\n   \"source\": [\n    \"import torch\\n\",\n    \"import json\\n\",\n    \"from transformers import AutoTokenizer, AutoModelForTokenClassification\\n\",\n    \"from collections import defaultdict\\n\",\n    \"import pandas as pd\\n\",\n    \"from typing import List, Dict, Tuple, Set\\n\",\n    \"\\n\",\n    \"class PiiranhaEvaluator:\\n\",\n    \"    def __init__(self, model_name=\\\"iiiorg/piiranha-v1-detect-personal-information\\\"):\\n\",\n    \"        self.tokenizer = AutoTokenizer.from_pretrained(model_name)\\n\",\n    \"        self.model = AutoModelForTokenClassification.from_pretrained(model_name)\\n\",\n    \"        self.device = torch.device(\\\"cuda\\\" if torch.cuda.is_available() else \\\"cpu\\\")\\n\",\n    \"        self.model.to(self.device)\\n\",\n    \"\\n\",\n    \"        # Improved bidirectional label mapping\\n\",\n    \"        self.LABEL_MAPPING = {\\n\",\n    \"            # PIIRANHA → Custom\\n\",\n    \"            \\\"GIVENNAME\\\": \\\"VORNAME\\\",\\n\",\n    \"            \\\"SURNAME\\\": \\\"NACHNAME\\\",\\n\",\n    \"            \\\"USERNAME\\\": \\\"USERNAME\\\",  # Keep separate, don't map to NACHNAME\\n\",\n    \"            \\\"ACCOUNTNUM\\\": \\\"VERTRAGSNUMMER\\\",\\n\",\n    \"            \\\"CREDITCARDNUMBER\\\": \\\"VERTRAGSNUMMER\\\",\\n\",\n    \"            \\\"BUILDINGNUM\\\": \\\"HAUSNUMMER\\\",\\n\",\n    \"            \\\"STREET\\\": \\\"STRASSE\\\",\\n\",\n    \"            \\\"CITY\\\": \\\"WOHNORT\\\",\\n\",\n    \"            \\\"STATE\\\": \\\"BUNDESLAND\\\",  # Keep separate from WOHNORT\\n\",\n    \"            \\\"ZIPCODE\\\": \\\"POSTLEITZAHL\\\",\\n\",\n    \"            \\\"LOCATION\\\": \\\"WOHNORT\\\",\\n\",\n    \"            \\\"DATEOFBIRTH\\\": \\\"DATUM\\\",\\n\",\n    \"            \\\"DATE\\\": \\\"DATUM\\\",\\n\",\n    \"            \\\"EMAIL\\\": \\\"EMAIL\\\",\\n\",\n    \"            \\\"PHONENUMBER\\\": \\\"TELEFONNUMMER\\\",\\n\",\n    \"            \\\"TELEPHONENUM\\\": \\\"TELEFONNUMMER\\\",\\n\",\n    \"            \\\"IBAN\\\": \\\"IBAN\\\",\\n\",\n    \"            \\\"BIC\\\": \\\"BIC\\\",\\n\",\n    \"            \\\"URL\\\": \\\"LINK\\\",\\n\",\n    \"            \\\"ORGANIZATION\\\": \\\"FIRMA\\\",\\n\",\n    \"            \\\"TITLE\\\": \\\"TITEL\\\",\\n\",\n    \"\\n\",\n    \"            # Custom → PIIRANHA (reverse mapping)\\n\",\n    \"            \\\"VORNAME\\\": \\\"GIVENNAME\\\",\\n\",\n    \"            \\\"NACHNAME\\\": \\\"SURNAME\\\",\\n\",\n    \"            \\\"TELEFONNUMMER\\\": \\\"PHONENUMBER\\\",\\n\",\n    \"            \\\"STRASSE\\\": \\\"STREET\\\",\\n\",\n    \"            \\\"HAUSNUMMER\\\": \\\"BUILDINGNUM\\\",\\n\",\n    \"            \\\"POSTLEITZAHL\\\": \\\"ZIPCODE\\\",\\n\",\n    \"            \\\"WOHNORT\\\": \\\"CITY\\\",\\n\",\n    \"            \\\"DATUM\\\": \\\"DATE\\\",\\n\",\n    \"            \\\"LINK\\\": \\\"URL\\\",\\n\",\n    \"            \\\"FIRMA\\\": \\\"ORGANIZATION\\\",\\n\",\n    \"            \\\"TITEL\\\": \\\"TITLE\\\"\\n\",\n    \"        }\\n\",\n    \"\\n\",\n    \"        # Label groups for fuzzy matching\\n\",\n    \"        self.LABEL_GROUPS = {\\n\",\n    \"            \\\"PERSON_NAME\\\": {\\\"VORNAME\\\", \\\"NACHNAME\\\", \\\"GIVENNAME\\\", \\\"SURNAME\\\"},\\n\",\n    \"            \\\"CONTACT\\\": {\\\"TELEFONNUMMER\\\", \\\"EMAIL\\\", \\\"PHONENUMBER\\\", \\\"TELEPHONENUM\\\"},\\n\",\n    \"            \\\"ADDRESS\\\": {\\\"STRASSE\\\", \\\"HAUSNUMMER\\\", \\\"POSTLEITZAHL\\\", \\\"WOHNORT\\\", \\\"STREET\\\", \\\"BUILDINGNUM\\\", \\\"ZIPCODE\\\", \\\"CITY\\\"},\\n\",\n    \"            \\\"FINANCIAL\\\": {\\\"IBAN\\\", \\\"BIC\\\", \\\"VERTRAGSNUMMER\\\", \\\"ACCOUNTNUM\\\"},\\n\",\n    \"            \\\"TEMPORAL\\\": {\\\"DATUM\\\", \\\"DATE\\\", \\\"DATEOFBIRTH\\\"}\\n\",\n    \"        }\\n\",\n    \"\\n\",\n    \"    def normalize_label(self, label: str) -> str:\\n\",\n    \"        \\\"\\\"\\\"Normalize label using mapping and remove BIO prefixes\\\"\\\"\\\"\\n\",\n    \"        clean_label = label.replace(\\\"B-\\\", \\\"\\\").replace(\\\"I-\\\", \\\"\\\")\\n\",\n    \"        return self.LABEL_MAPPING.get(clean_label, clean_label)\\n\",\n    \"\\n\",\n    \"    def labels_are_compatible(self, pred_label: str, gold_label: str) -> bool:\\n\",\n    \"        \\\"\\\"\\\"Check if two labels are compatible (exact match or same group)\\\"\\\"\\\"\\n\",\n    \"        norm_pred = self.normalize_label(pred_label)\\n\",\n    \"        norm_gold = self.normalize_label(gold_label)\\n\",\n    \"\\n\",\n    \"        # Exact match\\n\",\n    \"        if norm_pred == norm_gold:\\n\",\n    \"            return True\\n\",\n    \"\\n\",\n    \"        # Group match (more lenient)\\n\",\n    \"        for group_labels in self.LABEL_GROUPS.values():\\n\",\n    \"            if norm_pred in group_labels and norm_gold in group_labels:\\n\",\n    \"                return True\\n\",\n    \"\\n\",\n    \"        return False\\n\",\n    \"\\n\",\n    \"    def token_level_alignment(self, text: str, char_spans: List[Dict]) -> List[Dict]:\\n\",\n    \"        \\\"\\\"\\\"Convert character-level spans to token-level spans\\\"\\\"\\\"\\n\",\n    \"        encoding = self.tokenizer(text, return_offsets_mapping=True, add_special_tokens=True)\\n\",\n    \"        offset_mapping = encoding['offset_mapping']\\n\",\n    \"\\n\",\n    \"        token_spans = []\\n\",\n    \"        for span in char_spans:\\n\",\n    \"            start_char, end_char = span['start'], span['end']\\n\",\n    \"\\n\",\n    \"            # Find tokens that overlap with character span\\n\",\n    \"            overlapping_tokens = []\\n\",\n    \"            for i, (token_start, token_end) in enumerate(offset_mapping):\\n\",\n    \"                if token_start >= token_end:  # Skip special tokens\\n\",\n    \"                    continue\\n\",\n    \"\\n\",\n    \"                # Check for overlap\\n\",\n    \"                if not (end_char <= token_start or start_char >= token_end):\\n\",\n    \"                    overlapping_tokens.append(i)\\n\",\n    \"\\n\",\n    \"            if overlapping_tokens:\\n\",\n    \"                token_spans.append({\\n\",\n    \"                    'start_token': overlapping_tokens[0],\\n\",\n    \"                    'end_token': overlapping_tokens[-1] + 1,\\n\",\n    \"                    'start_char': start_char,\\n\",\n    \"                    'end_char': end_char,\\n\",\n    \"                    'label': span['label']\\n\",\n    \"                })\\n\",\n    \"\\n\",\n    \"        return token_spans\\n\",\n    \"\\n\",\n    \"    def predict_spans(self, text: str) -> List[Dict]:\\n\",\n    \"        \\\"\\\"\\\"Get predictions with improved span extraction\\\"\\\"\\\"\\n\",\n    \"        inputs = self.tokenizer(text, return_tensors=\\\"pt\\\", truncation=True, padding=True)\\n\",\n    \"        inputs = {k: v.to(self.device) for k, v in inputs.items()}\\n\",\n    \"\\n\",\n    \"        with torch.no_grad():\\n\",\n    \"            outputs = self.model(**inputs)\\n\",\n    \"\\n\",\n    \"        predictions = torch.argmax(outputs.logits, dim=-1)\\n\",\n    \"\\n\",\n    \"        # Get offset mapping for character positions\\n\",\n    \"        encoding = self.tokenizer(text, return_offsets_mapping=True, add_special_tokens=True)\\n\",\n    \"        offset_mapping = encoding['offset_mapping']\\n\",\n    \"\\n\",\n    \"        spans = []\\n\",\n    \"        current_span = None\\n\",\n    \"\\n\",\n    \"        for i, (start, end) in enumerate(offset_mapping):\\n\",\n    \"            if start == end:  # Skip special tokens\\n\",\n    \"                continue\\n\",\n    \"\\n\",\n    \"            label_id = predictions[0][i].item()\\n\",\n    \"            label = self.model.config.id2label[label_id]\\n\",\n    \"\\n\",\n    \"            if label.startswith('B-') or (label.startswith('I-') and current_span is None):\\n\",\n    \"                # Start new span\\n\",\n    \"                if current_span:\\n\",\n    \"                    spans.append(current_span)\\n\",\n    \"                current_span = {\\n\",\n    \"                    'start': start,\\n\",\n    \"                    'end': end,\\n\",\n    \"                    'label': label\\n\",\n    \"                }\\n\",\n    \"            elif label.startswith('I-') and current_span and label[2:] == current_span['label'][2:]:\\n\",\n    \"                # Continue current span\\n\",\n    \"                current_span['end'] = end\\n\",\n    \"            else:\\n\",\n    \"                # End current span\\n\",\n    \"                if current_span:\\n\",\n    \"                    spans.append(current_span)\\n\",\n    \"                    current_span = None\\n\",\n    \"\\n\",\n    \"        # Don't forget the last span\\n\",\n    \"        if current_span:\\n\",\n    \"            spans.append(current_span)\\n\",\n    \"\\n\",\n    \"        # Normalize labels\\n\",\n    \"        for span in spans:\\n\",\n    \"            span['label'] = self.normalize_label(span['label'])\\n\",\n    \"\\n\",\n    \"        return spans\\n\",\n    \"\\n\",\n    \"    def flexible_overlap(self, pred: Dict, gold: Dict, match_type: str = \\\"partial\\\") -> bool:\\n\",\n    \"        \\\"\\\"\\\"Flexible span matching with different strategies\\\"\\\"\\\"\\n\",\n    \"        if not self.labels_are_compatible(pred['label'], gold['label']):\\n\",\n    \"            return False\\n\",\n    \"\\n\",\n    \"        pred_start, pred_end = pred['start'], pred['end']\\n\",\n    \"        gold_start, gold_end = gold['start'], gold['end']\\n\",\n    \"\\n\",\n    \"        if match_type == \\\"exact\\\":\\n\",\n    \"            return pred_start == gold_start and pred_end == gold_end\\n\",\n    \"        elif match_type == \\\"partial\\\":\\n\",\n    \"            # Any overlap counts\\n\",\n    \"            return not (pred_end <= gold_start or pred_start >= gold_end)\\n\",\n    \"        elif match_type == \\\"boundary_relaxed\\\":\\n\",\n    \"            # Allow ±2 character boundary differences\\n\",\n    \"            tolerance = 2\\n\",\n    \"            return (abs(pred_start - gold_start) <= tolerance and\\n\",\n    \"                   abs(pred_end - gold_end) <= tolerance)\\n\",\n    \"        elif match_type == \\\"token_level\\\":\\n\",\n    \"            # Convert to token positions and compare\\n\",\n    \"            # This would require token-level spans (implementation above)\\n\",\n    \"            return pred.get('start_token', -1) == gold.get('start_token', -2)\\n\",\n    \"        else:\\n\",\n    \"            raise ValueError(f\\\"Unknown match_type: {match_type}\\\")\\n\",\n    \"\\n\",\n    \"    def evaluate_dataset(self, ground_truth_path: str, match_type: str = \\\"partial\\\") -> Dict:\\n\",\n    \"        \\\"\\\"\\\"Evaluate on full dataset with detailed metrics\\\"\\\"\\\"\\n\",\n    \"        with open(ground_truth_path, 'r', encoding='utf-8') as f:\\n\",\n    \"            ground_truth = json.load(f)\\n\",\n    \"\\n\",\n    \"        # Global metrics\\n\",\n    \"        total_tp = total_fp = total_fn = 0\\n\",\n    \"\\n\",\n    \"        # Per-label metrics\\n\",\n    \"        label_metrics = defaultdict(lambda: {\\\"tp\\\": 0, \\\"fp\\\": 0, \\\"fn\\\": 0})\\n\",\n    \"\\n\",\n    \"        # Detailed results for analysis\\n\",\n    \"        detailed_results = []\\n\",\n    \"\\n\",\n    \"        for example in ground_truth:\\n\",\n    \"            text = example[\\\"text\\\"]\\n\",\n    \"            gold_spans = [span for span in example[\\\"labels\\\"] if span[\\\"start\\\"] < span[\\\"end\\\"]]\\n\",\n    \"            pred_spans = self.predict_spans(text)\\n\",\n    \"\\n\",\n    \"            # Track matches\\n\",\n    \"            matched_gold = set()\\n\",\n    \"            matched_pred = set()\\n\",\n    \"\\n\",\n    \"            # Find matches\\n\",\n    \"            for i, pred in enumerate(pred_spans):\\n\",\n    \"                for j, gold in enumerate(gold_spans):\\n\",\n    \"                    if self.flexible_overlap(pred, gold, match_type):\\n\",\n    \"                        # Count as TP\\n\",\n    \"                        gold_label = self.normalize_label(gold[\\\"label\\\"])\\n\",\n    \"                        label_metrics[gold_label][\\\"tp\\\"] += 1\\n\",\n    \"                        total_tp += 1\\n\",\n    \"                        matched_gold.add(j)\\n\",\n    \"                        matched_pred.add(i)\\n\",\n    \"                        break\\n\",\n    \"\\n\",\n    \"            # Count unmatched predictions as FP\\n\",\n    \"            for i, pred in enumerate(pred_spans):\\n\",\n    \"                if i not in matched_pred:\\n\",\n    \"                    pred_label = self.normalize_label(pred[\\\"label\\\"])\\n\",\n    \"                    label_metrics[pred_label][\\\"fp\\\"] += 1\\n\",\n    \"                    total_fp += 1\\n\",\n    \"\\n\",\n    \"            # Count unmatched gold spans as FN\\n\",\n    \"            for j, gold in enumerate(gold_spans):\\n\",\n    \"                if j not in matched_gold:\\n\",\n    \"                    gold_label = self.normalize_label(gold[\\\"label\\\"])\\n\",\n    \"                    label_metrics[gold_label][\\\"fn\\\"] += 1\\n\",\n    \"                    total_fn += 1\\n\",\n    \"\\n\",\n    \"            # Store detailed results\\n\",\n    \"            detailed_results.append({\\n\",\n    \"                \\\"text\\\": text[:100] + \\\"...\\\" if len(text) > 100 else text,\\n\",\n    \"                \\\"gold_count\\\": len(gold_spans),\\n\",\n    \"                \\\"pred_count\\\": len(pred_spans),\\n\",\n    \"                \\\"matches\\\": len(matched_gold),\\n\",\n    \"                \\\"gold_spans\\\": gold_spans,\\n\",\n    \"                \\\"pred_spans\\\": pred_spans\\n\",\n    \"            })\\n\",\n    \"\\n\",\n    \"        # Calculate metrics\\n\",\n    \"        def calc_metrics(tp, fp, fn):\\n\",\n    \"            precision = tp / (tp + fp) if (tp + fp) > 0 else 0.0\\n\",\n    \"            recall = tp / (tp + fn) if (tp + fn) > 0 else 0.0\\n\",\n    \"            f1 = 2 * precision * recall / (precision + recall) if (precision + recall) > 0 else 0.0\\n\",\n    \"            return precision, recall, f1\\n\",\n    \"\\n\",\n    \"        # Global metrics\\n\",\n    \"        global_precision, global_recall, global_f1 = calc_metrics(total_tp, total_fp, total_fn)\\n\",\n    \"\\n\",\n    \"        # Per-label metrics\\n\",\n    \"        label_results = []\\n\",\n    \"        for label, counts in label_metrics.items():\\n\",\n    \"            precision, recall, f1 = calc_metrics(counts[\\\"tp\\\"], counts[\\\"fp\\\"], counts[\\\"fn\\\"])\\n\",\n    \"            label_results.append({\\n\",\n    \"                \\\"Label\\\": label,\\n\",\n    \"                \\\"TP\\\": counts[\\\"tp\\\"],\\n\",\n    \"                \\\"FP\\\": counts[\\\"fp\\\"],\\n\",\n    \"                \\\"FN\\\": counts[\\\"fn\\\"],\\n\",\n    \"                \\\"Precision\\\": precision,\\n\",\n    \"                \\\"Recall\\\": recall,\\n\",\n    \"                \\\"F1\\\": f1,\\n\",\n    \"                \\\"Support\\\": counts[\\\"tp\\\"] + counts[\\\"fn\\\"]\\n\",\n    \"            })\\n\",\n    \"\\n\",\n    \"        return {\\n\",\n    \"            \\\"global_metrics\\\": {\\n\",\n    \"                \\\"precision\\\": global_precision,\\n\",\n    \"                \\\"recall\\\": global_recall,\\n\",\n    \"                \\\"f1\\\": global_f1,\\n\",\n    \"                \\\"total_tp\\\": total_tp,\\n\",\n    \"                \\\"total_fp\\\": total_fp,\\n\",\n    \"                \\\"total_fn\\\": total_fn\\n\",\n    \"            },\\n\",\n    \"            \\\"label_metrics\\\": label_results,\\n\",\n    \"            \\\"detailed_results\\\": detailed_results\\n\",\n    \"        }\\n\",\n    \"\\n\",\n    \"    def compare_matching_strategies(self, ground_truth_path: str) -> pd.DataFrame:\\n\",\n    \"        \\\"\\\"\\\"Compare different matching strategies\\\"\\\"\\\"\\n\",\n    \"        strategies = [\\\"exact\\\", \\\"partial\\\", \\\"boundary_relaxed\\\"]\\n\",\n    \"        comparison_results = []\\n\",\n    \"\\n\",\n    \"        for strategy in strategies:\\n\",\n    \"            print(f\\\"Evaluating with {strategy} matching...\\\")\\n\",\n    \"            results = self.evaluate_dataset(ground_truth_path, strategy)\\n\",\n    \"            comparison_results.append({\\n\",\n    \"                \\\"Strategy\\\": strategy,\\n\",\n    \"                \\\"Precision\\\": results[\\\"global_metrics\\\"][\\\"precision\\\"],\\n\",\n    \"                \\\"Recall\\\": results[\\\"global_metrics\\\"][\\\"recall\\\"],\\n\",\n    \"                \\\"F1\\\": results[\\\"global_metrics\\\"][\\\"f1\\\"],\\n\",\n    \"                \\\"Total_TP\\\": results[\\\"global_metrics\\\"][\\\"total_tp\\\"],\\n\",\n    \"                \\\"Total_FP\\\": results[\\\"global_metrics\\\"][\\\"total_fp\\\"],\\n\",\n    \"                \\\"Total_FN\\\": results[\\\"global_metrics\\\"][\\\"total_fn\\\"]\\n\",\n    \"            })\\n\",\n    \"\\n\",\n    \"        return pd.DataFrame(comparison_results)\\n\",\n    \"\\n\",\n    \"# Usage example\\n\",\n    \"def main():\\n\",\n    \"    evaluator = PiiranhaEvaluator()\\n\",\n    \"\\n\",\n    \"    # Compare different matching strategies\\n\",\n    \"    print(\\\"=== Comparing Matching Strategies ===\\\")\\n\",\n    \"    strategy_comparison = evaluator.compare_matching_strategies(\\\"../../../data/original/ground_truth.json\\\")\\n\",\n    \"    print(strategy_comparison.to_string(index=False))\\n\",\n    \"\\n\",\n    \"    # Detailed evaluation with partial matching (recommended)\\n\",\n    \"    print(\\\"\\\\n=== Detailed Evaluation (Partial Matching) ===\\\")\\n\",\n    \"    results = evaluator.evaluate_dataset(\\\"../../../data/original/ground_truth.json\\\", match_type=\\\"partial\\\")\\n\",\n    \"\\n\",\n    \"    # Global metrics\\n\",\n    \"    print(f\\\"Global F1: {results['global_metrics']['f1']:.4f}\\\")\\n\",\n    \"    print(f\\\"Global Precision: {results['global_metrics']['precision']:.4f}\\\")\\n\",\n    \"    print(f\\\"Global Recall: {results['global_metrics']['recall']:.4f}\\\")\\n\",\n    \"\\n\",\n    \"    # Per-label metrics\\n\",\n    \"    df = pd.DataFrame(results['label_metrics']).sort_values('F1', ascending=False)\\n\",\n    \"    print(\\\"\\\\n=== Per-Label Results ===\\\")\\n\",\n    \"    print(df.to_string(index=False, float_format=\\\"%.4f\\\"))\\n\",\n    \"\\n\",\n    \"    # Error analysis\\n\",\n    \"    print(\\\"\\\\n=== Error Analysis ===\\\")\\n\",\n    \"    low_recall_labels = df[df['Recall'] < 0.3]['Label'].tolist()\\n\",\n    \"    high_fp_labels = df[df['FP'] > df['TP']]['Label'].tolist()\\n\",\n    \"\\n\",\n    \"    print(f\\\"Labels with low recall (<0.3): {low_recall_labels}\\\")\\n\",\n    \"    print(f\\\"Labels with high FP rate: {high_fp_labels}\\\")\\n\",\n    \"\\n\",\n    \"if __name__ == \\\"__main__\\\":\\n\",\n    \"    main()\"\n   ],\n   \"id\": \"e4c7d6fbb7f9b2\",\n   \"outputs\": [\n    {\n     \"name\": \"stderr\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Asking to truncate to max_length but no maximum length is provided and the model has no predefined maximum length. Default to no truncation.\\n\"\n     ]\n    },\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"=== Comparing Matching Strategies ===\\n\",\n      \"Evaluating with exact matching...\\n\",\n      \"Evaluating with partial matching...\\n\",\n      \"Evaluating with boundary_relaxed matching...\\n\",\n      \"        Strategy  Precision   Recall       F1  Total_TP  Total_FP  Total_FN\\n\",\n      \"           exact   0.027730 0.013491 0.018151        16       561      1170\\n\",\n      \"         partial   0.923744 0.448653 0.603966       533        44       655\\n\",\n      \"boundary_relaxed   0.677643 0.329680 0.443562       391       186       795\\n\",\n      \"\\n\",\n      \"=== Detailed Evaluation (Partial Matching) ===\\n\",\n      \"Global F1: 0.6040\\n\",\n      \"Global Precision: 0.9237\\n\",\n      \"Global Recall: 0.4487\\n\",\n      \"\\n\",\n      \"=== Per-Label Results ===\\n\",\n      \"         Label  TP  FP  FN  Precision  Recall     F1  Support\\n\",\n      \"        STREET  71   3   3     0.9595  0.9595 0.9595       74\\n\",\n      \"          CITY  70   3   5     0.9589  0.9333 0.9459       75\\n\",\n      \"       ZIPCODE  64   1   8     0.9846  0.8889 0.9343       72\\n\",\n      \"VERTRAGSNUMMER  79   6  22     0.9294  0.7822 0.8495      101\\n\",\n      \"   PHONENUMBER  29   6   9     0.8286  0.7632 0.7945       38\\n\",\n      \"     GIVENNAME  97   2 109     0.9798  0.4709 0.6361      206\\n\",\n      \"       SURNAME  98   4 129     0.9608  0.4317 0.5957      227\\n\",\n      \"         EMAIL   8   1  13     0.8889  0.3810 0.5333       21\\n\",\n      \"   BUILDINGNUM   8   2  64     0.8000  0.1111 0.1951       72\\n\",\n      \"          DATE   9   0 104     1.0000  0.0796 0.1475      113\\n\",\n      \"       ZAHLUNG   0   0  27     0.0000  0.0000 0.0000       27\\n\",\n      \"           FAX   0   0   5     0.0000  0.0000 0.0000        5\\n\",\n      \"      USERNAME   0  13   0     0.0000  0.0000 0.0000        0\\n\",\n      \"          BANK   0   0   3     0.0000  0.0000 0.0000        3\\n\",\n      \"           BIC   0   0   1     0.0000  0.0000 0.0000        1\\n\",\n      \"     IDCARDNUM   0   2   0     0.0000  0.0000 0.0000        0\\n\",\n      \"         TITLE   0   0  22     0.0000  0.0000 0.0000       22\\n\",\n      \"  ORGANIZATION   0   0  28     0.0000  0.0000 0.0000       28\\n\",\n      \"   ZÄHLERSTAND   0   0  16     0.0000  0.0000 0.0000       16\\n\",\n      \"  ZÄHLERNUMMER   0   0  39     0.0000  0.0000 0.0000       39\\n\",\n      \"  GESENDET_MIT   0   0  27     0.0000  0.0000 0.0000       27\\n\",\n      \"          IBAN   0   0   7     0.0000  0.0000 0.0000        7\\n\",\n      \"           URL   0   0  14     0.0000  0.0000 0.0000       14\\n\",\n      \"        TAXNUM   0   1   0     0.0000  0.0000 0.0000        0\\n\",\n      \"\\n\",\n      \"=== Error Analysis ===\\n\",\n      \"Labels with low recall (<0.3): ['BUILDINGNUM', 'DATE', 'ZAHLUNG', 'FAX', 'USERNAME', 'BANK', 'BIC', 'IDCARDNUM', 'TITLE', 'ORGANIZATION', 'ZÄHLERSTAND', 'ZÄHLERNUMMER', 'GESENDET_MIT', 'IBAN', 'URL', 'TAXNUM']\\n\",\n      \"Labels with high FP rate: ['USERNAME', 'IDCARDNUM', 'TAXNUM']\\n\"\n     ]\n    }\n   ],\n   \"execution_count\": 11\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 2\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython2\",\n   \"version\": \"2.7.6\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notebooks/3_model_training_and_testing/piiranha/piiranha_start.ipynb b/notebooks/3_model_training_and_testing/piiranha/piiranha_start.ipynb
--- a/notebooks/3_model_training_and_testing/piiranha/piiranha_start.ipynb	(revision 68e3fd01408523769b50e7566e6fd0db7c5afb8a)
+++ b/notebooks/3_model_training_and_testing/piiranha/piiranha_start.ipynb	(date 1752794919835)
@@ -1,2860 +1,670 @@
-{
- "cells": [
-  {
-   "metadata": {
-    "ExecuteTime": {
-     "end_time": "2025-07-15T14:29:38.750885Z",
-     "start_time": "2025-07-15T14:29:37.944092Z"
-    }
-   },
-   "cell_type": "code",
-   "source": [
-    "!pip install transformers\n",
-    "# pip install ipywidgets"
-   ],
-   "id": "5334b350df77b30e",
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Requirement already satisfied: transformers in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (4.52.4)\r\n",
-      "Requirement already satisfied: filelock in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from transformers) (3.18.0)\r\n",
-      "Requirement already satisfied: huggingface-hub<1.0,>=0.30.0 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from transformers) (0.32.6)\r\n",
-      "Requirement already satisfied: numpy>=1.17 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from transformers) (2.3.0)\r\n",
-      "Requirement already satisfied: packaging>=20.0 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from transformers) (25.0)\r\n",
-      "Requirement already satisfied: pyyaml>=5.1 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from transformers) (6.0.2)\r\n",
-      "Requirement already satisfied: regex!=2019.12.17 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from transformers) (2024.11.6)\r\n",
-      "Requirement already satisfied: requests in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from transformers) (2.32.4)\r\n",
-      "Requirement already satisfied: tokenizers<0.22,>=0.21 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from transformers) (0.21.1)\r\n",
-      "Requirement already satisfied: safetensors>=0.4.3 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from transformers) (0.5.3)\r\n",
-      "Requirement already satisfied: tqdm>=4.27 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from transformers) (4.67.1)\r\n",
-      "Requirement already satisfied: fsspec>=2023.5.0 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from huggingface-hub<1.0,>=0.30.0->transformers) (2025.5.1)\r\n",
-      "Requirement already satisfied: typing-extensions>=3.7.4.3 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from huggingface-hub<1.0,>=0.30.0->transformers) (4.14.0)\r\n",
-      "Requirement already satisfied: hf-xet<2.0.0,>=1.1.2 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from huggingface-hub<1.0,>=0.30.0->transformers) (1.1.3)\r\n",
-      "Requirement already satisfied: charset_normalizer<4,>=2 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from requests->transformers) (3.4.2)\r\n",
-      "Requirement already satisfied: idna<4,>=2.5 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from requests->transformers) (3.10)\r\n",
-      "Requirement already satisfied: urllib3<3,>=1.21.1 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from requests->transformers) (2.4.0)\r\n",
-      "Requirement already satisfied: certifi>=2017.4.17 in /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages (from requests->transformers) (2025.4.26)\r\n"
-     ]
-    }
-   ],
-   "execution_count": 1
-  },
-  {
-   "metadata": {},
-   "cell_type": "markdown",
-   "source": "## Import Piiranha Model from Huggingfase and Map the Piiranha Labels to our Custom Labels",
-   "id": "60bc199eaef4d8"
-  },
-  {
-   "cell_type": "code",
-   "id": "initial_id",
-   "metadata": {
-    "collapsed": true,
-    "ExecuteTime": {
-     "end_time": "2025-07-15T14:29:46.260509Z",
-     "start_time": "2025-07-15T14:29:41.534492Z"
-    }
-   },
-   "source": [
-    "import torch\n",
-    "from transformers import AutoTokenizer, AutoModelForTokenClassification\n",
-    "\n",
-    "# Load model and tokenizer\n",
-    "model_name = \"iiiorg/piiranha-v1-detect-personal-information\"\n",
-    "tokenizer = AutoTokenizer.from_pretrained(model_name)\n",
-    "model = AutoModelForTokenClassification.from_pretrained(model_name)\n",
-    "\n",
-    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
-    "model.to(device)\n",
-    "\n",
-    "# Label mapping: PIIRANHA → your schema\n",
-    "PIIRANHA_TO_CUSTOM = {\n",
-    "    \"GIVENNAME\": \"VORNAME\",\n",
-    "    \"SURNAME\": \"NACHNAME\",\n",
-    "    \"USERNAME\": \"NACHNAME\",  # no \"username\" slot, fall back to surname\n",
-    "    \"ACCOUNTNUM\": \"VERTRAGSNUMMER\",\n",
-    "    \"CREDITCARDNUMBER\": \"VERTRAGSNUMMER\",\n",
-    "    \"BUILDINGNUM\": \"HAUSNUMMER\",\n",
-    "    \"STREET\": \"STRASSE\",\n",
-    "    \"CITY\": \"WOHNORT\",\n",
-    "    \"STATE\": \"WOHNORT\",  # treat state like city\n",
-    "    \"ZIPCODE\": \"POSTLEITZAHL\",\n",
-    "    \"LOCATION\": \"WOHNORT\",\n",
-    "    \"DATEOFBIRTH\": \"DATUM\",\n",
-    "    \"DATE\": \"DATUM\",\n",
-    "    \"EMAIL\": \"EMAIL\",\n",
-    "    \"PHONENUMBER\": \"TELEFONNUMMER\",\n",
-    "    \"TELEPHONENUM\": \"TELEFONNUMMER\",\n",
-    "    \"IBAN\": \"IBAN\",\n",
-    "    \"BIC\": \"BIC\",\n",
-    "    \"URL\": \"LINK\",\n",
-    "    \"ORGANIZATION\": \"FIRMA\",\n",
-    "    \"TITLE\": \"TITEL\",\n",
-    "    # the following Piiranha labels have no equivalent, so we drop them:\n",
-    "    # \"IDCARDNUM\", \"DRIVERLICENSENUM\", \"SOCIALNUM\", \"TAXNUM\", \"PASSWORD\"\n",
-    "}\n",
-    "\n",
-    "\n",
-    "def apply_redaction(masked_text, start, end, pii_type, aggregate_redaction):\n",
-    "    for j in range(start, end):\n",
-    "        masked_text[j] = ''\n",
-    "    if aggregate_redaction:\n",
-    "        masked_text[start] = '[redacted]'\n",
-    "    else:\n",
-    "        masked_text[start] = f'[{pii_type}]'\n",
-    "\n",
-    "\n",
-    "def convert_labels_to_custom(spans):\n",
-    "    converted = []\n",
-    "    for span in spans:\n",
-    "        raw_label = span[\"label\"].replace(\"I-\", \"\").replace(\"B-\", \"\")\n",
-    "        mapped_label = PIIRANHA_TO_CUSTOM.get(raw_label)\n",
-    "        if mapped_label:\n",
-    "            converted.append({\n",
-    "                \"start\": span[\"start\"],\n",
-    "                \"end\": span[\"end\"],\n",
-    "                \"label\": mapped_label\n",
-    "            })\n",
-    "    return converted\n",
-    "\n",
-    "\n",
-    "def mask_pii_spans(text, aggregate_redaction=True, return_spans=False):\n",
-    "    inputs = tokenizer(text, return_tensors=\"pt\", truncation=True, padding=True)\n",
-    "    inputs = {k: v.to(device) for k, v in inputs.items()}\n",
-    "\n",
-    "    with torch.no_grad():\n",
-    "        outputs = model(**inputs)\n",
-    "\n",
-    "    predictions = torch.argmax(outputs.logits, dim=-1)\n",
-    "\n",
-    "    encoded_inputs = tokenizer.encode_plus(\n",
-    "        text, return_offsets_mapping=True, add_special_tokens=True\n",
-    "    )\n",
-    "    offset_mapping = encoded_inputs['offset_mapping']\n",
-    "\n",
-    "    masked_text = list(text)\n",
-    "    is_redacting = False\n",
-    "    redaction_start = 0\n",
-    "    current_pii_type = ''\n",
-    "    predicted_spans = []\n",
-    "\n",
-    "    for i, (start, end) in enumerate(offset_mapping):\n",
-    "        if start == end:\n",
-    "            continue  # Skip special tokens\n",
-    "\n",
-    "        label_id = predictions[0][i].item()\n",
-    "        label = model.config.id2label[label_id]\n",
-    "\n",
-    "        if label != 'O':\n",
-    "            if not is_redacting:\n",
-    "                is_redacting = True\n",
-    "                redaction_start = start\n",
-    "                current_pii_type = label\n",
-    "            elif not aggregate_redaction and label != current_pii_type:\n",
-    "                predicted_spans.append({\"start\": redaction_start, \"end\": start, \"label\": current_pii_type})\n",
-    "                apply_redaction(masked_text, redaction_start, start, current_pii_type, aggregate_redaction)\n",
-    "                redaction_start = start\n",
-    "                current_pii_type = label\n",
-    "        else:\n",
-    "            if is_redacting:\n",
-    "                predicted_spans.append({\"start\": redaction_start, \"end\": end, \"label\": current_pii_type})\n",
-    "                apply_redaction(masked_text, redaction_start, end, current_pii_type, aggregate_redaction)\n",
-    "                is_redacting = False\n",
-    "\n",
-    "    if is_redacting:\n",
-    "        predicted_spans.append({\"start\": redaction_start, \"end\": len(masked_text), \"label\": current_pii_type})\n",
-    "        apply_redaction(masked_text, redaction_start, len(masked_text), current_pii_type, aggregate_redaction)\n",
-    "\n",
-    "    result = ''.join(masked_text)\n",
-    "    if return_spans:\n",
-    "        return result, predicted_spans\n",
-    "    return result"
-   ],
-   "outputs": [],
-   "execution_count": 2
-  },
-  {
-   "metadata": {},
-   "cell_type": "markdown",
-   "source": "## Load Original Mails and execute Anonymization",
-   "id": "124f7392427ad9c0"
-  },
-  {
-   "metadata": {
-    "ExecuteTime": {
-     "end_time": "2025-07-15T14:30:35.297238Z",
-     "start_time": "2025-07-15T14:29:49.767674Z"
-    }
-   },
-   "cell_type": "code",
-   "source": [
-    "from pathlib import Path\n",
-    "\n",
-    "folder = Path(\"../../../data/original/golden_dataset_original\")\n",
-    "\n",
-    "for file_path in folder.glob(\"*.txt\"):\n",
-    "    with open(file_path, \"r\", encoding=\"utf-8\") as f:\n",
-    "        text = f.read()\n",
-    "\n",
-    "    masked_text, spans = mask_pii_spans(text, return_spans=True)\n",
-    "    mapped_spans = convert_labels_to_custom(spans)\n",
-    "\n",
-    "    print(f\"\\n=== {file_path.name} ===\")\n",
-    "    print(masked_text[:500])  # Preview first 500 chars\n",
-    "    print(\"Predicted PII spans:\")\n",
-    "    for span in mapped_spans:\n",
-    "        print(span)\n",
-    "with open(\"../../../data/original/golden_dataset_original/1.txt\", \"r\", encoding=\"utf-8\") as f:\n",
-    "    text = f.read()\n",
-    "\n",
-    "masked_text, spans = mask_pii_spans(text, return_spans=True)\n",
-    "mapped_spans = convert_labels_to_custom(spans)\n",
-    "\n",
-    "print(masked_text)\n",
-    "print(\"Predicted PII spans:\")\n",
-    "for span in mapped_spans:\n",
-    "    print(span)\n",
-    "## Load Ground Truth and Calculate Precision, Recall & F1\n",
-    "import json\n",
-    "\n",
-    "# Load ground truth\n",
-    "with open(\"../../../data/original/ground_truth.json\", \"r\", encoding=\"utf-8\") as f:\n",
-    "    ground_truth = json.load(f)\n",
-    "\n",
-    "# Metrics counters\n",
-    "TP, FP, FN = 0, 0, 0\n",
-    "\n",
-    "# Optional: group similar gold labels\n",
-    "GROUPED_LABELS = {\n",
-    "    \"TITEL\": {\"TITEL\"},\n",
-    "    \"VORNAME\": {\"VORNAME\", \"GIVENNAME\"},\n",
-    "    \"NACHNAME\": {\"NACHNAME\", \"SURNAME\", \"USERNAME\"},\n",
-    "    \"FIRMA\": {\"FIRMA\"},\n",
-    "    \"TELEFONNUMMER\": {\"TELEFONNUMMER\", \"PHONENUMBER\", \"TELEPHONENUM\"},\n",
-    "    \"EMAIL\": {\"EMAIL\"},\n",
-    "    \"FAX\": {\"FAX\"},\n",
-    "    \"STRASSE\": {\"STRASSE\", \"STREET\"},\n",
-    "    \"HAUSNUMMER\": {\"HAUSNUMMER\", \"BUILDINGNUM\"},\n",
-    "    \"POSTLEITZAHL\": {\"POSTLEITZAHL\", \"PLZ\", \"ZIP\", \"ZIPCODE\"},\n",
-    "    \"WOHNORT\": {\"WOHNORT\", \"ORT\", \"CITY\"},\n",
-    "    \"ZÄHLERNUMMER\": {\"ZÄHLERNUMMER\", \"METER_ID\"},\n",
-    "    \"ZÄHLERSTAND\": {\"ZÄHLERSTAND\", \"METER_READING\"},\n",
-    "    \"VERTRAGSNUMMER\": {\"VERTRAGSNUMMER\", \"ANGEBOTSNUMMER\", \"KUNDENNUMMER\"},\n",
-    "    \"ZAHLUNG\": {\"BETRAG\", \"ZAHLUNG\", \"AMOUNT\"},\n",
-    "    \"BANK\": {\"BANK\"},\n",
-    "    \"IBAN\": {\"IBAN\"},\n",
-    "    \"BIC\": {\"BIC\"},\n",
-    "    \"DATUM\": {\"DATUM\", \"DATE\", \"DATEOFBIRTH\"},\n",
-    "    \"GESENDET_MIT\": {\"GESENDET_MIT\"},\n",
-    "    \"LINK\": {\"LINK\", \"URL\"}\n",
-    "}\n",
-    "\n",
-    "\n",
-    "# Helper: normalize labels to group base (e.g. map VERTRAGSNUMMER → KUNDENNUMMER)\n",
-    "def normalize_label(label):\n",
-    "    for group, aliases in GROUPED_LABELS.items():\n",
-    "        if label in aliases:\n",
-    "            return group\n",
-    "    return label\n",
-    "\n",
-    "\n",
-    "# Relaxed span match with IoU\n",
-    "def relaxed_overlap(pred, gold, iou_threshold=0.5):\n",
-    "    pred_label = normalize_label(pred[\"label\"])\n",
-    "    gold_label = normalize_label(gold[\"label\"])\n",
-    "    if pred_label != gold_label:\n",
-    "        return False\n",
-    "    inter_start = max(pred[\"start\"], gold[\"start\"])\n",
-    "    inter_end = min(pred[\"end\"], gold[\"end\"])\n",
-    "    intersection = max(0, inter_end - inter_start)\n",
-    "    union = max(pred[\"end\"], gold[\"end\"]) - min(pred[\"start\"], gold[\"start\"])\n",
-    "    iou = intersection / union if union > 0 else 0\n",
-    "    return iou >= iou_threshold\n",
-    "\n",
-    "\n",
-    "# Evaluation loop\n",
-    "for example in ground_truth:\n",
-    "    text = example[\"text\"]\n",
-    "    gold_spans = [label for label in example[\"labels\"] if label[\"start\"] < label[\"end\"]]\n",
-    "\n",
-    "    _, raw_preds = mask_pii_spans(text, return_spans=True)\n",
-    "    pred_spans = convert_labels_to_custom(raw_preds)\n",
-    "\n",
-    "    matched_gold = set()\n",
-    "    matched_pred = set()\n",
-    "\n",
-    "    for i, pred in enumerate(pred_spans):\n",
-    "        for j, gold in enumerate(gold_spans):\n",
-    "            if relaxed_overlap(pred, gold):\n",
-    "                TP += 1\n",
-    "                matched_gold.add(j)\n",
-    "                matched_pred.add(i)\n",
-    "                break\n",
-    "\n",
-    "    FP += len(pred_spans) - len(matched_pred)\n",
-    "    FN += len(gold_spans) - len(matched_gold)\n",
-    "\n",
-    "# Compute metrics\n",
-    "precision = TP / (TP + FP) if (TP + FP) > 0 else 0.0\n",
-    "recall = TP / (TP + FN) if (TP + FN) > 0 else 0.0\n",
-    "f1 = 2 * precision * recall / (precision + recall) if (precision + recall) > 0 else 0.0\n",
-    "\n",
-    "print(\"=== Evaluation Metrics ===\")\n",
-    "print(f\"True Positives: {TP}\")\n",
-    "print(f\"False Positives: {FP}\")\n",
-    "print(f\"False Negatives: {FN}\")\n",
-    "print(f\"\\nPrecision: {precision:.4f}\")\n",
-    "print(f\"Recall:    {recall:.4f}\")\n",
-    "print(f\"F1 Score:  {f1:.4f}\")"
-   ],
-   "id": "d93cd10903bcb4f",
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "Asking to truncate to max_length but no maximum length is provided and the model has no predefined maximum length. Default to no truncation.\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "\n",
-      "=== 29.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "hiermit möchte ich dass all meine personenbezogenen Daten (Vertragskonto[redacted]öscht werden.\n",
-      "Ich bitte um eine schriftliche Bestätigung darüber, dass alle Daten von mir mit dem o.g. Vertragskonto gelöscht worden sind.\n",
-      "Mit freundlichen Grüßen,\n",
-      "Liselotte Metz\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 103, 'end': 118, 'label': 'VERTRAGSNUMMER'}\n",
-      "\n",
-      "=== 15.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "hiermit lege Ich,[redacted] Vertragsnummer[redacted] bei der Schlussrechnung 2022/ 2023 Wiederspruch ein.\n",
-      "Die Wohnungsabnahme war am 15.05.2022, anbei das Übergabeprotokoll der Hausverwaltung. Der Abbrechnungszeitraum vom 16.05.-31.05.22 fäll somit nicht mehr in meinen Bemessungszeitraum. Anbei auch die neue Meldebescheinigung. Ich bitte hiermit um Klärung der Abrechnung.\n",
-      "Mit freundlichen Grüßen[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 48, 'end': 65, 'label': 'VORNAME'}\n",
-      "{'start': 80, 'end': 91, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 437, 'end': 454, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 114.txt ===\n",
-      "Kunde: \t\t\tWernecke GmbH & Co. OHG und Niemeier Carsten Stiftung & Co. KG\n",
-      "Verbrauchsstelle:[redacted][redacted]ähler:\t\t\tDE71117317620819513570\n",
-      "Vertragsnummer:[redacted]Sehr geehrte Damen und Herren,\n",
-      "wir bedanken uns für Ihre Abschlagsanpassung gemäß Ihres Schreibens vom 29.07.2023, \n",
-      "auch wenn Ihr Schreiben auf unsere eingelegten Widersprüche nicht eingegangen ist.\n",
-      "Der guten Ordnung halber verweisen wir erneut zu Ihrer im Dezember 2022 angekündigten Preiserhöhung auf unseren Widerspruch vom 6. Jan\n",
-      "Predicted PII spans:\n",
-      "{'start': 90, 'end': 100, 'label': 'STRASSE'}\n",
-      "{'start': 100, 'end': 105, 'label': 'HAUSNUMMER'}\n",
-      "{'start': 152, 'end': 163, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 596, 'end': 605, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 100.txt ===\n",
-      "Vertragsnummer[redacted].[redacted]Sehr geehrte Damen und Herren, wir haben am 17.07.23 ein email an euch \n",
-      "geschickt und leider nach fast 1,5 Monaten immer noch keine Antwort \n",
-      "bekommen. Schreiben heute noch ein Mal. \n",
-      " \n",
-      "in letzter Abrechnung vom 29.06.2023 ist einen Fehler aufgetreten und zwar \n",
-      "Zählerstand passt nicht. Am 18.06.23 unsere tatsächliche Zählerstand war \n",
-      "13962 m3. Laut Ihre Abrechnung 14042 m3. Das ist 80m3 Differenz (also 80m3 \n",
-      "zu viel). Wir bieten Sie alles umzurechnen . Vielen Dan\n",
-      "Predicted PII spans:\n",
-      "{'start': 14, 'end': 30, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 31, 'end': 74, 'label': 'NACHNAME'}\n",
-      "{'start': 561, 'end': 567, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 128.txt ===\n",
-      "Am 13.07.2023 wurde ein neuer Gaszähler eingebaut. Anbei ein Foto vom aktuellen Zähler.\n",
-      "Diese Nachricht wurde von meinem Android Mobiltelefon mit GMX Mail gesendet.\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "\n",
-      "=== 129.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "ich plane, den Energieversorger zu wechseln.\n",
-      "Bezüglich Ihrer Preisgarantie habe ich jedoch eine Verständnisfrage.\n",
-      "Sie formulieren diese wie folgt: Ausgenommen von der Preisgarantie sind \n",
-      "Preisänderungen, die auf Änderungen der U-steuer sowie Preisänderungen, \n",
-      "die auf nach Vertragsabschluss während der Preisgarantie erstmals \n",
-      "wirksam werdenden neuen Steuern, Abgaben oder sons\n",
-      "tigen unmittelbar die Beschaffung, Erzeugung, Speicherung, Netznutzung \n",
-      "(Übertragung u. Ver\n",
-      "Predicted PII spans:\n",
-      "{'start': 974, 'end': 984, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 101.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "wie bereits besprochen wurde heute bei uns ein defekter Stromzähler durch\n",
-      "die Firma Lichtstrom im Auftrag von Avacon ausgetauscht.\n",
-      "Ein Einbau- bzw. Ausbaubeleg wurde uns nicht ausgehändigt es befindet sich\n",
-      "lediglich ein Beleg am Gerät siehe Anhang.\n",
-      "Für Rückfragen stehe ich Ihnen gern zur Verfügung.\n",
-      "Mit freundlichen Grüßen\n",
-      "Phillip[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 362, 'end': 371, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 115.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "ich hatte am 18.06. mit dem Kundensupport telefoniert und um eine Korrektur\n",
-      "der Konto-Zuordnung zu meiner E-Mail-Adresse gebeten:\n",
-      "-[redacted] Ines Haase: alter, beendeter Vertrag\n",
-      "-[redacted][redacted] Rosita Rogner: aktueller Vertrag\n",
-      "Meine E-Mail-Adresse ist mit dem beendeten Konto[redacted]bunden.\n",
-      "Telefonisch wurde mir mitgeteilt, dass dies auf meinen aktuellen Vertrag\n",
-      "([redacted][redacted]ändert wird. Dies ist bisher nicht geschehen.\n",
-      "Bitte teilen Sie mir mit, wen\n",
-      "Predicted PII spans:\n",
-      "{'start': 162, 'end': 173, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 212, 'end': 226, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 226, 'end': 236, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 318, 'end': 332, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 414, 'end': 427, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 427, 'end': 440, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 569, 'end': 580, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 14.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "ich widerrufe hiermit meine Einwilligung in die Verarbeitung meiner\n",
-      "personenbezogenen Daten. Ich fordere Sie darüber hinaus auf, die von Ihnen\n",
-      "zu meiner Person gespeicherten personenbezogenen Daten zu löschen und mir\n",
-      "anschließend die Löschung unverzüglich zu bestätigen.\n",
-      "Sollten Gründe gegen die Löschung meiner personenbezogenen Daten sprechen,\n",
-      "bitte ich um Angaben der jeweiligen gesetzlichen Grundlage.\n",
-      "Mit freundlichen Grüßen\n",
-      "Manuel[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 467, 'end': 474, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 28.txt ===\n",
-      "Hallo, leider kann ich mich in mein Kundenkonto nicht einloggen\n",
-      "Mit freundlichen Grüßen\n",
-      "Hannes[redacted] Nachricht wurde von meinem Android Mobiltelefon mit GMX Mail gesendet.\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 94, 'end': 117, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 16.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "Sie schreiben mir am 7.10.2022 dass ich noch einen Guthaben von 82,19€ habe. Diese wurde noch nie zurück bezahlt. Der Konto , der Sie angegeben haben war richtig allerdings kam das Geld nie an. Bitte nochmal prüfen und mir das Geld zahlen. Im Anhang der Brief.\n",
-      "Mit freundlichen Grüßen ,[redacted][redacted][redacted] pe Outlook pentru iOS<https://aka.ms/o0ukef>\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 317, 'end': 327, 'label': 'VORNAME'}\n",
-      "{'start': 327, 'end': 339, 'label': 'NACHNAME'}\n",
-      "{'start': 339, 'end': 344, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 103.txt ===\n",
-      "Hallo,\n",
-      "Anbei meine Vertragsbestätigung.\n",
-      "Mit freundlichen Grüßen\n",
-      "Dr. Ewald Kramer\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "\n",
-      "=== 117.txt ===\n",
-      "Guten Tag.  Wir möchten unsere Abschlagzahlungen auf den 2 jeden Monats verlagern für Erdgas Vertrag[redacted] Strom Vertrag 402071749. Bitte aktualisieren/abändern bitte . W.Weißbrot\n",
-      "Gesendet von Fliegner Mail auf[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 100, 'end': 114, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 218, 'end': 229, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 102.txt ===\n",
-      "Hallo EON,\n",
-      "Bitte erstatten Sie auf folgendes Konto zurück[redacted][redacted] DE28263410720363784400\n",
-      "bei der Kartoffelbank. \n",
-      "Mit freundlichen Grüßen[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 57, 'end': 75, 'label': 'VORNAME'}\n",
-      "{'start': 75, 'end': 79, 'label': 'NACHNAME'}\n",
-      "{'start': 150, 'end': 167, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 17.txt ===\n",
-      "Vertragsnumer[redacted]\n",
-      "Wir haben Stromzähler am 21.04.23 in Büro in[redacted]gegeben. Bei Herr Hiller.\n",
-      "Mit freundlichen Grüßen\n",
-      "Holsten KaffeeZimmer\n",
-      "ส่งจาก Outlook สำหรับ Android<https://aka.ms/AAb9ysg>\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 13, 'end': 29, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 74, 'end': 83, 'label': 'WOHNORT'}\n",
-      "\n",
-      "=== 13.txt ===\n",
-      "Guten Tag,\n",
-      "wie gerade telefonisch besprochen sende ich Ihnen den Mietvertrag im Anhang.\n",
-      "Meine Eon Vertragsnummer lautet :[redacted] Zählernummer für Strom lautet: 1 ITR00 7263 9265\n",
-      "Aktueller Zählerstand: 7761,1 kWh\n",
-      "Bitte schalten sie mir so schnell es geht den Strom frei. Ich lebe seit 1,5 Wochen ohne Strom hier.\n",
-      "Ich bitte außerdem um eine Rückmeldung auf diese Mailadresse.\n",
-      "Mit freundlichen Grüßen\n",
-      "Jana Hahn\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 121, 'end': 135, 'label': 'VERTRAGSNUMMER'}\n",
-      "\n",
-      "=== 106.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "anbei übersende ich Ihnen schriftlich meine Kündigung des Erdgasvertrages mit der Vertragsnummer[redacted] Kündigung habe ich auch bereits über das Onlineportal \"Mein Rogner\" getätigt.\n",
-      "Mit freundlichen Grüßen\n",
-      "Gabriel[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 127, 'end': 142, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 252, 'end': 267, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 112.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "Mit diesem Schreiben möchte ich Sie über meine Namensänderung aufgrund\n",
-      "meiner Hochzeit am 28.01.2022 informieren. Ab sofort heiße ich mit\n",
-      "Nachnamen[redacted] Bitte ändern Sie Ihre Datenbestände entsprechend und\n",
-      "schicken mir binnen 14 Tagen eine Bestätigung zu.\n",
-      "Eine Kopie der Eheurkunde und des Personalausweises finden Sie im Anhang.\n",
-      "Mit freundlichen Grüßen,[redacted] früher[redacted]\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 178, 'end': 185, 'label': 'NACHNAME'}\n",
-      "{'start': 387, 'end': 400, 'label': 'VORNAME'}\n",
-      "{'start': 407, 'end': 416, 'label': 'STRASSE'}\n",
-      "\n",
-      "=== 113.txt ===\n",
-      "Hier wie gewünscht in der Anlage die Rechnung der Trocknungsfirma aus der die benötigten Daten ersichtlich sind\n",
-      "Mit netten Grüßen \n",
-      "Wagner\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "\n",
-      "=== 107.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "ich möchte Ihnen auf diesem Weg schon jetzt ein Foto eines Schreiben senden, welches Ihnen ab morgen noch über den Postweg zugestellt wird. Bezüglich der Schlussrechnung des Vertrags[redacted] ich um dringende Beachtung.\n",
-      "Mit freundlichen Grüßen\n",
-      "Dorothe Henck\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 213, 'end': 232, 'label': 'VERTRAGSNUMMER'}\n",
-      "\n",
-      "=== 12.txt ===\n",
-      "Guten Tag\n",
-      "Es wurde noch ein Zhlerfoto vom Zähler mit der Nummer 63746253-1992 benötigt.\n",
-      "Kunde: Ulrich[redacted]stelle:[redacted]ähler: 63746253-1992\n",
-      "Vertragsnummer:[redacted] ist im Anhang\n",
-      "Mfg\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 101, 'end': 120, 'label': 'NACHNAME'}\n",
-      "{'start': 127, 'end': 160, 'label': 'STRASSE'}\n",
-      "{'start': 196, 'end': 213, 'label': 'VERTRAGSNUMMER'}\n",
-      "\n",
-      "=== 10.txt ===\n",
-      ">\n",
-      "> Sehr geehrter Damen und Herren,\n",
-      ">\n",
-      "> Würde gerne Einer 30 Euro monatlich Ratenzahlung für meiner letzte Strom\n",
-      "> Rechnung vereinbaren.\n",
-      ">\n",
-      "> Vertragsnummer:[redacted]\n",
-      "> Rechnungsnummer:[redacted]\n",
-      ">\n",
-      "> Mit freundlichem grüßen\n",
-      ">\n",
-      "> Herr Roger Fischer\n",
-      ">\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 156, 'end': 169, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 188, 'end': 214, 'label': 'VERTRAGSNUMMER'}\n",
-      "\n",
-      "=== 38.txt ===\n",
-      "Sehr geehrter Damen und Herren, Hiermit sende ich Ihnen die Kündigung Bestätigung. Bitte sehen Sie den Anhang dankeSent from my Galaxy\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "\n",
-      "=== 139.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "Ich erbitte den offenen Betrag von 163,23 Euro,\n",
-      "Am 1.10.2023 begleichen zu dürfen, da ich in wenigen Tagen eine Überweisung\n",
-      "bekomme.\n",
-      "Ich war jetzt lange Zeit nicht vor Ort, wegen eines Schimmel Befalls. Dabei\n",
-      "gingen mir einigen Pflichten unter, die ich jetzt nach holen möchte.\n",
-      "Ich würde mich freuen, wenn dies möglich wäre.\n",
-      "Vielen Dank.\n",
-      "Grüße Diana Schulz [redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 388, 'end': 428, 'label': 'STRASSE'}\n",
-      "\n",
-      "=== 111.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "ich habe eine Frage und zwar hab ich schon öfter angerufen ..Ich kann mich nicht registrieren zeigt immer immer ein Fehler...was kann ich machen das ich mich Registrieren kann und die App nutzen kann? Habe mal ein Bild hinzugefügt das zeigt der mir immer an ..\n",
-      "Mit freundlichen Grüßen\n",
-      "Booken\n",
-      "Diese Nachricht wurde von meinem Android Mobiltelefon mit GMX Mail gesendet.\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "\n",
-      "=== 105.txt ===\n",
-      "Im Anhang sende ich ihnen meinen Stromvertrag mit der Bitte um Bestätigung.\n",
-      "Bei Rückfragen erreichen sie mich unter:[redacted] freundlichen Grüßen,\n",
-      "Simona Hofmann\n",
-      "-- \n",
-      "Diese E-Mail wurde von Hiller GbR-Antivirussoftware auf Viren geprüft. www.avast.com\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 116, 'end': 134, 'label': 'TELEFONNUMMER'}\n",
-      "\n",
-      "=== 104.txt ===\n",
-      "Sehr geehrte Damen und Herren \n",
-      "Hiermit bestätige ich den Eingang Ihres Schreibens.  Ich kann Ihnen eine Ratenzahlung in Höhe von 30€ monatlich zum 20ten jedes Monats anbieten.  Mehr ist mir momentan leider nicht möglich,  sobald sich etwas an meiner finanziellen Situation ändert , werde ich natürlich die restrückstände begleichen.  \n",
-      "Bitte um Rückmeldung \n",
-      "Mit freundlichen Grüßen \n",
-      "Marianne Gude \n",
-      "Gesendet von AOL auf Android\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "\n",
-      "=== 110.txt ===\n",
-      "Guten Tag, bei dem begleichen der offenen Rechnung vom 1.06-1.08 ist mir ein Fehler in der Rechnungsnummer unterlaufen. Meine Vertragsnummer lautet:[redacted] Anhang liegt ein Kontoauszug vor, dass ich den Betrag von 282€ beglichen habe. Mit freundlichen Grüßen[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 148, 'end': 160, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 263, 'end': 281, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 39.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "wir bitten Sie um die Reduzierung der Abschlagskosten der Eheleute Reuter, da das Objekt am[redacted][redacted] dem 15.08.2023 unbewohnt ist und verkauft wird.\n",
-      "Mit freundlichen Grüßen[redacted]eißler\n",
-      "Wende GbR[redacted].:[redacted]cid:image001.jpg@01D9D68F.2E36C8F0][redacted]example.com<mailto:[redacted]example.com>\n",
-      "www.wende-immobilien.de<http://www.wende-immobilien.de/>\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 122, 'end': 141, 'label': 'STRASSE'}\n",
-      "{'start': 141, 'end': 163, 'label': 'POSTLEITZAHL'}\n",
-      "{'start': 235, 'end': 243, 'label': 'VORNAME'}\n",
-      "{'start': 259, 'end': 307, 'label': 'STRASSE'}\n",
-      "{'start': 309, 'end': 324, 'label': 'TELEFONNUMMER'}\n",
-      "{'start': 359, 'end': 373, 'label': 'NACHNAME'}\n",
-      "{'start': 392, 'end': 405, 'label': 'EMAIL'}\n",
-      "\n",
-      "=== 11.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "anbei, als pdf-Datei die fehlende Unterlage.\n",
-      "Mit freundlichen Grüßen\n",
-      "Manuela[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 107, 'end': 117, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 76.txt ===\n",
-      "Guten Tag\n",
-      "Wie telefonisch besprochen, möchte ich den Betrag für den Bautrockner zusätzlich\n",
-      "Zum Abschlag extra bezahlen.\n",
-      "Im Anhang die Kostenabrechnung.\n",
-      "Mir freundlichen Grüßen[redacted]. 02851 33116\n",
-      "Ich werde den Betrag von 115,64 Euro auf mein Vertragskonto überweisen.\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 175, 'end': 234, 'label': 'STRASSE'}\n",
-      "\n",
-      "=== 62.txt ===\n",
-      "Vertragsnummer:[redacted]k\n",
-      "Verbraucherstelle:[redacted][redacted]ähler: 92739304\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "Ich kündige den Vertrag wegen dem Umzug zum 30.11.23\n",
-      "Um eine schriftliche Bestätigung wird gebeten.\n",
-      "Neue Adresse:[redacted]e Grüße[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 15, 'end': 37, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 57, 'end': 87, 'label': 'STRASSE'}\n",
-      "{'start': 87, 'end': 105, 'label': 'POSTLEITZAHL'}\n",
-      "{'start': 265, 'end': 301, 'label': 'STRASSE'}\n",
-      "{'start': 308, 'end': 322, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 89.txt ===\n",
-      "Rechnungüberprüfung vom 21.7.2023\n",
-      "Im Anhang finden sie den Überweisungsbeleg\n",
-      "Danke[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 82, 'end': 101, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 177.txt ===\n",
-      "Zähler Wechselprotokoll.\n",
-      "Vertragsnummer:[redacted]hold Baum\n",
-      "05.11.1991\n",
-      "Schaa[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 40, 'end': 55, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 81, 'end': 105, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 163.txt ===\n",
-      "Hiermit sende ich ihnen die Abwendungsvereinbarung .\n",
-      "Bitte um Bestätigung.\n",
-      "Mit freundlichen Grüßen\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "\n",
-      "=== 162.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      " \n",
-      "nachdem eine schriftliche Anfrage über das Kundenportal vom 23.07.2023 bis\n",
-      "heute unbeantwortet geblieben ist und ich telefonisch zwei Mal regelrecht\n",
-      "abgewimmelt worden bin, stelle ich meine Frage erneut auf diesem Wege und\n",
-      "hoffe auf eine Antwort.\n",
-      "In den Medien wurde angepriesen, dass E.on zum 01.09.2023 die Strompreise\n",
-      "für ca. 14 Millionen Haushalte senkt.\n",
-      "Mehrere Bekannte in meinem Umfeld haben im Juli entsprechende\n",
-      "Ankündigungsschreiben bekommen.\n",
-      "Aus Gründen, d\n",
-      "Predicted PII spans:\n",
-      "{'start': 1682, 'end': 1693, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 88.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "hiermit widerrufe ich den von mir abgeschlossenen Stromvertrag mit E.ON Energie.\n",
-      "1.) Angaben zum Vertragspartner\n",
-      "Otto Hartmann\n",
-      "Geb.-Datum: [redacted]example.com\n",
-      "2.) Angaben zur Verbrauchsstelle\n",
-      "Schacht Schottin GmbH & Co. KG Auftragsnummer: 7564839\n",
-      "Tarifname: E.ON ÖkoStrom Extra\n",
-      "Datum der Auftragserstellung: 21.07.2023\n",
-      "Datum der Übermittlung an E.ON Energie: 21.07.2023\n",
-      "Zählernummer: 30253\n",
-      "Adresse:[redacted] bestätigen Sie mir den Widerruf mit Antwort auf diese E-Ma\n",
-      "Predicted PII spans:\n",
-      "{'start': 170, 'end': 191, 'label': 'DATUM'}\n",
-      "{'start': 442, 'end': 479, 'label': 'STRASSE'}\n",
-      "\n",
-      "=== 176.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "Sie haben bis heute nicht auf meine E-Mail vom 25.08.2023, 10:31, \n",
-      "geantwortet. Nach wie vor befinde ich mich nicht in der Belieferung. Ich \n",
-      "finde die Situation unsäglich und fordere Sie auf, mich unverüglich zu \n",
-      "kontaktieren.\n",
-      "Mit freundlichen Grüßen[redacted].:[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 281, 'end': 332, 'label': 'VORNAME'}\n",
-      "{'start': 334, 'end': 349, 'label': 'TELEFONNUMMER'}\n",
-      "\n",
-      "=== 63.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "ich würde gerne meine Verträge mit folgenden Vertragsnummern bündeln.\n",
-      "1.[redacted][redacted]\n",
-      "Mehrere Versuche auf der entsprechenden Internetseite sind leider schief\n",
-      "gelaufen.\n",
-      "Mit freundlichen Grüßen[redacted]. 193\n",
-      "07882[redacted][redacted]@example.org\n",
-      "Tel. 01234 55632\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 103, 'end': 116, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 116, 'end': 126, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 233, 'end': 259, 'label': 'VORNAME'}\n",
-      "{'start': 270, 'end': 282, 'label': 'WOHNORT'}\n",
-      "{'start': 282, 'end': 291, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 77.txt ===\n",
-      "Guten Tag,\n",
-      "Leider habe ich meinen Abschlag an die IBAN meines alten Vertragskontos\n",
-      "überwiesen und bitte nun, dass der gezahlte Betrag auf mein neues\n",
-      "Vertragskonto umgebucht wird.\n",
-      "Gezahlt wurde am 21.07.2023 ein Betrag in Höhe von 179,24€ an die IBAN DE33 4516 6479 4013 4466 01.\n",
-      "Mein alte Vertragsnummer lautet[redacted] meine neue Vertragsnummer ist die[redacted] bedanke mich recht herzlich.\n",
-      "Mit freundlichen Grüßen[redacted]\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 310, 'end': 327, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 361, 'end': 376, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 429, 'end': 453, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 49.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      " \n",
-      "zusätzlich zu dem Besuch des Notdienstes am 06.07 sowie meinen Anruf in dieser Woche, möchte ich Ihnen mitteilen, dass Mein Stromzähler aktuell nichts anzeigt. Ein Bild dazu anbei.\n",
-      " \n",
-      "Für meinen gewisse Zeitraum im Juli war zwischenzeitlich (Monatsmitte) etwas sichtbar.\n",
-      " \n",
-      "Ich bitte um Behebung des Problems.\n",
-      " \n",
-      "Mit freundlichen Grüße[redacted]70506/8384700\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 365, 'end': 416, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 61.txt ===\n",
-      "Vertragsnummer:[redacted]Sehr geehrte Damen und Herren,\n",
-      "anbei wie telefonisch besprochen die kWh der Trocknung in unserem Haus, mit der Bitte um eine separate Rechnung.\n",
-      "Beste Grüße Gertraude Steinberg\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 15, 'end': 26, 'label': 'VERTRAGSNUMMER'}\n",
-      "\n",
-      "=== 75.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "wie heute Morgen telefonisch angefragt, würde ich gern die Postadresse des\n",
-      "Kundenkontos meiner Eltern ändern.\n",
-      "Diese sind umgezogen und solange das Haus leer steht, kann dort keine Post\n",
-      "empfangen werden.\n",
-      "Vertragsnummer:[redacted][redacted]. 1[redacted]:[redacted]684\n",
-      "46491[redacted]nr. bleibt identisch.\n",
-      "Geburtsdatum:[redacted] gibt es auch noch einen Stromvertrag, zu welchem mir die\n",
-      "Vertragsnummer derzeit leider nicht vorliegt. Hier müsste die Post bitte\n",
-      "auch an die \n",
-      "Predicted PII spans:\n",
-      "{'start': 249, 'end': 260, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 260, 'end': 284, 'label': 'STRASSE'}\n",
-      "{'start': 287, 'end': 308, 'label': 'POSTLEITZAHL'}\n",
-      "{'start': 309, 'end': 336, 'label': 'STRASSE'}\n",
-      "{'start': 345, 'end': 361, 'label': 'WOHNORT'}\n",
-      "{'start': 396, 'end': 412, 'label': 'DATUM'}\n",
-      "\n",
-      "=== 160.txt ===\n",
-      "Sehr geehrte Damen und Herren, Ich möchte für alle Verträge Einzugsermächtigung machen wenn sie mir Unterlagen schicken würde würde mich freuen Mit freundlichen Grüßen[redacted]mer\n",
-      "Von meinem iPhone gesendet\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 167, 'end': 180, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 148.txt ===\n",
-      "Sehr geehrte Damen und Herren\n",
-      "leider wurde meine Zählernummer immer noch nicht in Ihren Unterlagen geändert. Die Zählernummer lautet bereits seit Vertragsbeginn 1ESY1162808638.\n",
-      "Mit freundlichen Grüßen[redacted].:[redacted]:[redacted] (02675) 31629\n",
-      "E-Mail:[redacted]example.net\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 200, 'end': 251, 'label': 'VORNAME'}\n",
-      "{'start': 253, 'end': 274, 'label': 'TELEFONNUMMER'}\n",
-      "{'start': 275, 'end': 298, 'label': 'TELEFONNUMMER'}\n",
-      "{'start': 320, 'end': 332, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 175.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "bitte bemerken Sie das Dokument im Anhang.\n",
-      "-- \n",
-      "Mit freundlichen Grüßen\n",
-      "das Team | rechtliche Betreuungen Drubin[redacted] Schenk\n",
-      "Rechtliche Betreuungen[redacted]. 09814526041\n",
-      "Fax[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 142, 'end': 148, 'label': 'VORNAME'}\n",
-      "{'start': 178, 'end': 218, 'label': 'STRASSE'}\n",
-      "{'start': 235, 'end': 248, 'label': 'TELEFONNUMMER'}\n",
-      "\n",
-      "=== 74.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "im Anhang finden Sie einen Screenshot mit den Umsatzdetails zu meiner getätigten Zahlung am 21.8.2023. Meine fällige Abschlagszahlung vom 18. August 2023 wird immernoch als offen dargestellt und wurde inzwischen von Ihnen gemahnt.\n",
-      "Meine Vertragsnummer lautet[redacted] Zählernummer lautet 861546-572484\n",
-      "Mit freundlichen Grüßen,\n",
-      "Isabell Binner\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 289, 'end': 305, 'label': 'VERTRAGSNUMMER'}\n",
-      "\n",
-      "=== 60.txt ===\n",
-      "Sehr geehrtes E.ON Team,\n",
-      "ich habe heute ein Schreiben aus Ihrem Hause erhalten, in dem Sie auf\n",
-      "Rabattmöglichkeiten hinweisen, wenn man sowohl Gas- als auch\n",
-      "Stromliefervertrag bei E.ON hat.\n",
-      "Das würde mich interessieren.\n",
-      "Allerdings habe ich eine Photovoltaikanlage auf dem Dach uns speise\n",
-      "Strom ins öffentliche Netz.\n",
-      "Wäre E.ON dann auch mein Ansprechpartner für die Strom-Vergütung?\n",
-      "Freundliche Grüße,[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 399, 'end': 470, 'label': 'STRASSE'}\n",
-      "\n",
-      "=== 48.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "wie mit einer Ihrer Mitarbeiterinnen besprochen, wollte sich diese\n",
-      "bezüglich meiner Kündigung gestern telefonisch bei mir melden. Leider war\n",
-      "dies nicht der Fall.\n",
-      "Ich würde Sie höflichst bitten meinen Vertrag zu kündigen! Ich bitte um\n",
-      "kurze Rückmeldung.\n",
-      "Mit sonnigen Grüßen\n",
-      "Dieter Ortmann\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "\n",
-      "=== 64.txt ===\n",
-      "[redacted] den 26.8.2023[redacted]\n",
-      "22085 Ebern\n",
-      "*Kunden-Nr.:[redacted]Verbrauchsstelle:[redacted][redacted]\n",
-      "*Zähler: 970220-592573*\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "hiermit *widerrufe* ich den von mir geschlossenen Vertrag über die \n",
-      "Stromlieferung von Matthäi Komfort Extra Öko.\n",
-      "Widerruf gemäß Formular anbei.\n",
-      " [redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 0, 'end': 25, 'label': 'VORNAME'}\n",
-      "{'start': 39, 'end': 100, 'label': 'STRASSE'}\n",
-      "{'start': 125, 'end': 138, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 155, 'end': 178, 'label': 'STRASSE'}\n",
-      "{'start': 178, 'end': 191, 'label': 'POSTLEITZAHL'}\n",
-      "{'start': 393, 'end': 413, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 70.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      " \n",
-      "ich verstehe Ihr Schreiben leider nicht.\n",
-      " \n",
-      "Der genannte Vertrag ist seit 09/2022 beendet. In diesem Vertrag handelte es\n",
-      "sich um den Allgemeinstromzähler vom[redacted]. Dieser Zähler\n",
-      "hat nun die Vertragsnummer[redacted] freundlichen Grüßen\n",
-      " \n",
-      "Friedhelm Schacht\n",
-      " [redacted]0927999263[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 189, 'end': 211, 'label': 'STRASSE'}\n",
-      "{'start': 253, 'end': 272, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 314, 'end': 347, 'label': 'STRASSE'}\n",
-      "{'start': 357, 'end': 375, 'label': 'TELEFONNUMMER'}\n",
-      "\n",
-      "=== 58.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "im Auftrag meines Sohnes Kurt[redacted] ich um die Erklärung des Postens Soforthilfe Dezember. Ich hatte bereits einige Male angerufen mit der Bitte, mir den Betrag aufzuschlüsseln. Leider konnten mir Ihre Mitarbeiter nur die Berechnungsgrundlagen nennen, aber nicht die einzelnen Faktoren (Beträge). Laut Verbraucherzentrale kann man sich den Betrag ausrechnen lassen. Daraufhin ergab sich eine Erstattung von 150,46 € statt 135,34 €.\n",
-      "Mit freundlichen Grüßen\n",
-      "Kurt[reda\n",
-      "Predicted PII spans:\n",
-      "{'start': 60, 'end': 83, 'label': 'NACHNAME'}\n",
-      "{'start': 508, 'end': 526, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 159.txt ===\n",
-      "Vertragsnummer[redacted]Sehr geehrte Damen und Herren,\n",
-      "Mit diesem Schreiben möchte ich Sie über meine Namensänderung aufgrund meiner Hochzeit am 14.4.23 informieren.\n",
-      "Ab sofort heiße ich mit Nachnamen[redacted] Bitte ändern Sie Ihre Datenbestände entsprechend.\n",
-      "Eine Bestätigung der Namensänderung finden Sie im Anhang.\n",
-      "Mit freundlichen Grüßen[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 14, 'end': 25, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 200, 'end': 215, 'label': 'VORNAME'}\n",
-      "{'start': 347, 'end': 362, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 165.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "mit Mail vom 16.02.2023 hatte ich bezüglich der neuen Preise ab 01. März 2023 hatte ich ihnen mitgeteilt, dass ich als langjähriges Mitglied des Landwirtvereins[redacted]en Vorteilsangebote annehme. Im Rahmen der Energieversorgung bestehen hier entsprechende Verträge.\n",
-      "Ich bitte um Mitteilung, ob bei dem neuen Preis zum 01. März 2023 dies berücksichtigt wurde. Sofern nicht, bitte ich um Aktualisierung des neuen Preises.\n",
-      "Mit freundlichen Grüßen[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 191, 'end': 209, 'label': 'WOHNORT'}\n",
-      "{'start': 485, 'end': 510, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 171.txt ===\n",
-      "Sehr geehrte Inergieversorger!\n",
-      "Es ist nicht akzeptabel das mein Zugang nicht funktioniert ,ich bitte Sie dieses zeitnah bazuändern!!!\n",
-      "Von meinem/meiner Galaxy gesendet\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "\n",
-      "=== 170.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      " \n",
-      "der angefügte Vertrag ist in „mein eon“ nicht angelegt. Ich bitte hier\n",
-      "dringend um Korrektur, damit ich \n",
-      "in beiden Vertragskonten die Zahlungsart auf Lastschriftverfahren umstellen\n",
-      "kann.\n",
-      " \n",
-      "Mit besten Grüßen\n",
-      " [redacted] und Objektbetreuung[redacted][redacted].:[redacted]:[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 241, 'end': 267, 'label': 'VORNAME'}\n",
-      "{'start': 287, 'end': 303, 'label': 'STRASSE'}\n",
-      "{'start': 303, 'end': 321, 'label': 'POSTLEITZAHL'}\n",
-      "{'start': 323, 'end': 348, 'label': 'TELEFONNUMMER'}\n",
-      "{'start': 349, 'end': 365, 'label': 'TELEFONNUMMER'}\n",
-      "\n",
-      "=== 164.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "ich bitte Sie für meine neue Mietswohnung so schnell wie möglich den Strom freizuschalten und mir Vertragsunterlagen zuzuschicken.\n",
-      "Anschrift der Wohnung:[redacted]ählernummer: 320206623943\n",
-      "Mit freundlichen Grüßen[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 184, 'end': 224, 'label': 'STRASSE'}\n",
-      "{'start': 273, 'end': 312, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 158.txt ===\n",
-      "Bitte um Korrektur von Schlussrechnung\n",
-      "Siehe anhang\n",
-      "Grüß[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 56, 'end': 75, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 59.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "um unsere Abrechnung erstellen zu können benötigen wir DRINGEND die Zischenabrechnung Gas zum 31.12.2022 inkl. Gas Soforthilfe etc.\n",
-      "Der Zählerstand zum 31.12.2023 war 24156, Vertragsnummer[redacted][redacted][redacted] senden Sie uns diese Zwischenabrechnung schnellstmöglich zu, gerne auch vorab über E-Mail.\n",
-      "Viele Grüße,\n",
-      "Carlo Becker\n",
-      "Faust UG - Carstenstr.[redacted]-[redacted][redacted]- Mobil[redacted]example.com\n",
-      "Registergericht: [redacted]RB 2095\n",
-      "Geschäftsführer:\n",
-      "Predicted PII spans:\n",
-      "{'start': 219, 'end': 230, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 230, 'end': 258, 'label': 'STRASSE'}\n",
-      "{'start': 258, 'end': 279, 'label': 'POSTLEITZAHL'}\n",
-      "{'start': 419, 'end': 422, 'label': 'HAUSNUMMER'}\n",
-      "{'start': 423, 'end': 446, 'label': 'POSTLEITZAHL'}\n",
-      "{'start': 446, 'end': 463, 'label': 'TELEFONNUMMER'}\n",
-      "{'start': 470, 'end': 506, 'label': 'TELEFONNUMMER'}\n",
-      "{'start': 535, 'end': 545, 'label': 'WOHNORT'}\n",
-      "{'start': 569, 'end': 589, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 71.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "Ich habe für meinen Stromvertrag die Überweisung des Abschlags aus Versehen auf das falsche Konto getätigt.\n",
-      "Das Konto, an welches ich überwiesen hatte, hat die IBAN DE60 9436 5282 2507 8700 65. Auf dieses Konto sollte ich bei meinem letzten Betrag bei der Fliegner Radisch GmbH überweisen, jedoch hat sich die IBAN mit dem Vetragswechsel geändert und ich habe das nicht mitbekommen, da der Brief zu neuen Stromvertrag von der Post nicht zugestellt wurde.\n",
-      "Im Anhang find\n",
-      "Predicted PII spans:\n",
-      "{'start': 590, 'end': 604, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 65.txt ===\n",
-      "Betreuungsbüro \"Schmidtke KG\" L. Jäntsch\n",
-      "_______________________________________\n",
-      "24.08.2023\n",
-      "Betreuungssache * Herr[redacted][redacted] 113 769\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "Ihr Schreiben vom 17.08.2023 kann diesseits nicht nachvollzogen werden.\n",
-      "Zum Vertragskonto[redacted] ich mit Schreiben vom 10.08.2023 darüber informiert, dass noch ein Guthaben von 132,92 € vorhanden ist. Dieses bitte ich auf obiges Vertragskonto um zu buchen und mich entsprechend darüber zu informieren.\n",
-      "Vielen Dank im Voraus\n",
-      "Predicted PII spans:\n",
-      "{'start': 114, 'end': 129, 'label': 'NACHNAME'}\n",
-      "{'start': 129, 'end': 144, 'label': 'DATUM'}\n",
-      "{'start': 273, 'end': 295, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 550, 'end': 559, 'label': 'VORNAME'}\n",
-      "{'start': 594, 'end': 603, 'label': 'VORNAME'}\n",
-      "{'start': 608, 'end': 643, 'label': 'STRASSE'}\n",
-      "{'start': 645, 'end': 666, 'label': 'TELEFONNUMMER'}\n",
-      "{'start': 667, 'end': 696, 'label': 'TELEFONNUMMER'}\n",
-      "\n",
-      "=== 73.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      " \n",
-      "ich fordere Sie nochmals auf den Vertragspartner gem. meinem beigefügtem\n",
-      "Schreiben vom 23.08.2023 zu korrigieren und mir dieses schriftlich zu\n",
-      "bestätigen.\n",
-      " \n",
-      "Der Rechnungsempfänger für die Verbrauchsstelle muss zwingend\n",
-      "„Höfig Scheuermann GmbH“ lauten, damit wir die offenen Posten aus\n",
-      "beigefügter Mahnung begleichen können.\n",
-      " \n",
-      "Mit freundlichen Grüßen \n",
-      " \n",
-      "Inge Beer\n",
-      "- Vorstand -\n",
-      " \n",
-      " \n",
-      "Höfig Scheuermann GmbH[redacted]\n",
-      "46156[redacted]:[redacted]-Mail: <mailto:[redacted]exa\n",
-      "Predicted PII spans:\n",
-      "{'start': 435, 'end': 453, 'label': 'STRASSE'}\n",
-      "{'start': 459, 'end': 473, 'label': 'WOHNORT'}\n",
-      "{'start': 474, 'end': 496, 'label': 'TELEFONNUMMER'}\n",
-      "{'start': 511, 'end': 530, 'label': 'NACHNAME'}\n",
-      "{'start': 543, 'end': 562, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 67.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "ich bitte Sie mein Kundenkonto samt aller zu meiner Person gespeicherten Daten zu löschen. \n",
-      "Andre Sauer[redacted].[redacted]seidel@example.com\n",
-      "Vielen Dank und liebe Grüße [redacted]\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 134, 'end': 142, 'label': 'STRASSE'}\n",
-      "{'start': 143, 'end': 163, 'label': 'POSTLEITZAHL'}\n",
-      "{'start': 210, 'end': 222, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 9.txt ===\n",
-      "[redacted]:[redacted]ähler: 486498046387\n",
-      "Produktwechsel\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "anbei das Formular unterschrieben zurück.\n",
-      "Bitte um Kenntnisnahme.\n",
-      "Mit freundlichen Grüßen\n",
-      "Gert[redacted] [redacted] Nachricht wurde von meinem Android Mobiltelefon mit [WEB.DE][1] Mail gesendet.\n",
-      "[1]: http://WEB.DE\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 20, 'end': 50, 'label': 'VORNAME'}\n",
-      "{'start': 210, 'end': 215, 'label': 'VORNAME'}\n",
-      "{'start': 216, 'end': 239, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 172.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "Auf Grund eines Umzuges, und eines Strom Wechsels in den Öko Strom bei Eon.\n",
-      "Möchte ich rückwirkend zum 31.07.2023 meinen Vertrag bei Eon Kündigen. Wie\n",
-      "telefonisch vereinbart, schicke ich Ihnen eine Email mit einem\n",
-      "Sonderkündigungsrecht.\n",
-      "Meine Vertragsnummer wie folgt: das ist die alte Vertragsnummer[redacted]Meine neue Adresse:[redacted]\n",
-      "Bei Rückfragen[redacted]fG Alfredo Schacht\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 331, 'end': 342, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 361, 'end': 413, 'label': 'STRASSE'}\n",
-      "{'start': 428, 'end': 447, 'label': 'TELEFONNUMMER'}\n",
-      "\n",
-      "=== 98.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "anbei die Kündigungsbestätigung meines bisherigen Versorgers.\n",
-      " \n",
-      "Mit freundlichem Gruß\n",
-      " \n",
-      "Josef[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 124, 'end': 132, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 166.txt ===\n",
-      "Kundenummer :[redacted]Sehr geehrte Damen und Herren,\n",
-      "ich bitte um einen günstigeren Tarif. Ich bin schon seit einigen Jahren\n",
-      "Kunde bei Ihnen und die Strompreis Erhöhung im März ist mir zu teuer.\n",
-      "Falls Sie mir nicht entgegen kommen können, werde ich leider kündigen\n",
-      "müssen.\n",
-      "Ich bedanke mich im Voraus.\n",
-      "Telefonisch bin ich unter folgender Rufnummer erreichbar : 09926 90657\n",
-      "Mit freundlichen Grüßen\n",
-      "Holger Speer\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 13, 'end': 24, 'label': 'VERTRAGSNUMMER'}\n",
-      "\n",
-      "=== 167.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "bitte den Termin für den Abschlag ändern; von Mitte des Monats zu Anfang des Monats.\n",
-      "Meine Daten:\n",
-      "Vor-, Nachname:[redacted]sdatum:[redacted]adresse:[redacted]ählernummer:[redacted]nummer:[redacted] freundlichen Grüßen\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 144, 'end': 163, 'label': 'VORNAME'}\n",
-      "{'start': 170, 'end': 188, 'label': 'DATUM'}\n",
-      "{'start': 196, 'end': 226, 'label': 'STRASSE'}\n",
-      "{'start': 238, 'end': 256, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 263, 'end': 277, 'label': 'VERTRAGSNUMMER'}\n",
-      "\n",
-      "=== 173.txt ===\n",
-      "An das Serviceteam von Eon, \n",
-      "im September 2023 habe ich am[redacted] Abschlag überwiesen und am 26.9 haben sie nochmal den Abschlag für September eingezogen, so dass ich jetzt doppelt bezahlt habe für September.\n",
-      "Erstatten sie mir unverzüglich die 99,96 Euro auf mein Konto bei der Striebitz Christoph AG: DE79170269554043121865\n",
-      "Striebitz Reichmann AG & Co. KG Kundennummer:[redacted] freundlichen Grüßen \n",
-      "Dr.[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 58, 'end': 66, 'label': 'HAUSNUMMER'}\n",
-      "{'start': 371, 'end': 395, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 420, 'end': 436, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 8.txt ===\n",
-      "Sehr geehrte Damen und Herren, \n",
-      " \n",
-      "vielen Dank für die Erstellung der Rechnung. Leider ist mir aber aufgefallen,\n",
-      "dass bei den Rechnungen für die Vertragskonten[redacted][redacted]weils\n",
-      "der Eon plus Rabatt nicht gewährt wurde. Aus diesem Grund bitte ich noch um\n",
-      "eine Stellungnahme wenn möglich schriftlich bzw. einen Rückruf von Frau[redacted] eine Korrektur der beiden Rechnungen. \n",
-      " \n",
-      "Mit freundlichen Grüßen \n",
-      "Natalia Lange\n",
-      "Predicted PII spans:\n",
-      "{'start': 158, 'end': 172, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 172, 'end': 185, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 338, 'end': 356, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 66.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "bitte bündeln sie nachfolgende Verträge unter dem Bündelcode[redacted]träge: 407 776 915\n",
-      "405 804 183\n",
-      "403 903 357\n",
-      "403 205 774\n",
-      "403 344 921\n",
-      "Vielen Dank.\n",
-      "Mfg Traute Walter\n",
-      "Diese Nachricht wurde von meinem Android Mobiltelefon mit [WEB.DE][1] Mail gesendet.\n",
-      "[1]: http://WEB.DE\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 91, 'end': 106, 'label': 'VERTRAGSNUMMER'}\n",
-      "\n",
-      "=== 57.txt ===\n",
-      "Sehr geehrte(-r) Sachbearbeiter(-in) \n",
-      " \n",
-      " \n",
-      "zum folgenden Vertragskonto wurde über Mein E.ON - Kontakt am 18.08.2023 folgende Kundenanfrage zum Thema \"\"Sonstiges\"\" abgesendet. Bitte um Bearbeitung! \n",
-      " \n",
-      "ALLE DATEN AUF EINEN BLICK: \n",
-      " \n",
-      " \n",
-      "Geschäftspartner: 0101833271 \n",
-      "Vertragskonto:[redacted]elefonnummer für Rückfragen: \n",
-      "Nachricht/Anfrage:  \n",
-      "„VERTRAGS NR.:[redacted]Ihr Schreiben vom 15 August 2023 wg. E-Mail-Adresse\" “ \n",
-      " \n",
-      " \n",
-      " \n",
-      "Freundliche Grüße \n",
-      "Ihr E.ON Kundenservice \n",
-      " \n",
-      "www.eon.de \n",
-      " \n",
-      "E.ON Deutschland G\n",
-      "Predicted PII spans:\n",
-      "{'start': 276, 'end': 292, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 357, 'end': 371, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 584, 'end': 604, 'label': 'VORNAME'}\n",
-      "{'start': 641, 'end': 652, 'label': 'NACHNAME'}\n",
-      "{'start': 780, 'end': 798, 'label': 'STRASSE'}\n",
-      "{'start': 798, 'end': 834, 'label': 'POSTLEITZAHL'}\n",
-      "\n",
-      "=== 5.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "mit dieser E-Mail sende ich Ihnen die Daten und Papiere zu um den\n",
-      "Stromzähler zu entsperren.\n",
-      "Zählernummer: 1LOG0065054693\n",
-      "Handynummer: 015201837094\n",
-      "Vertragsnummer:[redacted] freundlichen Grüßen\n",
-      "Veronika Walter\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 194, 'end': 208, 'label': 'VERTRAGSNUMMER'}\n",
-      "\n",
-      "=== 43.txt ===\n",
-      "Sehr geehrte Damen & Herren,\n",
-      "anbei der Beleg ohne Geld Eingang bei mir bzw. genauer gesagt zuerst war Geld eingegangen was wieder zurücküberwiesen wurde weil der Vertrag eigentlich nicht zu Ende war\n",
-      "aber nun habe ich einen neue Vertragsnr. und deshalb bitte um Überweisung meines Guthabens.\n",
-      "Hering\n",
-      "Eduard Thies[redacted][redacted]example.com\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 310, 'end': 328, 'label': 'TELEFONNUMMER'}\n",
-      "{'start': 328, 'end': 337, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 156.txt ===\n",
-      "Guten Tag,Vertragsnummer:[redacted][redacted][redacted][redacted] Mein Anliegen ist, da ich bis ende Oktober selten zuhause bin und kaum Strom verbrauche bitte ich ein neuen Abschlag von maximal von 20 Euro. Habe von 24.07 bis 16.08 23 gerade mal ein Verbrauch von:19 kw gehabt. MFG [redacted] ([redacted]\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 25, 'end': 35, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 35, 'end': 55, 'label': 'STRASSE'}\n",
-      "{'start': 55, 'end': 65, 'label': 'STRASSE'}\n",
-      "{'start': 65, 'end': 82, 'label': 'POSTLEITZAHL'}\n",
-      "{'start': 300, 'end': 313, 'label': 'VORNAME'}\n",
-      "{'start': 315, 'end': 334, 'label': 'TELEFONNUMMER'}\n",
-      "\n",
-      "=== 142.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "in der Anlage befindet sich die Vollmacht meiner Mutter.\n",
-      "Bitte fügen Sie den Vertrag[redacted] Mein E.ON von Bertram Steinberg-Wende \n",
-      "mit dem Vertrag[redacted].\n",
-      "-- \n",
-      "Mit freundlichen Grüssen\n",
-      "Bert[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 115, 'end': 129, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 184, 'end': 200, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 235, 'end': 255, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 94.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "ich bitte Sie für obiges Vertragskonto den monatlichen Abschlag auf 15,00 € zu reduzieren.\n",
-      "Meine Eltern sind ausgezogen. Das Haus steht leer.\n",
-      "Freundliche Grüße[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 190, 'end': 274, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 80.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "Ich kann mich nicht in mein Online Portal einloggen und bekomme hier immer\n",
-      "folgenden Fehler (siehe Anhang). Können sie bitte meinen online Zugang\n",
-      "freischalten? Danke\n",
-      "Mit freundlichen Grüßen[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 220, 'end': 240, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 81.txt ===\n",
-      "Betreff: Fristlose Kündigung meines Stromvertrags\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "ich,[redacted] möchte hiermit meinen Stromvertrag mit Ihnen fristlos\n",
-      "kündigen. Die relevanten Vertragsdaten lauten wie folgt:\n",
-      "Vertragskonto:[redacted]ählernummer: 1ISK0059213705\n",
-      "Der Grund für diese fristlose Kündigung sind unzumutbare Vertragsänderungen,\n",
-      "die ohne meine Zustimmung vorgenommen wurden und sich erheblich nachteilig\n",
-      "auf meine Interessen auswirken.\n",
-      "Wiederholte, nicht genehmigte Abschlagsänderungen ihrerse\n",
-      "Predicted PII spans:\n",
-      "{'start': 85, 'end': 112, 'label': 'VORNAME'}\n",
-      "{'start': 238, 'end': 250, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 1373, 'end': 1394, 'label': 'VORNAME'}\n",
-      "{'start': 1394, 'end': 1442, 'label': 'STRASSE'}\n",
-      "{'start': 1442, 'end': 1465, 'label': 'TELEFONNUMMER'}\n",
-      "\n",
-      "=== 143.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "in der Anlage sende ich Ihnen meine Abwendungsvereinbarung.\n",
-      "Mit freundlichen Grüßen\n",
-      "Agatha[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 121, 'end': 137, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 157.txt ===\n",
-      "Hallo,\n",
-      "Bitte keine Werbung an[redacted]example.net oder[redacted]schicken\n",
-      "Danke\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 29, 'end': 47, 'label': 'NACHNAME'}\n",
-      "{'start': 63, 'end': 84, 'label': 'TELEFONNUMMER'}\n",
-      "\n",
-      "=== 42.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "nach Tarifwechsel Strom sehe ich meinen neuen Vertrag nicht mehr im Online Portal. Ich bitte, den Vertrag hinzufügen:\n",
-      "Vertragskonto: Nerger Grauel[redacted]ählernummer:[redacted]en Dank!\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 177, 'end': 187, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 199, 'end': 218, 'label': 'VERTRAGSNUMMER'}\n",
-      "\n",
-      "=== 4.txt ===\n",
-      "Vertragspartner: [redacted]konto: [redacted]nummer:[redacted]ählernummer: \t7 GMT00 984726553\n",
-      "Gewählter Tarif: \tE.ON Erdgas Öko\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "unser Gaszähler wurde abgebaut, da wir eine Wärmepumpe installiert haben\n",
-      "und kein Gasbezug mehr benötigen.\n",
-      "Das Ausbauprotokoll des Netzbetreibers füge ich der Anlage bei.\n",
-      "Der Schlußstand unserer Belieferung ist bereits im Portal eingetragen.\n",
-      "Ich bedanke mich für die Dato unproblematische Vertragsabwicklung.\n",
-      "*Mit freundlichen Grüßen[redacted\n",
-      "Predicted PII spans:\n",
-      "{'start': 17, 'end': 43, 'label': 'VORNAME'}\n",
-      "{'start': 50, 'end': 69, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 76, 'end': 88, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 518, 'end': 536, 'label': 'VORNAME'}\n",
-      "{'start': 563, 'end': 603, 'label': 'STRASSE'}\n",
-      "{'start': 612, 'end': 632, 'label': 'TELEFONNUMMER'}\n",
-      "{'start': 633, 'end': 650, 'label': 'TELEFONNUMMER'}\n",
-      "\n",
-      "=== 180.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "wir haben Probleme bei der Meldung des Zählerstandes zu o. g. Vertragskonto.\n",
-      "Am 14.8.23 haben wir für den Zähler[redacted]einen Stand von 37.102,5\n",
-      "abgelesen.\n",
-      "Sollte die Registrierung des Zählerstandes so nicht möglich sein, bitte ich\n",
-      "um Zusendung der Anforderung mit dem Gastzugangscode per Post.\n",
-      "Mit freundlichen Grüßen\n",
-      "Kä[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 143, 'end': 153, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 354, 'end': 399, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 68.txt ===\n",
-      "Liebe Grüße, ich sende Bilder als Beweis dafür, dass ich die Raten bezahlt\n",
-      "habe. Vertragsnummer[redacted]a[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 95, 'end': 116, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 117, 'end': 124, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 40.txt ===\n",
-      "Sehr geehrte Damen und Herren. Ich entschuldige mich für die entstandenen Schulden und möchte hiermit eine Abwendungsvereinbarung mit ihnen treffen.\n",
-      "Leider konnte ich die Summe nicht direkt zahlen da mir als allein Erziehender die Mittel dazu fehlen. Die erste Rate in Höhe von 35,57€ werde ich so schnell wie möglich überweisen.\n",
-      "Freundliche Grüße Stephen Beckmann\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "\n",
-      "=== 6.txt ===\n",
-      "[redacted]. [redacted].[redacted]nr[redacted]Sehr geehrtes EON Team,laut eines EON Mitarbeiters bei dem Telefongespräch gestern hätte ich für diesen August 2023 nur 110€ an Abschlagszahlung für Gas bezahlt was aber nicht stimmen kann.\n",
-      "Im Anhang befindet sich der Nachweis das meine Abschlagszahlung für Gas im August 2023 ganze 200€ betragen haben.\n",
-      "Bitte um volle Berechnung meiner Zahlung.\n",
-      "Mit freundlichen Grüßen[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 0, 'end': 25, 'label': 'VORNAME'}\n",
-      "{'start': 27, 'end': 46, 'label': 'POSTLEITZAHL'}\n",
-      "{'start': 47, 'end': 64, 'label': 'DATUM'}\n",
-      "{'start': 66, 'end': 77, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 446, 'end': 462, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 54.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      " \n",
-      "wir sind umgezogen:\n",
-      " \n",
-      "Grundstücksges. Mudering 49\n",
-      "Neue Adresse:[redacted][redacted]vorher[redacted]\n",
-      " \n",
-      "Alle anderen Daten bleiben bestehen (Bankverbindung zB)\n",
-      " \n",
-      "Mit freundlichen Grüßen\n",
-      " \n",
-      "Helge Albers\n",
-      "Buchhaltung\n",
-      " \n",
-      "Grundstücksges. Mudering 49\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 96, 'end': 112, 'label': 'STRASSE'}\n",
-      "{'start': 112, 'end': 133, 'label': 'POSTLEITZAHL'}\n",
-      "{'start': 139, 'end': 180, 'label': 'STRASSE'}\n",
-      "\n",
-      "=== 141.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "ich nehme Bezug auf die Mahnung vom 23.08.2023.\n",
-      "Bereits vor einigen Wochen habe ich über Ihr Kontaktportal eine Anfrage bezüglich der Zahlungsmöglichkeiten geschickt. Leider habe ich bis heute keine Rückmeldung erhalten.\n",
-      "Mir ist es nicht möglich den geforderten Betrag auf einmal zu leisten, da ich bereits mit den aktuellen Abschlagszahlungen für das Gas an der Grenze meiner Möglichkeiten bin. Aus diesem Grund bitte ich um eine Stundung. Zur Zeit wäre es mir möglich\n",
-      "Predicted PII spans:\n",
-      "\n",
-      "=== 155.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "ich habe aufgrund des Todes meines Vaters den Stromvertrag von ihm übernommen. Diesen habe ich am 21.August 2023 gewechselt. Die neue Vertragsnummer ist[redacted]\n",
-      "Die Zählernummer allerdings ist gleich geblieben 1APADA91675322.\n",
-      "Wenn ich mich jetzt in mein Vertragskonto online einloggen möchte, wird mir nur der alte Vertrag angezeigt. Dort steht auch, dass dieser alte Vertrag deaktiviert wurde. Den neuen Vertrag kann ich aber leider online nicht sehen.\n",
-      "Wie gehe ich \n",
-      "Predicted PII spans:\n",
-      "{'start': 183, 'end': 194, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 595, 'end': 624, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 83.txt ===\n",
-      "Guten Abend, \n",
-      "leider kann ich mich auf ihrem Portal nicht registrieren, da der oben genannte Vertrag mit falscher E-Mail versehen wurde. \n",
-      "Bitte auf die richtige E-Mail-Adresse korrigieren. \n",
-      "Die lautet: aldoflantz@example.net\n",
-      "Mit freundlichen Grüßen [redacted] meinem iPad gesendet\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 249, 'end': 282, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 169.txt ===\n",
-      "Hallo Zusammen,\n",
-      "da ich ich für den Vertrag mit der Nummer[redacted] die falsche Zählernummer angegeben habe, anbei ein Bild von der richtigen. - 110140311\n",
-      "Es grüßt Sie freundlich \n",
-      "Hilde Reising\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 57, 'end': 72, 'label': 'VERTRAGSNUMMER'}\n",
-      "\n",
-      "=== 97.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "Bezug nehmend auf Ihr Schreiben vom 11.08.2023 erhalten Sie die\n",
-      "Bescheinigung der Firma über den Stromverbrauch.\n",
-      "Freundliche Grüße\n",
-      "Sigmund Schmidtke\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "\n",
-      "=== 168.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "Bitte ändern Sie meine Fälligkeiten ab. Ab jetzt bitte ich Sie immer die Abschläge zum Ende des Monats also zum 30ten einzuziehen.\n",
-      "MFG\n",
-      "Schmiedt\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "\n",
-      "=== 96.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "wir sind bereits online registriert und möchten zu bestehenden Verträgen[redacted][redacted] 404[redacted] folgende Verträge hinzufügen um online\n",
-      "Zugriff darauf zu haben:[redacted]liche Grüße\n",
-      "Uta Aumann\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 103, 'end': 115, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 115, 'end': 126, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 130, 'end': 137, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 201, 'end': 231, 'label': 'VERTRAGSNUMMER'}\n",
-      "\n",
-      "=== 82.txt ===\n",
-      "bitte rufen Sie mich an wegen Vertragsbündelung.\n",
-      "Vertrag[redacted] Vertrag[redacted]en Dank im voraus.[redacted] Hermann Etzler\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 56, 'end': 70, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 78, 'end': 93, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 111, 'end': 122, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 140.txt ===\n",
-      "Sehr geehrte Damen und Herren, [redacted] finden ist die Vereinbarung. Vielen Dank im voraus für die Bearbeitung. \n",
-      "Mit freundlichen Grüßen \n",
-      "Ing.[redacted]äkel Ing.[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 31, 'end': 45, 'label': 'STRASSE'}\n",
-      "{'start': 148, 'end': 158, 'label': 'VORNAME'}\n",
-      "{'start': 167, 'end': 182, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 7.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "wann bekomme ich meine Abrechnung? Der Vertrag ist seit Januar 23 beendet\n",
-      "Meine Daten:\n",
-      "Vor-, Nachname:[redacted]sdatum:[redacted]adresse:[redacted]ählernummer:[redacted]nummer:[redacted] freundlichen Grüßen\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 133, 'end': 162, 'label': 'VORNAME'}\n",
-      "{'start': 169, 'end': 187, 'label': 'DATUM'}\n",
-      "{'start': 195, 'end': 210, 'label': 'STRASSE'}\n",
-      "{'start': 222, 'end': 235, 'label': 'POSTLEITZAHL'}\n",
-      "{'start': 242, 'end': 256, 'label': 'VERTRAGSNUMMER'}\n",
-      "\n",
-      "=== 55.txt ===\n",
-      "Vertragsnummer[redacted]Steffi[redacted]grund des Wasserschadens vergangenen Jahres,bitten wir dies für das kommende Jahr zu berücksichtigen\n",
-      "Im Anhang die Stromverbrauchsmitteilung Trocknungsmaßnahme\n",
-      "Diese Nachricht wurde von meinem Android Mobiltelefon mit GMX Mail gesendet.\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 14, 'end': 25, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 31, 'end': 49, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 41.txt ===\n",
-      "Hiermit schicke ich die Unterlagen für den Zähler von[redacted],[redacted]\n",
-      "Die Kundennummer[redacted]gehört zur Zählernummer 1APA018847123 .\n",
-      "Anbei schicke ich die Unterlagen für diesen Zähler.\n",
-      "Da ein Fehler aufgetreten ist, möchten Sie die Unterlagen von Familie\n",
-      " Hans-Werner/Miriam Schuster[redacted]sehen. Wir haben die Erlaubnis von Familie Schuster erhalten, für die\n",
-      "Prüfung des Zähler mit der Nummer 1APA0189762453 .\n",
-      "Vielen Dank für die schnelle Klärung Familie[redacted]\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 53, 'end': 66, 'label': 'VORNAME'}\n",
-      "{'start': 67, 'end': 105, 'label': 'STRASSE'}\n",
-      "{'start': 122, 'end': 133, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 323, 'end': 356, 'label': 'STRASSE'}\n",
-      "{'start': 521, 'end': 527, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 69.txt ===\n",
-      "Sehr geehrte Damen und Herren hiermit nochmals Bestätigung Abschlag August bezahlt wurde Mit freundlichen Grüßen[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 112, 'end': 118, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 45.txt ===\n",
-      "Sehr geehrter Herr[redacted]\n",
-      "anbei, wie eben besprochen, die Kontoauszüge, mit den von uns geleisteten\n",
-      "Abschlägen. Ich bin mal bis zum Februar zurückgegangen.\n",
-      "Mit freundlichen Grüßen\n",
-      "Gerda[redacted]\n",
-      "44082[redacted][redacted][redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 18, 'end': 27, 'label': 'NACHNAME'}\n",
-      "{'start': 187, 'end': 222, 'label': 'STRASSE'}\n",
-      "{'start': 228, 'end': 241, 'label': 'WOHNORT'}\n",
-      "{'start': 241, 'end': 268, 'label': 'TELEFONNUMMER'}\n",
-      "{'start': 268, 'end': 289, 'label': 'TELEFONNUMMER'}\n",
-      "\n",
-      "=== 3.txt ===\n",
-      "Guten Tag,\n",
-      "hiermit schicke ich Ihnen die noch fehlenden Angaben:\n",
-      "Übergabedatum: 01.08.2023\n",
-      "Mieter: Isabelle Eckbauer[redacted][redacted]\n",
-      "Vermieter: Dr.[redacted]n\n",
-      "Zählernummer: 1ISK0070547123\n",
-      "Zählerstand: 0022386623\n",
-      "Vielen Dank[redacted]bauer\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 116, 'end': 149, 'label': 'TELEFONNUMMER'}\n",
-      "{'start': 149, 'end': 172, 'label': 'NACHNAME'}\n",
-      "{'start': 187, 'end': 203, 'label': 'VORNAME'}\n",
-      "{'start': 269, 'end': 282, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 79.txt ===\n",
-      "Sehr geehrte Damen und Herren, \n",
-      "hiermit sende ich Ihnen, den Kontoauszug für Juni 2023. \n",
-      "Mit freundlichen Grüßen \n",
-      "Janin Fechner MBA.\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "\n",
-      "=== 178.txt ===\n",
-      "Hiermit übersende ich Ihnen den unterschriebenen Stromvertrag.\n",
-      "Mit freundlichem Gruß[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 84, 'end': 100, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 86.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "hiermit wird der folgende Vertrag fristgerecht widerrufen.\n",
-      "Lieferstelle:[redacted]ählernummer: 1DZG0060736543\n",
-      "Vertragspartner:[redacted] bestätigen Sie diesen Widerruf.\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 103, 'end': 159, 'label': 'STRASSE'}\n",
-      "{'start': 203, 'end': 263, 'label': 'STRASSE'}\n",
-      "\n",
-      "=== 151.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "bitte senden Sie mir meinen aktuellen Arbeits- und Grundpreis brutto per E-Mail zu.\n",
-      "Steht aktuell eine Preisanpassung an, falls ja teilen Sie mir bitte das Datum der Erhöhung und die neuen Preiskonditionen mit, alternativ lassen Sie mir bitte das Preisanpassungsschreiben per E-Mail zukommen.\n",
-      " \n",
-      "Vielen Dank!\n",
-      "Mit freundlichen Grüßen[redacted]berg[redacted]zähler 1ESY1166483729\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 362, 'end': 373, 'label': 'VORNAME'}\n",
-      "{'start': 377, 'end': 427, 'label': 'STRASSE'}\n",
-      "\n",
-      "=== 145.txt ===\n",
-      "Sehr geehrte Frau[redacted]\n",
-      "Wie bereits Telefonisch besprochen sende ich ihnen das Schreiben von\n",
-      "BonnNetz. Vielen Dank für ihre Hilfe.\n",
-      "Mit freundlichen Grüßen[redacted]tz\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 17, 'end': 31, 'label': 'NACHNAME'}\n",
-      "{'start': 162, 'end': 177, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 93.txt ===\n",
-      "Sehr geehrte Damen und Herren!\n",
-      "Wie ich Ihnen bereits telefonisch mitgeteilt habe, kann ich meinen \n",
-      "Zählerstand nicht ablesen, weil dieser gar nicht angezeigt wird. Eine \n",
-      "Betätigung der Infotaste hat auch keinerlei Reaktion des Zählers \n",
-      "hervorgerufen. Bitte teilen Sie mir mit, wie es weiter geht. Ein Foto mit \n",
-      "Zählernummer erhalten Sie im Anhang. MfG[redacted]\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 351, 'end': 375, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 87.txt ===\n",
-      "Guten Tag, ich beziehe strom von Ihnen und wohl auch von der EnBW. Mein Vermieter hat ohne Absprache mich bei der EnBW angemeldet. Ich würde gerne bei Ihnen bleiben und bitte Sie sich mit der EnBW in Verbindung zu setzen.\n",
-      "Mit freundlichen Grüßen[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 245, 'end': 282, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 78.txt ===\n",
-      "Guten Tag,\n",
-      "im Anhang ist ein aktuelles Foto vom Zählerstand.\n",
-      "Bitte um eine Anpassung Ihrer letzten Rechnung bzw Forderung und den monatlichen Abschlag, der Ihrerseits verdoppelt wurde.\n",
-      "Vertragsnummer:[redacted]liche Grüße\n",
-      "Rosemarie Niemeier\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 200, 'end': 217, 'label': 'VERTRAGSNUMMER'}\n",
-      "\n",
-      "=== 50.txt ===\n",
-      "Guten Tag,\n",
-      "Vertragskonto :[redacted]ählernummer : 1HLY0205770365\n",
-      "Anbei Kontoauszug\n",
-      "Mit freundlichen Grüßen[redacted] Nachricht wurde von meinem Android Mobiltelefon mit GMX Mail gesendet.\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 26, 'end': 38, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 108, 'end': 129, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 2.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "leider wurde mein Abschlag den ich für August überwiesen habe für den Abschlag für Juni verrechnet.\n",
-      "Wie schon mindesten 10 mal von mir berichtet, habe ich den Abschlag von148 € für Juni auf das Konto das in mein e-on angegeben ist überwiesen,DE40926301819767992111.\n",
-      "Sie müssten nur den Betrag umbuchen auf DE57671088940322928241.\n",
-      "Ich bitte Sie dies zu machen, weil ich sonst wieder eine Zahlungserinnerung für August bekomme.\n",
-      "Mit freundichen Grüssen\n",
-      "Dipl.-Ing. Leo[reda\n",
-      "Predicted PII spans:\n",
-      "{'start': 495, 'end': 508, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 44.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "leider habe ich noch immer keinen Lidlgutschein im Wert von 50€ erhalten. Aufgrund meins Stromvertrages. Der Juncken GmbH Kundenservice hat mich an Sie verwiesen.\n",
-      "Wann kann ich mit dem Erhalt rechnen Stromerstbelieferung war der 09\n",
-      "06.23.\n",
-      "Vielen Dank\n",
-      "Beste Grüße\n",
-      "Schleich\n",
-      "Diese Nachricht wurde von meinem Android Mobiltelefon mit [WEB.DE][1] Mail gesendet.\n",
-      "[1]: http://WEB.DE\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "\n",
-      "=== 0.txt ===\n",
-      "Wie angefordert der Kontoauszug. Abbuchung Euro 103,22.\n",
-      "Gesendet mit der Stiffel AG Mail App\n",
-      "<http://www.t-online.de/service/redir/emailmobilapp_ios_smartphone_footerlink.htm>\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "\n",
-      "=== 52.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "Ich bitte um Löschung sämtlicher persönlicher Daten bei Ihnen, insbesondere des MeinEON Accounts, da ich nicht mehr bei Ihnen Kunde bin.\n",
-      "Mit freundlichen Grüßen[redacted]z\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 191, 'end': 205, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 46.txt ===\n",
-      "Stromvertrag \n",
-      "Lieferstelle:[redacted]zähler 1EBZ0100763912\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "ich bin zum 01.03.2023 in die Lieferstelle eingezogen. \n",
-      "Bitte hinterlegen Sie als Grundversorger den Einzug bei sich.\n",
-      "Vielen Dank.\n",
-      "Mit freundlichen Grüßen\n",
-      "Joachim Trupp\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 27, 'end': 63, 'label': 'STRASSE'}\n",
-      "\n",
-      "=== 91.txt ===\n",
-      "Guten Tag,\n",
-      "wie gewünscht sende ich Ihnen den Auftrag noch einmal zu.\n",
-      "Der Auftrag wurde allerdings auch schon per Post am 24.07.2023 versandt.\n",
-      "Da die Auflösung des vorherigen Vertrages Ihr Verschulden ist bitte ich nun um schnellstmögliche Bearbeitung.\n",
-      "Mit freundlichem Gruß\n",
-      "Prof. Gloria[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 286, 'end': 295, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 85.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "imAnhang befinden sich 2 Bilder, die zeigen, dass die Ratenzahlung von August zweimal abgebucht wurde. Bitte überweisen Sie mir den Betrag von 90,00€ zurück auf mein Konto.\n",
-      "Mit freundlichen Grüßen[redacted] Nachricht wurde von meinem Android Mobiltelefon mit [WEB.DE][1] Mail gesendet.\n",
-      "[1]: http://WEB.DE\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 227, 'end': 254, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 153.txt ===\n",
-      "Hallo\n",
-      "Habe versucht mehrmals telefonisch mein Anliegen zu klären\n",
-      "Leider wenig Erfolg\n",
-      "Habe offene Betrag über dieses Konto\n",
-      "Möchte Sie bitten um teilzahlung bitte um Rückmeldung\n",
-      " Mfg[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 180, 'end': 187, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 147.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      " \n",
-      "ich habe meinen Stromvertrag (Vertragsnummer: 401528618) mit meinem\n",
-      "Gasvertrag (Vertragsnummer: 401528618) gebündelt. In den Rechnungen für 2023\n",
-      "erscheint dieser Vorteil „Bündelbonus“ nicht. Ich bitte Sie diesen zu\n",
-      "berücksichtigen und die Rechnungen entsprechend anzupassen.\n",
-      " \n",
-      "Bei Fragen stehe ich Ihnen sehr gerne zur Verfügung.\n",
-      " \n",
-      " \n",
-      "Mit freundlichen Grüßen[redacted][redacted].: 0930244918[redacted]example.org\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 390, 'end': 437, 'label': 'STRASSE'}\n",
-      "{'start': 437, 'end': 459, 'label': 'POSTLEITZAHL'}\n",
-      "{'start': 472, 'end': 487, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 146.txt ===\n",
-      "Sehr geehrte Damen und Herren, \n",
-      "wie besprochen sende ich Ihnen die Unterlagen zur Vertragsnummer[redacted]sowie die Angebotsnummer[redacted]. \n",
-      "Für weitere Rückfragen können Sie mich gerne per Mail erreichen.\n",
-      "Mit freundlichen Grüßen \n",
-      "Dipl.-Ing.[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 96, 'end': 109, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 253, 'end': 272, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 84.txt ===\n",
-      "Durch einen Fehler ihrerseits wird mir seit Februar 2023 kein Abschlag\n",
-      "abgebucht.Mehrere Anrufe und E-Mails werden einfach ignoriert. Bitte\n",
-      "überprüfen Sie meinen Vertrag mit der Nr.[redacted]ollte ich nach 4 Wochen nichts hören werde ich meinen Rechtschutz\n",
-      "einschalten.\n",
-      "MfG Christl Koch\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 181, 'end': 193, 'label': 'VERTRAGSNUMMER'}\n",
-      "\n",
-      "=== 90.txt ===\n",
-      "Bitte senden Sie mir den Rechnungsnachweis seit Vertragsbeginn mit den\n",
-      "entsprechenden Zählerstände.\n",
-      "Freundliche Grüße[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 117, 'end': 137, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 47.txt ===\n",
-      "Guten Tag,\n",
-      " \n",
-      "vor kurzem habe ich mich entschieden zu E.ON Strom zu wechseln.\n",
-      " \n",
-      "Leider gibt es nun bei der Regestrierung unter Punkt 2 Probleme (siehe \n",
-      "Fotos im Anhang).\n",
-      " \n",
-      "Was kann ich jetzt noch machen?\n",
-      " \n",
-      "Mit freundlichen Grüßen\n",
-      "Erich[redacted]\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 234, 'end': 286, 'label': 'STRASSE'}\n",
-      "\n",
-      "=== 1.txt ===\n",
-      "Hallo liebes Eon Team,\n",
-      "es geht um die Vertragsnummer[redacted] der Einrichtung meines neuen Vertrages wurde leider die Überweisung als\n",
-      "Zahlungsart gewählt von dem jungen Kollegen an der Wohnungstür. Ich würde\n",
-      "es gerne wieder per Lastschrift abbuchen lassen, um mir den Stress zu\n",
-      "ersparen.\n",
-      "Verbraucherstelle ist weiterhin die[redacted][redacted]\n",
-      "Gruß Berthold Huhn\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 52, 'end': 67, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 329, 'end': 345, 'label': 'STRASSE'}\n",
-      "{'start': 345, 'end': 359, 'label': 'POSTLEITZAHL'}\n",
-      "\n",
-      "=== 53.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      " \n",
-      "für ein altes Konto hatte ich die Mailanschrift[redacted]example.com\n",
-      "<mailto:[redacted].com> gewählt. Da wir umgezogen sind und das Konto\n",
-      "nicht mehr aktiv ist, habe ich diesem alten Konto eine neue Mailadresse\n",
-      "gegeben, um die vorgenannte Adresse für mein aktuelles Konto:\n",
-      " \n",
-      "E.ON KonstantStrom\n",
-      "In Belieferung\n",
-      "Jasmin Meyer[redacted]konto:[redacted]ählernummer:\n",
-      "1EFR22650578465\n",
-      " \n",
-      "benutzen möchte. Leider war hier eine Umstellung nicht möglich. Ich bitte um\n",
-      "Prüfung und M\n",
-      "Predicted PII spans:\n",
-      "{'start': 80, 'end': 88, 'label': 'EMAIL'}\n",
-      "{'start': 108, 'end': 122, 'label': 'EMAIL'}\n",
-      "{'start': 355, 'end': 407, 'label': 'STRASSE'}\n",
-      "{'start': 413, 'end': 425, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 617, 'end': 634, 'label': 'EMAIL'}\n",
-      "{'start': 654, 'end': 677, 'label': 'EMAIL'}\n",
-      "{'start': 833, 'end': 841, 'label': 'EMAIL'}\n",
-      "{'start': 861, 'end': 875, 'label': 'EMAIL'}\n",
-      "{'start': 1055, 'end': 1063, 'label': 'EMAIL'}\n",
-      "{'start': 1083, 'end': 1097, 'label': 'EMAIL'}\n",
-      "\n",
-      "=== 34.txt ===\n",
-      "#### Order \n",
-      " \n",
-      "Anliegen*: Erdgas \n",
-      " \n",
-      "Jahresverbrauch (kWh/Jahr)*: ohne Relevanz \n",
-      " \n",
-      "Nachricht: Vertragsnummer[redacted]Ihr Schreiben aus August. Ich möchte vom Bündelbonus partizipieren. Mein Bündel-Code ist 721 992 747 Ich erbitte Informationen und einen Vorschlag \n",
-      " \n",
-      "Ihr Name*: Vladimir Schleich \n",
-      " \n",
-      "Firmenname*: Vladimir Schleich \n",
-      " \n",
-      "PLZ und Ort*:[redacted]-Mail*:[redacted]example.com \n",
-      " \n",
-      " \n",
-      "Ich akzeptiere die unten genannte Einwilligungserklärung.* \n",
-      " \n",
-      ": on \n",
-      " \n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 106, 'end': 137, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 366, 'end': 390, 'label': 'POSTLEITZAHL'}\n",
-      "{'start': 397, 'end': 406, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 20.txt ===\n",
-      "Guten Tag. \n",
-      "Der nächste Abschlag ist am 31.8 fällig. \n",
-      "Habe das Ende Juli mit einem Kollegen am Call Center ausgemacht. \n",
-      "Bitte um Bearbeitung das der Betrag Ende August überwiesen wird. \n",
-      "Das Konto ist ausgeglichen. \n",
-      "Vielen Dank. \n",
-      "Mit freundlichen Grüßen \n",
-      "Herr[redacted][redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 258, 'end': 266, 'label': 'VORNAME'}\n",
-      "{'start': 266, 'end': 318, 'label': 'STRASSE'}\n",
-      "\n",
-      "=== 135.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "anbei die angeforderten Daten zum Wechsel zu EON.\n",
-      "Vertragsnummer:[redacted]gabedatum: 30.04.2023\n",
-      "Verkäufer: Hellwig GmbH & Co. KG[redacted]äufer: L[redacted]ählernummer[redacted]ählerstand 38335,6\n",
-      "Ablesedatum: 30.04.2023\n",
-      "Mit freundlichen Grüßen\n",
-      "Achim[redacted]----------------------------------------------------------------\n",
-      "Gesendet mit der Graf GmbH & Co. KG Mail App\n",
-      "<https://kommunikationsdienste.t-online.de/redirects/email_app_android_sendmail_footer>\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 96, 'end': 113, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 167, 'end': 215, 'label': 'STRASSE'}\n",
-      "{'start': 223, 'end': 276, 'label': 'VORNAME'}\n",
-      "{'start': 287, 'end': 304, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 376, 'end': 398, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 109.txt ===\n",
-      "Guten Tag liebes EON-Team,\n",
-      "die Adresse lautet:[redacted]zeichnung: Kellergeschoss\n",
-      "Bitte entnehmen Sie das aktuelle Bild des Stromzählers der Anlage.\n",
-      "Dies ist der Wert aus dem Übergabeprotokoll der Wohnung:\n",
-      "Zähler Nr. 5785.075, 1861084733875645/NZ Stand: 048960,50.\n",
-      "Vielen Dank im Voraus!\n",
-      "Ich freue mich über eine positive Rückmeldung.\n",
-      "Marion Bloch\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 46, 'end': 88, 'label': 'STRASSE'}\n",
-      "\n",
-      "=== 108.txt ===\n",
-      "Sehr geehrter EON,\n",
-      "Hiermit teile ich euch noch mal eine Kopie des Übergabeprotokolls mit zum\n",
-      "Abschließen des o.g. Stromvertrags.\n",
-      "*Vertragskonto:[redacted]Zählernummer: 1EBZ0102456941*\n",
-      "Ich bitte euch gerne um eine schnelle Bearbeitung der Unterlagen und\n",
-      "möglichst eine Rückmeldung.\n",
-      "mit den besten Grüßen\n",
-      "Jadwiga[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 144, 'end': 157, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 313, 'end': 319, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 120.txt ===\n",
-      "Sehr geehrte Damen und Herren, ich habe bereit zum 1. August den Beitrag überwiesen. Mit freundlichen Grüßen,[redacted]\n",
-      "Gesendet mit der mobilen Mail App\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 109, 'end': 117, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 134.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "wie in o.g. Telefonat besprochen, warten wir noch immer auf unsere Gasabrechnung.\n",
-      "Den Zählerstand hatte ich in besagtem Telefonat mitgeteilt: 10263 zum 24.04.2023.\n",
-      "Ich bitte um Rechnungserstellung bis spätestens 11.08.2023.\n",
-      "Vielen Dank\n",
-      "Mit freundlichen Grüßen\n",
-      "Silvia Wähner\n",
-      "Diese Nachricht wurde von meinem Android Mobiltelefon mit GMX Mail gesendet.\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "\n",
-      "=== 21.txt ===\n",
-      "Liebes Team,\n",
-      "Ich möchte gerne zwei Ladesäulen auf mein Grundstück bauen. \n",
-      "Geht dieses das unsere Gäste mit Karte zahlen? \n",
-      "Es ist für unsere \n",
-      "Pension [redacted] gehört mir.\n",
-      "Was können Sie mir anbieten, wenn ich es nur bestelle ? \n",
-      "Vielen Dank & viele Grüße \n",
-      "Alwina Häring\n",
-      "Gesendet mit der mobilen Mail App\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 149, 'end': 197, 'label': 'STRASSE'}\n",
-      "\n",
-      "=== 35.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "wie mit Ihrem Kollegen telefonisch besprochen, anbei das Fotos des Zähler von oben genanntem Vertrag.\n",
-      "Mit freundlichen Grüßen / With best regards[redacted]holz\n",
-      "Einkauf / Purchasing\n",
-      "Wende Stadelmann GmbH[redacted]:[redacted] 11\n",
-      "www.hgo-gmbh.de\n",
-      "Skype: Gerolf_Buchholz\n",
-      "Amtsgericht[redacted]RB 89781\n",
-      "Vorstand: Hanspeter Ruppert, Heinfried Fischer\n",
-      "Aufsichtsratsvorsitzende: Dr. Astrid Köhler\n",
-      "----------------------- Vertraulichkeitshinweis / Confidentiality notice ---------\n",
-      "Predicted PII spans:\n",
-      "{'start': 176, 'end': 188, 'label': 'VORNAME'}\n",
-      "{'start': 235, 'end': 284, 'label': 'STRASSE'}\n",
-      "{'start': 285, 'end': 306, 'label': 'TELEFONNUMMER'}\n",
-      "{'start': 360, 'end': 377, 'label': 'WOHNORT'}\n",
-      "\n",
-      "=== 23.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "Ich habe[redacted] Haus meines verstorbenen\n",
-      "Onkels übernommen.\n",
-      "Leider wurde damals versäumt den Namen im Vertrag zu ändern.\n",
-      "Ich bitte die Daten im Vertrag entsprechend zu ändern.[redacted].06.1980\n",
-      "Die Bankverbindung(Einziehung vom Konto meiner Schwester Katrin[redacted] kann weiter verwendet werden.\n",
-      "Mit freundlichen Grüßen[redacted] Nachricht wurde von meinem Android Mobiltelefon mit GMX Mail gesendet.\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 39, 'end': 48, 'label': 'HAUSNUMMER'}\n",
-      "{'start': 208, 'end': 235, 'label': 'VORNAME'}\n",
-      "{'start': 307, 'end': 317, 'label': 'NACHNAME'}\n",
-      "{'start': 371, 'end': 401, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 37.txt ===\n",
-      "Guten Tag,\n",
-      "im Anhang mein Stromzählerstand.\n",
-      "Ich bitte um eine kurze Rückmeldung.\n",
-      "Mfg[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 84, 'end': 93, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 122.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "die Betreuung ist nun unbefristet, ich bitte um Aktualisierung.\n",
-      " \n",
-      "Mit freundlichen Grüßen\n",
-      "Frau[redacted]:[redacted]:[redacted] E-Mail enthält vertrauliche und/oder rechtlich geschützte\n",
-      "Informationen. Wenn Sie nicht der richtige Adressat sind oder diese E-Mail\n",
-      "irrtümlich erhalten haben, informieren Sie bitte sofort den Absender und\n",
-      "vernichten Sie diese Mail. Das unerlaubte Kopieren sowie die unbefugte\n",
-      "Weitergabe dieser Mail ist nicht gestattet.\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 125, 'end': 152, 'label': 'VORNAME'}\n",
-      "{'start': 153, 'end': 174, 'label': 'TELEFONNUMMER'}\n",
-      "{'start': 175, 'end': 235, 'label': 'TELEFONNUMMER'}\n",
-      "\n",
-      "=== 123.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "wie angefordert, sende ich Ihnen die fehlenden Daten bzw. Unterlagen zu.\n",
-      "Vertragsnummer:[redacted]ngabe zum Zeitraum, in dem der Mehrverbrauch angefallen ist: 10.07.2023\n",
-      "bis 24.07.2023\n",
-      "Angabe über die Höhe des Mehrverbrauchs in Kilowattstunden: 208\n",
-      "Kilowattstunden\n",
-      "Kopie des Trocknungsprotokolls: liegt bei\n",
-      "Bei weiteren Fragen stehe ich Ihnen gerne zur Verfügung.\n",
-      "Mit freundlichen Grüßen,[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 119, 'end': 133, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 423, 'end': 444, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 36.txt ===\n",
-      "Sehr geehrte Damen und Herren, \n",
-      "Ich[redacted] Eigentümer der Immobilie an der[redacted][redacted][redacted] sie den Stromzähler mit der Zähler Nr.23976538 zu entsperren. \n",
-      "Da es für die Wohnung einen neuen Mieter gibt und dieser nicht dafür verantwortlich ist, dass der Stromzähler gesperrt ist, sondern dieses wurde von den vorherigen Mieterverschuldeten \n",
-      "Mit freundlichen Grüßen [redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 35, 'end': 54, 'label': 'VORNAME'}\n",
-      "{'start': 86, 'end': 96, 'label': 'STRASSE'}\n",
-      "{'start': 96, 'end': 102, 'label': 'HAUSNUMMER'}\n",
-      "{'start': 102, 'end': 125, 'label': 'POSTLEITZAHL'}\n",
-      "{'start': 398, 'end': 409, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 22.txt ===\n",
-      "Seit Februar haben Sie nicht eine einzige meiner Mails oder Post von meinem Anwalt beantwortet.\n",
-      "Sie haben mir Geld gestohlen und bekommen es jetzt nicht mal auf die Kette, meine Daten aus Ihrem System zu löschen. Auch dies habe ich bereits mehrfach via Portal, Mail und Telefon gefordert, da ich keinen Vertrag mehr mit Ihnen habe.\n",
-      "Zum letzten Mal: LÖSCHEN SIE ALLE MEINE DATEN AUS IHREN SYSTEMEN! Sie verstoßen damit gegen die DSGVO! Wenn Sie mir bis spätestens 11.08.23 nicht schriftlich bestätigen\n",
-      "Predicted PII spans:\n",
-      "{'start': 582, 'end': 600, 'label': 'VERTRAGSNUMMER'}\n",
-      "\n",
-      "=== 26.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "Zählerwechsel am 28.02.2023 Zähler 6446393163, Stand 159668 am 28.02.2023, neuer Zähler 1EBZ0107497634 Stand 000\n",
-      "Meine Daten:\n",
-      "Vor-, Nachname: Herr[redacted]sdatum:[redacted]adresse:[redacted][redacted]ählernummer: 6446393163\n",
-      "Kundennummer:[redacted] freundlichen Grüßen\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 177, 'end': 199, 'label': 'VORNAME'}\n",
-      "{'start': 206, 'end': 224, 'label': 'DATUM'}\n",
-      "{'start': 232, 'end': 249, 'label': 'STRASSE'}\n",
-      "{'start': 249, 'end': 268, 'label': 'POSTLEITZAHL'}\n",
-      "{'start': 305, 'end': 319, 'label': 'VERTRAGSNUMMER'}\n",
-      "\n",
-      "=== 32.txt ===\n",
-      "Guten Abend liebes Beschwerde- Team,\n",
-      "leider kann ich den beim Abschluss zugesicherten Bonus von 315€ immer noch nicht in den Dokumenten des oben genannten Vertrages einsehen.(siehe Anhang)\n",
-      "Im stornierten Vertrag([redacted] dieser in den Dokumenten ersichtlich( siehe Anhang) und der neue Ersatzvertrag sollte eins zu eins die gleichen Konditionen enthalten. \n",
-      "Ich schrieb eine Beschwerde UND rief deswegen im Kundenservice an.\n",
-      "Telefonisch wurde mir der Bonus bei meinem Anruf für den aktuellen Vertrag\n",
-      "Predicted PII spans:\n",
-      "{'start': 212, 'end': 227, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 1170, 'end': 1187, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 127.txt ===\n",
-      "Sehr geehrte Damen und Herren!\n",
-      "Ich bitte Sie die Abschlussrechnungen für obige Vertragsnummer an folgende\n",
-      "Adresse zu senden:\n",
-      "Anna Sölzer\n",
-      "C/o Dr[redacted]\n",
-      "[redacted]:[redacted]example.org\n",
-      " Mobil: 01704486372\n",
-      " Mit freundlichen Grüßen\n",
-      " Dr.[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 143, 'end': 174, 'label': 'VORNAME'}\n",
-      "{'start': 175, 'end': 199, 'label': 'POSTLEITZAHL'}\n",
-      "{'start': 200, 'end': 209, 'label': 'NACHNAME'}\n",
-      "{'start': 270, 'end': 285, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 133.txt ===\n",
-      "Hallo zusammen,\n",
-      "ich versuche, in das Kundenkonto dem Portal zu kommen.\n",
-      "Da es bisher nicht funktioniert hat, habe ich mehrmals versucht, das\n",
-      "Passwort zu ändern.\n",
-      "Mittlerweile weiß ich nicht mehr, welches Passwort gültih ist. Wie komm ich\n",
-      "da raus ?\n",
-      "MfG\n",
-      "Jacob Mangold\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "\n",
-      "=== 132.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "hiermit wird der folgende Vertrag fristgerecht widerrufen.\n",
-      "Lieferstelle:[redacted]ählernummer: 754782\n",
-      "Vertragspartner:[redacted] bestätigen Sie diesen Widerruf.\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 103, 'end': 157, 'label': 'STRASSE'}\n",
-      "{'start': 193, 'end': 251, 'label': 'STRASSE'}\n",
-      "\n",
-      "=== 126.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "Herr Prof.[redacted] verstorben. Bitte ändern Sie die Vertrags-Anschrift auf seine Frau[redacted].\n",
-      "Neue Anschrift:[redacted] Information sende ich Ihnen im Auftrag von meiner Schwiegermutter[redacted]\n",
-      "Mit freundlichen Grüßen[redacted].[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 41, 'end': 60, 'label': 'VORNAME'}\n",
-      "{'start': 127, 'end': 138, 'label': 'VORNAME'}\n",
-      "{'start': 155, 'end': 201, 'label': 'STRASSE'}\n",
-      "{'start': 267, 'end': 279, 'label': 'VORNAME'}\n",
-      "{'start': 303, 'end': 318, 'label': 'VORNAME'}\n",
-      "{'start': 319, 'end': 337, 'label': 'TELEFONNUMMER'}\n",
-      "\n",
-      "=== 33.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      " \n",
-      "in meinem Haus, in der[redacted] seit dem 13.06.2023 \n",
-      "neue Mieter eingezogen. Ich bitte den Vertrag auf die neuen Mieter \n",
-      "umzuschreiben, mich Abzurechnen und künftig mit den Mietern abzurechnen. \n",
-      "Den Mietvertrag und das Übergabeprotokoll sende ich als Anlage anbei. Ich \n",
-      "denke da sind alle relevanten Daten enthalten.\n",
-      " \n",
-      "Bei Fragen stehe ich Ihnen zur Verfügung.\n",
-      " \n",
-      "Mit freundlichem Gruß\n",
-      "Aribert Schmidt\n",
-      " \n",
-      "﻿\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 55, 'end': 89, 'label': 'STRASSE'}\n",
-      "\n",
-      "=== 27.txt ===\n",
-      "Hallo liebes E.On Team,\n",
-      "wie telefonisch besprochen, angehangen die 2 Screenshots zur Doppelten\n",
-      "Abbuchung.\n",
-      "Meine Frage: Warum wurde doppelt abgebucht und wie bekomme ich mein Geld\n",
-      "zurück?\n",
-      "Mit freundlichen Grüßen\n",
-      "Lor[redacted]image: WhatsApp Bild 2023-08-14 um 14.36.35.jpg]\n",
-      "[image: WhatsApp Bild 2023-08-14 um 14.36.36.jpg]\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 214, 'end': 233, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 31.txt ===\n",
-      "Sehr geehrte Damen und Herren, Da wir durch einen Wasserschadens einen bedingten Mehrverbrauch der Trocknungsgeräten hatten., bitte ich Sie bei den nächsten Abschlagszahlungen dies nicht zu berücksichtigen. Der Betrag wird mir von der Versicherung erstattet. \n",
-      "Gerne höre ich von Ihnen Viele Grüße[redacted]endet von Naser Hande KGaA Mail auf Android\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 296, 'end': 316, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 25.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "wie gewünscht sende ich Ihnen meine Daten zum Abgleich zu und bestätige die Richtigkeit.\n",
-      "Meine Daten:\n",
-      "Vor-, Nachname: Dr.[redacted]sdatum:[redacted]adresse:[redacted]ählernummer: 1EMH0016453739\n",
-      "Aktueller Anbieter: E.ON Energie Deutschland GmbH\n",
-      "Aktuelle Kundennummer:[redacted] freundlichen Grüßen\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 152, 'end': 173, 'label': 'VORNAME'}\n",
-      "{'start': 180, 'end': 198, 'label': 'DATUM'}\n",
-      "{'start': 206, 'end': 245, 'label': 'STRASSE'}\n",
-      "{'start': 345, 'end': 359, 'label': 'VERTRAGSNUMMER'}\n",
-      "\n",
-      "=== 19.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "mein Stromtarif E.ON Klassik Strom Extra 24 läuft noch mit der Preisgarantie von 23,08 Cent netto ( 27,47 Cent brutto) bis zum 30.09.2023.\n",
-      "Welchen Tarif zu welchen Konditionen können Sie mir ab diesem Zeitpunkt anbieten?\n",
-      "Kann der Tarif zu gleichen Bedingungen weiter verlängert werden?\n",
-      "Vielen Dank!\n",
-      "Mit freundlichen Grüßen[redacted][redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 353, 'end': 363, 'label': 'VORNAME'}\n",
-      "{'start': 363, 'end': 370, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 118.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "Ich möchte Sie hiermit bitten, keine Anrufe / Werbung mehr zu tätigen an und für folgende Vertragsnehmerin:\n",
-      "Herr[redacted]konto:[redacted]en Dank im Voraus,\n",
-      "Yvonne Hölzenbecher (Tochter)\n",
-      "Diese Nachricht wurde von meinem Android Mobiltelefon mit GMX Mail gesendet.\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 143, 'end': 199, 'label': 'STRASSE'}\n",
-      "{'start': 205, 'end': 221, 'label': 'VERTRAGSNUMMER'}\n",
-      "\n",
-      "=== 130.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "aufgrund eines Wasserschadens wurden bei uns Trocknungsgeräte der Firma Tröst aufgestellt (s. Anhang).\n",
-      "Gemäß dem Schreiben beantrage ich die entsprechende Nichtberücksichtigung bei der Neuberechnung der jährlichen Abschlusszahlung.\n",
-      "Bestätigen Sie dies bitte.\n",
-      "Mit freundlichen Grüßen[redacted]zz. tel. nur erreichbar über[redacted]\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 313, 'end': 335, 'label': 'VORNAME'}\n",
-      "{'start': 363, 'end': 377, 'label': 'TELEFONNUMMER'}\n",
-      "\n",
-      "=== 125.txt ===\n",
-      "Sehr geehrte Damen und Herren, \n",
-      "Leider wurden wir von einem Unwetter getroffen, weshalb unser Keller vollgelaufen ist.\n",
-      "Deshalb hatten wir für 3 Wochen Trocknungsgeräte im Keller stehen.\n",
-      "Anbei erhalten sie den Energieverbrauch/-nachweis der Geräte mit der Bitte, mir für diesen eine Zwischenrechnung zukommen zu lassen. Diese kann ich dann bei meiner Versicherung einreichen, welche die Kosten übernimmt. \n",
-      "Mein Vertragskonto lautet[redacted]\n",
-      "Aufgrund der Einfachheit halber, reicht mir die Rechnung pe\n",
-      "Predicted PII spans:\n",
-      "{'start': 430, 'end': 441, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 613, 'end': 629, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 131.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "anbei das gewünschte Ausbauprotokoll.\n",
-      "mfg\n",
-      "Ing.[redacted][redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 77, 'end': 96, 'label': 'VORNAME'}\n",
-      "{'start': 96, 'end': 139, 'label': 'STRASSE'}\n",
-      "\n",
-      "=== 119.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "hiermit bitte ich sie mir die schriftlich die Daten mitzuteilen, welche \n",
-      "sie nach DSGVO § 16 über mich bei Ihren Unternehmen gespeichert haben. \n",
-      "Danke.\n",
-      "MfG Arndt[redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 192, 'end': 202, 'label': 'NACHNAME'}\n",
-      "\n",
-      "=== 18.txt ===\n",
-      "Schönen guten Tag, [redacted][redacted] habe gestern Ausversehen die Stromrechnung überwiesen die eigentlich per Lastschrift eingezogen wird. \n",
-      "Gestern habe ich mit einem aus ihrem Kundenservice telefoniert, der mir gesagt hat ich solle mich nochmal melden falls ich das Geld zurück überwiesen haben möchte, statt als Gutschrift. \n",
-      "Hiermit möchte ich ihnen mitteilen das ich die 111,02 Euro zurück überwiesen haben möchte. \n",
-      "Bitte veranlassen sie dies so schnell wie möglich. \n",
-      "Mit freundlichen Grüßen [r\n",
-      "Predicted PII spans:\n",
-      "{'start': 19, 'end': 34, 'label': 'VORNAME'}\n",
-      "{'start': 34, 'end': 49, 'label': 'DATUM'}\n",
-      "{'start': 508, 'end': 527, 'label': 'VORNAME'}\n",
-      "\n",
-      "=== 24.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      "bitte bereiten Sie mir ein Angebot für oben genannten Rahmenvertrag vor.\n",
-      "Meine Daten finden Sie entsprechend nachstehend.\n",
-      "Jonathan Huhn[redacted]nummer:[redacted]LV: 919684277\n",
-      "Vielen Dank,\n",
-      "Jonathan Huhn\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 166, 'end': 205, 'label': 'STRASSE'}\n",
-      "{'start': 212, 'end': 224, 'label': 'VERTRAGSNUMMER'}\n",
-      "\n",
-      "=== 30.txt ===\n",
-      "Sehr geehrte Damen und Herren,\n",
-      " \n",
-      "ich möchte Ihnen mitteilen, dass sich ab 01.09.2023 meine Kontonummer für\n",
-      "Last-und Gutschriften an folgendem Objekt ändert:\n",
-      " \n",
-      "Vertragsnummer:[redacted]sstelle :[redacted][redacted]ähler: 1126100052313042\n",
-      " \n",
-      " \n",
-      "Neue Kontonummer ab 01.09.2023 \n",
-      " \n",
-      "Dr.[redacted][redacted]IBAN: DE85230541192884717022\n",
-      "BIC: GENODEF1XYZ\n",
-      "Juncken Bank\n",
-      " \n",
-      "Mit freundlichen Grüßen und herzlichen Dank\n",
-      "Dr.[redacted][redacted][redacted][redacted]\n",
-      "Predicted PII spans:\n",
-      "{'start': 174, 'end': 194, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 203, 'end': 219, 'label': 'STRASSE'}\n",
-      "{'start': 219, 'end': 233, 'label': 'POSTLEITZAHL'}\n",
-      "{'start': 298, 'end': 305, 'label': 'VORNAME'}\n",
-      "{'start': 305, 'end': 312, 'label': 'NACHNAME'}\n",
-      "{'start': 420, 'end': 427, 'label': 'VORNAME'}\n",
-      "{'start': 427, 'end': 438, 'label': 'NACHNAME'}\n",
-      "{'start': 438, 'end': 444, 'label': 'NACHNAME'}\n",
-      "{'start': 444, 'end': 465, 'label': 'POSTLEITZAHL'}\n",
-      "Hallo liebes Eon Team,\n",
-      "es geht um die Vertragsnummer[redacted] der Einrichtung meines neuen Vertrages wurde leider die Überweisung als\n",
-      "Zahlungsart gewählt von dem jungen Kollegen an der Wohnungstür. Ich würde\n",
-      "es gerne wieder per Lastschrift abbuchen lassen, um mir den Stress zu\n",
-      "ersparen.\n",
-      "Verbraucherstelle ist weiterhin die[redacted][redacted]\n",
-      "Gruß Berthold Huhn\n",
-      "\n",
-      "Predicted PII spans:\n",
-      "{'start': 52, 'end': 67, 'label': 'VERTRAGSNUMMER'}\n",
-      "{'start': 329, 'end': 345, 'label': 'STRASSE'}\n",
-      "{'start': 345, 'end': 359, 'label': 'POSTLEITZAHL'}\n",
-      "=== Evaluation Metrics ===\n",
-      "True Positives: 198\n",
-      "False Positives: 178\n",
-      "False Negatives: 988\n",
-      "\n",
-      "Precision: 0.5266\n",
-      "Recall:    0.1669\n",
-      "F1 Score:  0.2535\n"
-     ]
-    }
-   ],
-   "execution_count": 3
-  },
-  {
-   "metadata": {},
-   "cell_type": "markdown",
-   "source": "## Per Label Results",
-   "id": "eb9219a39125641b"
-  },
-  {
-   "metadata": {
-    "ExecuteTime": {
-     "end_time": "2025-07-15T14:30:58.008645Z",
-     "start_time": "2025-07-15T14:30:35.337279Z"
-    }
-   },
-   "cell_type": "code",
-   "source": [
-    "from collections import defaultdict\n",
-    "import json\n",
-    "\n",
-    "# Load ground truth\n",
-    "with open(\"../../../data/original/ground_truth.json\", \"r\", encoding=\"utf-8\") as f:\n",
-    "    ground_truth = json.load(f)\n",
-    "\n",
-    "# Initialize per-label counts\n",
-    "label_metrics = defaultdict(lambda: {\"TP\": 0, \"FP\": 0, \"FN\": 0})\n",
-    "\n",
-    "# Evaluation loop\n",
-    "for example in ground_truth:\n",
-    "    text = example[\"text\"]\n",
-    "    gold_spans = [label for label in example[\"labels\"] if label[\"start\"] < label[\"end\"]]\n",
-    "\n",
-    "    _, raw_preds = mask_pii_spans(text, return_spans=True)\n",
-    "    pred_spans = convert_labels_to_custom(raw_preds)\n",
-    "\n",
-    "    matched_gold = set()\n",
-    "    matched_pred = set()\n",
-    "\n",
-    "    for i, pred in enumerate(pred_spans):\n",
-    "        for j, gold in enumerate(gold_spans):\n",
-    "            if relaxed_overlap(pred, gold):\n",
-    "                norm_label = normalize_label(gold[\"label\"])\n",
-    "                label_metrics[norm_label][\"TP\"] += 1\n",
-    "                matched_gold.add(j)\n",
-    "                matched_pred.add(i)\n",
-    "                break\n",
-    "\n",
-    "    # Count unmatched predictions as FP\n",
-    "    for i, pred in enumerate(pred_spans):\n",
-    "        if i not in matched_pred:\n",
-    "            norm_label = normalize_label(pred[\"label\"])\n",
-    "            label_metrics[norm_label][\"FP\"] += 1\n",
-    "\n",
-    "    # Count unmatched gold spans as FN\n",
-    "    for j, gold in enumerate(gold_spans):\n",
-    "        if j not in matched_gold:\n",
-    "            norm_label = normalize_label(gold[\"label\"])\n",
-    "            label_metrics[norm_label][\"FN\"] += 1\n",
-    "\n",
-    "# Print per-label metrics\n",
-    "print(\"=== Per-Label Evaluation ===\")\n",
-    "for label, counts in sorted(label_metrics.items()):\n",
-    "    TP = counts[\"TP\"]\n",
-    "    FP = counts[\"FP\"]\n",
-    "    FN = counts[\"FN\"]\n",
-    "    precision = TP / (TP + FP) if (TP + FP) > 0 else 0.0\n",
-    "    recall = TP / (TP + FN) if (TP + FN) > 0 else 0.0\n",
-    "    f1 = 2 * precision * recall / (precision + recall) if (precision + recall) > 0 else 0.0\n",
-    "\n",
-    "import pandas as pd\n",
-    "\n",
-    "rows = []\n",
-    "for label, counts in label_metrics.items():\n",
-    "    TP, FP, FN = counts[\"TP\"], counts[\"FP\"], counts[\"FN\"]\n",
-    "    precision = TP / (TP + FP) if (TP + FP) > 0 else 0.0\n",
-    "    recall = TP / (TP + FN) if (TP + FN) > 0 else 0.0\n",
-    "    f1 = 2 * precision * recall / (precision + recall) if (precision + recall) > 0 else 0.0\n",
-    "\n",
-    "    rows.append({\n",
-    "        \"Label\": label,\n",
-    "        \"TP\": TP,\n",
-    "        \"FP\": FP,\n",
-    "        \"FN\": FN,\n",
-    "        \"Precision\": precision,\n",
-    "        \"Recall\": recall,\n",
-    "        \"F1\": f1\n",
-    "    })\n",
-    "\n",
-    "df = (\n",
-    "    pd.DataFrame(rows)\n",
-    "    .sort_values(by=\"TP\", ascending=False)  # <-- sort by TP descending\n",
-    "    .reset_index(drop=True)\n",
-    ")\n",
-    "\n",
-    "print(df.to_markdown(index=False, floatfmt=\".4f\"))\n",
-    "\n",
-    "#    print(f\"\\nLabel: {label}\")\n",
-    "#    print(f\"  TP: {TP}, FP: {FP}, FN: {FN}\")\n",
-    "#    print(f\"  Precision: {precision:.4f}\")\n",
-    "#    print(f\"  Recall:    {recall:.4f}\")\n",
-    "#    print(f\"  F1 Score:  {f1:.4f}\")"
-   ],
-   "id": "d669039526a360d7",
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "=== Per-Label Evaluation ===\n",
-      "| Label          |   TP |   FP |   FN |   Precision |   Recall |     F1 |\n",
-      "|:---------------|-----:|-----:|-----:|------------:|---------:|-------:|\n",
-      "| VERTRAGSNUMMER |   74 |   11 |   27 |      0.8706 |   0.7327 | 0.7957 |\n",
-      "| NACHNAME       |   34 |   18 |  192 |      0.6538 |   0.1504 | 0.2446 |\n",
-      "| VORNAME        |   31 |   65 |  175 |      0.3229 |   0.1505 | 0.2053 |\n",
-      "| TELEFONNUMMER  |   23 |    6 |   15 |      0.7931 |   0.6053 | 0.6866 |\n",
-      "| STRASSE        |   20 |   42 |   54 |      0.3226 |   0.2703 | 0.2941 |\n",
-      "| DATUM          |    8 |    1 |  105 |      0.8889 |   0.0708 | 0.1311 |\n",
-      "| EMAIL          |    5 |    4 |   16 |      0.5556 |   0.2381 | 0.3333 |\n",
-      "| WOHNORT        |    3 |    5 |   72 |      0.3750 |   0.0400 | 0.0723 |\n",
-      "| HAUSNUMMER     |    0 |    5 |   72 |      0.0000 |   0.0000 | 0.0000 |\n",
-      "| POSTLEITZAHL   |    0 |   21 |   71 |      0.0000 |   0.0000 | 0.0000 |\n",
-      "| GESENDET_MIT   |    0 |    0 |   27 |      0.0000 |   0.0000 | 0.0000 |\n",
-      "| IBAN           |    0 |    0 |    7 |      0.0000 |   0.0000 | 0.0000 |\n",
-      "| TITEL          |    0 |    0 |   22 |      0.0000 |   0.0000 | 0.0000 |\n",
-      "| LINK           |    0 |    0 |   14 |      0.0000 |   0.0000 | 0.0000 |\n",
-      "| ZÄHLERNUMMER   |    0 |    0 |   39 |      0.0000 |   0.0000 | 0.0000 |\n",
-      "| ZÄHLERSTAND    |    0 |    0 |   16 |      0.0000 |   0.0000 | 0.0000 |\n",
-      "| FIRMA          |    0 |    0 |   28 |      0.0000 |   0.0000 | 0.0000 |\n",
-      "| FAX            |    0 |    0 |    5 |      0.0000 |   0.0000 | 0.0000 |\n",
-      "| BIC            |    0 |    0 |    1 |      0.0000 |   0.0000 | 0.0000 |\n",
-      "| BANK           |    0 |    0 |    3 |      0.0000 |   0.0000 | 0.0000 |\n",
-      "| ZAHLUNG        |    0 |    0 |   27 |      0.0000 |   0.0000 | 0.0000 |\n"
-     ]
-    }
-   ],
-   "execution_count": 4
-  },
-  {
-   "metadata": {},
-   "cell_type": "markdown",
-   "source": "# Alternative approach",
-   "id": "76f7776e94f6a6cc"
-  },
-  {
-   "metadata": {
-    "ExecuteTime": {
-     "end_time": "2025-07-15T14:36:29.683834Z",
-     "start_time": "2025-07-15T14:35:06.748880Z"
-    }
-   },
-   "cell_type": "code",
-   "source": [
-    "import torch\n",
-    "import json\n",
-    "from transformers import AutoTokenizer, AutoModelForTokenClassification\n",
-    "from collections import defaultdict\n",
-    "import pandas as pd\n",
-    "from typing import List, Dict, Tuple, Set\n",
-    "\n",
-    "class PiiranhaEvaluator:\n",
-    "    def __init__(self, model_name=\"iiiorg/piiranha-v1-detect-personal-information\"):\n",
-    "        self.tokenizer = AutoTokenizer.from_pretrained(model_name)\n",
-    "        self.model = AutoModelForTokenClassification.from_pretrained(model_name)\n",
-    "        self.device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
-    "        self.model.to(self.device)\n",
-    "\n",
-    "        # Improved bidirectional label mapping\n",
-    "        self.LABEL_MAPPING = {\n",
-    "            # PIIRANHA → Custom\n",
-    "            \"GIVENNAME\": \"VORNAME\",\n",
-    "            \"SURNAME\": \"NACHNAME\",\n",
-    "            \"USERNAME\": \"USERNAME\",  # Keep separate, don't map to NACHNAME\n",
-    "            \"ACCOUNTNUM\": \"VERTRAGSNUMMER\",\n",
-    "            \"CREDITCARDNUMBER\": \"VERTRAGSNUMMER\",\n",
-    "            \"BUILDINGNUM\": \"HAUSNUMMER\",\n",
-    "            \"STREET\": \"STRASSE\",\n",
-    "            \"CITY\": \"WOHNORT\",\n",
-    "            \"STATE\": \"BUNDESLAND\",  # Keep separate from WOHNORT\n",
-    "            \"ZIPCODE\": \"POSTLEITZAHL\",\n",
-    "            \"LOCATION\": \"WOHNORT\",\n",
-    "            \"DATEOFBIRTH\": \"DATUM\",\n",
-    "            \"DATE\": \"DATUM\",\n",
-    "            \"EMAIL\": \"EMAIL\",\n",
-    "            \"PHONENUMBER\": \"TELEFONNUMMER\",\n",
-    "            \"TELEPHONENUM\": \"TELEFONNUMMER\",\n",
-    "            \"IBAN\": \"IBAN\",\n",
-    "            \"BIC\": \"BIC\",\n",
-    "            \"URL\": \"LINK\",\n",
-    "            \"ORGANIZATION\": \"FIRMA\",\n",
-    "            \"TITLE\": \"TITEL\",\n",
-    "\n",
-    "            # Custom → PIIRANHA (reverse mapping)\n",
-    "            \"VORNAME\": \"GIVENNAME\",\n",
-    "            \"NACHNAME\": \"SURNAME\",\n",
-    "            \"TELEFONNUMMER\": \"PHONENUMBER\",\n",
-    "            \"STRASSE\": \"STREET\",\n",
-    "            \"HAUSNUMMER\": \"BUILDINGNUM\",\n",
-    "            \"POSTLEITZAHL\": \"ZIPCODE\",\n",
-    "            \"WOHNORT\": \"CITY\",\n",
-    "            \"DATUM\": \"DATE\",\n",
-    "            \"LINK\": \"URL\",\n",
-    "            \"FIRMA\": \"ORGANIZATION\",\n",
-    "            \"TITEL\": \"TITLE\"\n",
-    "        }\n",
-    "\n",
-    "        # Label groups for fuzzy matching\n",
-    "        self.LABEL_GROUPS = {\n",
-    "            \"PERSON_NAME\": {\"VORNAME\", \"NACHNAME\", \"GIVENNAME\", \"SURNAME\"},\n",
-    "            \"CONTACT\": {\"TELEFONNUMMER\", \"EMAIL\", \"PHONENUMBER\", \"TELEPHONENUM\"},\n",
-    "            \"ADDRESS\": {\"STRASSE\", \"HAUSNUMMER\", \"POSTLEITZAHL\", \"WOHNORT\", \"STREET\", \"BUILDINGNUM\", \"ZIPCODE\", \"CITY\"},\n",
-    "            \"FINANCIAL\": {\"IBAN\", \"BIC\", \"VERTRAGSNUMMER\", \"ACCOUNTNUM\"},\n",
-    "            \"TEMPORAL\": {\"DATUM\", \"DATE\", \"DATEOFBIRTH\"}\n",
-    "        }\n",
-    "\n",
-    "    def normalize_label(self, label: str) -> str:\n",
-    "        \"\"\"Normalize label using mapping and remove BIO prefixes\"\"\"\n",
-    "        clean_label = label.replace(\"B-\", \"\").replace(\"I-\", \"\")\n",
-    "        return self.LABEL_MAPPING.get(clean_label, clean_label)\n",
-    "\n",
-    "    def labels_are_compatible(self, pred_label: str, gold_label: str) -> bool:\n",
-    "        \"\"\"Check if two labels are compatible (exact match or same group)\"\"\"\n",
-    "        norm_pred = self.normalize_label(pred_label)\n",
-    "        norm_gold = self.normalize_label(gold_label)\n",
-    "\n",
-    "        # Exact match\n",
-    "        if norm_pred == norm_gold:\n",
-    "            return True\n",
-    "\n",
-    "        # Group match (more lenient)\n",
-    "        for group_labels in self.LABEL_GROUPS.values():\n",
-    "            if norm_pred in group_labels and norm_gold in group_labels:\n",
-    "                return True\n",
-    "\n",
-    "        return False\n",
-    "\n",
-    "    def token_level_alignment(self, text: str, char_spans: List[Dict]) -> List[Dict]:\n",
-    "        \"\"\"Convert character-level spans to token-level spans\"\"\"\n",
-    "        encoding = self.tokenizer(text, return_offsets_mapping=True, add_special_tokens=True)\n",
-    "        offset_mapping = encoding['offset_mapping']\n",
-    "\n",
-    "        token_spans = []\n",
-    "        for span in char_spans:\n",
-    "            start_char, end_char = span['start'], span['end']\n",
-    "\n",
-    "            # Find tokens that overlap with character span\n",
-    "            overlapping_tokens = []\n",
-    "            for i, (token_start, token_end) in enumerate(offset_mapping):\n",
-    "                if token_start >= token_end:  # Skip special tokens\n",
-    "                    continue\n",
-    "\n",
-    "                # Check for overlap\n",
-    "                if not (end_char <= token_start or start_char >= token_end):\n",
-    "                    overlapping_tokens.append(i)\n",
-    "\n",
-    "            if overlapping_tokens:\n",
-    "                token_spans.append({\n",
-    "                    'start_token': overlapping_tokens[0],\n",
-    "                    'end_token': overlapping_tokens[-1] + 1,\n",
-    "                    'start_char': start_char,\n",
-    "                    'end_char': end_char,\n",
-    "                    'label': span['label']\n",
-    "                })\n",
-    "\n",
-    "        return token_spans\n",
-    "\n",
-    "    def predict_spans(self, text: str) -> List[Dict]:\n",
-    "        \"\"\"Get predictions with improved span extraction\"\"\"\n",
-    "        inputs = self.tokenizer(text, return_tensors=\"pt\", truncation=True, padding=True)\n",
-    "        inputs = {k: v.to(self.device) for k, v in inputs.items()}\n",
-    "\n",
-    "        with torch.no_grad():\n",
-    "            outputs = self.model(**inputs)\n",
-    "\n",
-    "        predictions = torch.argmax(outputs.logits, dim=-1)\n",
-    "\n",
-    "        # Get offset mapping for character positions\n",
-    "        encoding = self.tokenizer(text, return_offsets_mapping=True, add_special_tokens=True)\n",
-    "        offset_mapping = encoding['offset_mapping']\n",
-    "\n",
-    "        spans = []\n",
-    "        current_span = None\n",
-    "\n",
-    "        for i, (start, end) in enumerate(offset_mapping):\n",
-    "            if start == end:  # Skip special tokens\n",
-    "                continue\n",
-    "\n",
-    "            label_id = predictions[0][i].item()\n",
-    "            label = self.model.config.id2label[label_id]\n",
-    "\n",
-    "            if label.startswith('B-') or (label.startswith('I-') and current_span is None):\n",
-    "                # Start new span\n",
-    "                if current_span:\n",
-    "                    spans.append(current_span)\n",
-    "                current_span = {\n",
-    "                    'start': start,\n",
-    "                    'end': end,\n",
-    "                    'label': label\n",
-    "                }\n",
-    "            elif label.startswith('I-') and current_span and label[2:] == current_span['label'][2:]:\n",
-    "                # Continue current span\n",
-    "                current_span['end'] = end\n",
-    "            else:\n",
-    "                # End current span\n",
-    "                if current_span:\n",
-    "                    spans.append(current_span)\n",
-    "                    current_span = None\n",
-    "\n",
-    "        # Don't forget the last span\n",
-    "        if current_span:\n",
-    "            spans.append(current_span)\n",
-    "\n",
-    "        # Normalize labels\n",
-    "        for span in spans:\n",
-    "            span['label'] = self.normalize_label(span['label'])\n",
-    "\n",
-    "        return spans\n",
-    "\n",
-    "    def flexible_overlap(self, pred: Dict, gold: Dict, match_type: str = \"partial\") -> bool:\n",
-    "        \"\"\"Flexible span matching with different strategies\"\"\"\n",
-    "        if not self.labels_are_compatible(pred['label'], gold['label']):\n",
-    "            return False\n",
-    "\n",
-    "        pred_start, pred_end = pred['start'], pred['end']\n",
-    "        gold_start, gold_end = gold['start'], gold['end']\n",
-    "\n",
-    "        if match_type == \"exact\":\n",
-    "            return pred_start == gold_start and pred_end == gold_end\n",
-    "        elif match_type == \"partial\":\n",
-    "            # Any overlap counts\n",
-    "            return not (pred_end <= gold_start or pred_start >= gold_end)\n",
-    "        elif match_type == \"boundary_relaxed\":\n",
-    "            # Allow ±2 character boundary differences\n",
-    "            tolerance = 2\n",
-    "            return (abs(pred_start - gold_start) <= tolerance and\n",
-    "                   abs(pred_end - gold_end) <= tolerance)\n",
-    "        elif match_type == \"token_level\":\n",
-    "            # Convert to token positions and compare\n",
-    "            # This would require token-level spans (implementation above)\n",
-    "            return pred.get('start_token', -1) == gold.get('start_token', -2)\n",
-    "        else:\n",
-    "            raise ValueError(f\"Unknown match_type: {match_type}\")\n",
-    "\n",
-    "    def evaluate_dataset(self, ground_truth_path: str, match_type: str = \"partial\") -> Dict:\n",
-    "        \"\"\"Evaluate on full dataset with detailed metrics\"\"\"\n",
-    "        with open(ground_truth_path, 'r', encoding='utf-8') as f:\n",
-    "            ground_truth = json.load(f)\n",
-    "\n",
-    "        # Global metrics\n",
-    "        total_tp = total_fp = total_fn = 0\n",
-    "\n",
-    "        # Per-label metrics\n",
-    "        label_metrics = defaultdict(lambda: {\"tp\": 0, \"fp\": 0, \"fn\": 0})\n",
-    "\n",
-    "        # Detailed results for analysis\n",
-    "        detailed_results = []\n",
-    "\n",
-    "        for example in ground_truth:\n",
-    "            text = example[\"text\"]\n",
-    "            gold_spans = [span for span in example[\"labels\"] if span[\"start\"] < span[\"end\"]]\n",
-    "            pred_spans = self.predict_spans(text)\n",
-    "\n",
-    "            # Track matches\n",
-    "            matched_gold = set()\n",
-    "            matched_pred = set()\n",
-    "\n",
-    "            # Find matches\n",
-    "            for i, pred in enumerate(pred_spans):\n",
-    "                for j, gold in enumerate(gold_spans):\n",
-    "                    if self.flexible_overlap(pred, gold, match_type):\n",
-    "                        # Count as TP\n",
-    "                        gold_label = self.normalize_label(gold[\"label\"])\n",
-    "                        label_metrics[gold_label][\"tp\"] += 1\n",
-    "                        total_tp += 1\n",
-    "                        matched_gold.add(j)\n",
-    "                        matched_pred.add(i)\n",
-    "                        break\n",
-    "\n",
-    "            # Count unmatched predictions as FP\n",
-    "            for i, pred in enumerate(pred_spans):\n",
-    "                if i not in matched_pred:\n",
-    "                    pred_label = self.normalize_label(pred[\"label\"])\n",
-    "                    label_metrics[pred_label][\"fp\"] += 1\n",
-    "                    total_fp += 1\n",
-    "\n",
-    "            # Count unmatched gold spans as FN\n",
-    "            for j, gold in enumerate(gold_spans):\n",
-    "                if j not in matched_gold:\n",
-    "                    gold_label = self.normalize_label(gold[\"label\"])\n",
-    "                    label_metrics[gold_label][\"fn\"] += 1\n",
-    "                    total_fn += 1\n",
-    "\n",
-    "            # Store detailed results\n",
-    "            detailed_results.append({\n",
-    "                \"text\": text[:100] + \"...\" if len(text) > 100 else text,\n",
-    "                \"gold_count\": len(gold_spans),\n",
-    "                \"pred_count\": len(pred_spans),\n",
-    "                \"matches\": len(matched_gold),\n",
-    "                \"gold_spans\": gold_spans,\n",
-    "                \"pred_spans\": pred_spans\n",
-    "            })\n",
-    "\n",
-    "        # Calculate metrics\n",
-    "        def calc_metrics(tp, fp, fn):\n",
-    "            precision = tp / (tp + fp) if (tp + fp) > 0 else 0.0\n",
-    "            recall = tp / (tp + fn) if (tp + fn) > 0 else 0.0\n",
-    "            f1 = 2 * precision * recall / (precision + recall) if (precision + recall) > 0 else 0.0\n",
-    "            return precision, recall, f1\n",
-    "\n",
-    "        # Global metrics\n",
-    "        global_precision, global_recall, global_f1 = calc_metrics(total_tp, total_fp, total_fn)\n",
-    "\n",
-    "        # Per-label metrics\n",
-    "        label_results = []\n",
-    "        for label, counts in label_metrics.items():\n",
-    "            precision, recall, f1 = calc_metrics(counts[\"tp\"], counts[\"fp\"], counts[\"fn\"])\n",
-    "            label_results.append({\n",
-    "                \"Label\": label,\n",
-    "                \"TP\": counts[\"tp\"],\n",
-    "                \"FP\": counts[\"fp\"],\n",
-    "                \"FN\": counts[\"fn\"],\n",
-    "                \"Precision\": precision,\n",
-    "                \"Recall\": recall,\n",
-    "                \"F1\": f1,\n",
-    "                \"Support\": counts[\"tp\"] + counts[\"fn\"]\n",
-    "            })\n",
-    "\n",
-    "        return {\n",
-    "            \"global_metrics\": {\n",
-    "                \"precision\": global_precision,\n",
-    "                \"recall\": global_recall,\n",
-    "                \"f1\": global_f1,\n",
-    "                \"total_tp\": total_tp,\n",
-    "                \"total_fp\": total_fp,\n",
-    "                \"total_fn\": total_fn\n",
-    "            },\n",
-    "            \"label_metrics\": label_results,\n",
-    "            \"detailed_results\": detailed_results\n",
-    "        }\n",
-    "\n",
-    "    def compare_matching_strategies(self, ground_truth_path: str) -> pd.DataFrame:\n",
-    "        \"\"\"Compare different matching strategies\"\"\"\n",
-    "        strategies = [\"exact\", \"partial\", \"boundary_relaxed\"]\n",
-    "        comparison_results = []\n",
-    "\n",
-    "        for strategy in strategies:\n",
-    "            print(f\"Evaluating with {strategy} matching...\")\n",
-    "            results = self.evaluate_dataset(ground_truth_path, strategy)\n",
-    "            comparison_results.append({\n",
-    "                \"Strategy\": strategy,\n",
-    "                \"Precision\": results[\"global_metrics\"][\"precision\"],\n",
-    "                \"Recall\": results[\"global_metrics\"][\"recall\"],\n",
-    "                \"F1\": results[\"global_metrics\"][\"f1\"],\n",
-    "                \"Total_TP\": results[\"global_metrics\"][\"total_tp\"],\n",
-    "                \"Total_FP\": results[\"global_metrics\"][\"total_fp\"],\n",
-    "                \"Total_FN\": results[\"global_metrics\"][\"total_fn\"]\n",
-    "            })\n",
-    "\n",
-    "        return pd.DataFrame(comparison_results)\n",
-    "\n",
-    "# Usage example\n",
-    "def main():\n",
-    "    evaluator = PiiranhaEvaluator()\n",
-    "\n",
-    "    # Compare different matching strategies\n",
-    "    print(\"=== Comparing Matching Strategies ===\")\n",
-    "    strategy_comparison = evaluator.compare_matching_strategies(\"../../../data/original/ground_truth.json\")\n",
-    "    print(strategy_comparison.to_string(index=False))\n",
-    "\n",
-    "    # Detailed evaluation with partial matching (recommended)\n",
-    "    print(\"\\n=== Detailed Evaluation (Partial Matching) ===\")\n",
-    "    results = evaluator.evaluate_dataset(\"../../../data/original/ground_truth.json\", match_type=\"partial\")\n",
-    "\n",
-    "    # Global metrics\n",
-    "    print(f\"Global F1: {results['global_metrics']['f1']:.4f}\")\n",
-    "    print(f\"Global Precision: {results['global_metrics']['precision']:.4f}\")\n",
-    "    print(f\"Global Recall: {results['global_metrics']['recall']:.4f}\")\n",
-    "\n",
-    "    # Per-label metrics\n",
-    "    df = pd.DataFrame(results['label_metrics']).sort_values('F1', ascending=False)\n",
-    "    print(\"\\n=== Per-Label Results ===\")\n",
-    "    print(df.to_string(index=False, float_format=\"%.4f\"))\n",
-    "\n",
-    "    # Error analysis\n",
-    "    print(\"\\n=== Error Analysis ===\")\n",
-    "    low_recall_labels = df[df['Recall'] < 0.3]['Label'].tolist()\n",
-    "    high_fp_labels = df[df['FP'] > df['TP']]['Label'].tolist()\n",
-    "\n",
-    "    print(f\"Labels with low recall (<0.3): {low_recall_labels}\")\n",
-    "    print(f\"Labels with high FP rate: {high_fp_labels}\")\n",
-    "\n",
-    "if __name__ == \"__main__\":\n",
-    "    main()"
-   ],
-   "id": "e4c7d6fbb7f9b2",
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "Asking to truncate to max_length but no maximum length is provided and the model has no predefined maximum length. Default to no truncation.\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "=== Comparing Matching Strategies ===\n",
-      "Evaluating with exact matching...\n",
-      "Evaluating with partial matching...\n",
-      "Evaluating with boundary_relaxed matching...\n",
-      "        Strategy  Precision   Recall       F1  Total_TP  Total_FP  Total_FN\n",
-      "           exact   0.027730 0.013491 0.018151        16       561      1170\n",
-      "         partial   0.923744 0.448653 0.603966       533        44       655\n",
-      "boundary_relaxed   0.677643 0.329680 0.443562       391       186       795\n",
-      "\n",
-      "=== Detailed Evaluation (Partial Matching) ===\n",
-      "Global F1: 0.6040\n",
-      "Global Precision: 0.9237\n",
-      "Global Recall: 0.4487\n",
-      "\n",
-      "=== Per-Label Results ===\n",
-      "         Label  TP  FP  FN  Precision  Recall     F1  Support\n",
-      "        STREET  71   3   3     0.9595  0.9595 0.9595       74\n",
-      "          CITY  70   3   5     0.9589  0.9333 0.9459       75\n",
-      "       ZIPCODE  64   1   8     0.9846  0.8889 0.9343       72\n",
-      "VERTRAGSNUMMER  79   6  22     0.9294  0.7822 0.8495      101\n",
-      "   PHONENUMBER  29   6   9     0.8286  0.7632 0.7945       38\n",
-      "     GIVENNAME  97   2 109     0.9798  0.4709 0.6361      206\n",
-      "       SURNAME  98   4 129     0.9608  0.4317 0.5957      227\n",
-      "         EMAIL   8   1  13     0.8889  0.3810 0.5333       21\n",
-      "   BUILDINGNUM   8   2  64     0.8000  0.1111 0.1951       72\n",
-      "          DATE   9   0 104     1.0000  0.0796 0.1475      113\n",
-      "       ZAHLUNG   0   0  27     0.0000  0.0000 0.0000       27\n",
-      "           FAX   0   0   5     0.0000  0.0000 0.0000        5\n",
-      "      USERNAME   0  13   0     0.0000  0.0000 0.0000        0\n",
-      "          BANK   0   0   3     0.0000  0.0000 0.0000        3\n",
-      "           BIC   0   0   1     0.0000  0.0000 0.0000        1\n",
-      "     IDCARDNUM   0   2   0     0.0000  0.0000 0.0000        0\n",
-      "         TITLE   0   0  22     0.0000  0.0000 0.0000       22\n",
-      "  ORGANIZATION   0   0  28     0.0000  0.0000 0.0000       28\n",
-      "   ZÄHLERSTAND   0   0  16     0.0000  0.0000 0.0000       16\n",
-      "  ZÄHLERNUMMER   0   0  39     0.0000  0.0000 0.0000       39\n",
-      "  GESENDET_MIT   0   0  27     0.0000  0.0000 0.0000       27\n",
-      "          IBAN   0   0   7     0.0000  0.0000 0.0000        7\n",
-      "           URL   0   0  14     0.0000  0.0000 0.0000       14\n",
-      "        TAXNUM   0   1   0     0.0000  0.0000 0.0000        0\n",
-      "\n",
-      "=== Error Analysis ===\n",
-      "Labels with low recall (<0.3): ['BUILDINGNUM', 'DATE', 'ZAHLUNG', 'FAX', 'USERNAME', 'BANK', 'BIC', 'IDCARDNUM', 'TITLE', 'ORGANIZATION', 'ZÄHLERSTAND', 'ZÄHLERNUMMER', 'GESENDET_MIT', 'IBAN', 'URL', 'TAXNUM']\n",
-      "Labels with high FP rate: ['USERNAME', 'IDCARDNUM', 'TAXNUM']\n"
-     ]
-    }
-   ],
-   "execution_count": 11
-  }
- ],
- "metadata": {
-  "kernelspec": {
-   "display_name": "Python 3",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 2
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython2",
-   "version": "2.7.6"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 5
-}
+#%%
+!pip install transformers
+# pip install ipywidgets
+#%% md
+## Import Piiranha Model from Huggingfase and Map the Piiranha Labels to our Custom Labels
+#%%
+import torch
+from transformers import AutoTokenizer, AutoModelForTokenClassification
+
+# Load model and tokenizer
+model_name = "iiiorg/piiranha-v1-detect-personal-information"
+tokenizer = AutoTokenizer.from_pretrained(model_name)
+model = AutoModelForTokenClassification.from_pretrained(model_name)
+
+device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
+model.to(device)
+
+# Label mapping: PIIRANHA → your schema
+PIIRANHA_TO_CUSTOM = {
+    "GIVENNAME": "VORNAME",
+    "SURNAME": "NACHNAME",
+    "USERNAME": "NACHNAME",  # no "username" slot, fall back to surname
+    "ACCOUNTNUM": "VERTRAGSNUMMER",
+    "CREDITCARDNUMBER": "VERTRAGSNUMMER",
+    "BUILDINGNUM": "HAUSNUMMER",
+    "STREET": "STRASSE",
+    "CITY": "WOHNORT",
+    "STATE": "WOHNORT",  # treat state like city
+    "ZIPCODE": "POSTLEITZAHL",
+    "LOCATION": "WOHNORT",
+    "DATEOFBIRTH": "DATUM",
+    "DATE": "DATUM",
+    "EMAIL": "EMAIL",
+    "PHONENUMBER": "TELEFONNUMMER",
+    "TELEPHONENUM": "TELEFONNUMMER",
+    "IBAN": "IBAN",
+    "BIC": "BIC",
+    "URL": "LINK",
+    "ORGANIZATION": "FIRMA",
+    "TITLE": "TITEL",
+    # the following Piiranha labels have no equivalent, so we drop them:
+    # "IDCARDNUM", "DRIVERLICENSENUM", "SOCIALNUM", "TAXNUM", "PASSWORD"
+}
+
+
+def apply_redaction(masked_text, start, end, pii_type, aggregate_redaction):
+    for j in range(start, end):
+        masked_text[j] = ''
+    if aggregate_redaction:
+        masked_text[start] = '[redacted]'
+    else:
+        masked_text[start] = f'[{pii_type}]'
+
+
+def convert_labels_to_custom(spans):
+    converted = []
+    for span in spans:
+        raw_label = span["label"].replace("I-", "").replace("B-", "")
+        mapped_label = PIIRANHA_TO_CUSTOM.get(raw_label)
+        if mapped_label:
+            converted.append({
+                "start": span["start"],
+                "end": span["end"],
+                "label": mapped_label
+            })
+    return converted
+
+
+def mask_pii_spans(text, aggregate_redaction=True, return_spans=False):
+    inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True)
+    inputs = {k: v.to(device) for k, v in inputs.items()}
+
+    with torch.no_grad():
+        outputs = model(**inputs)
+
+    predictions = torch.argmax(outputs.logits, dim=-1)
+
+    encoded_inputs = tokenizer.encode_plus(
+        text, return_offsets_mapping=True, add_special_tokens=True
+    )
+    offset_mapping = encoded_inputs['offset_mapping']
+
+    masked_text = list(text)
+    is_redacting = False
+    redaction_start = 0
+    current_pii_type = ''
+    predicted_spans = []
+
+    for i, (start, end) in enumerate(offset_mapping):
+        if start == end:
+            continue  # Skip special tokens
+
+        label_id = predictions[0][i].item()
+        label = model.config.id2label[label_id]
+
+        if label != 'O':
+            if not is_redacting:
+                is_redacting = True
+                redaction_start = start
+                current_pii_type = label
+            elif not aggregate_redaction and label != current_pii_type:
+                predicted_spans.append({"start": redaction_start, "end": start, "label": current_pii_type})
+                apply_redaction(masked_text, redaction_start, start, current_pii_type, aggregate_redaction)
+                redaction_start = start
+                current_pii_type = label
+        else:
+            if is_redacting:
+                predicted_spans.append({"start": redaction_start, "end": end, "label": current_pii_type})
+                apply_redaction(masked_text, redaction_start, end, current_pii_type, aggregate_redaction)
+                is_redacting = False
+
+    if is_redacting:
+        predicted_spans.append({"start": redaction_start, "end": len(masked_text), "label": current_pii_type})
+        apply_redaction(masked_text, redaction_start, len(masked_text), current_pii_type, aggregate_redaction)
+
+    result = ''.join(masked_text)
+    if return_spans:
+        return result, predicted_spans
+    return result
+#%% md
+## Load Original Mails and execute Anonymization
+#%%
+from pathlib import Path
+
+folder = Path("../../../data/original/golden_dataset_original")
+
+for file_path in folder.glob("*.txt"):
+    with open(file_path, "r", encoding="utf-8") as f:
+        text = f.read()
+
+    masked_text, spans = mask_pii_spans(text, return_spans=True)
+    mapped_spans = convert_labels_to_custom(spans)
+
+    print(f"\n=== {file_path.name} ===")
+    print(masked_text[:500])  # Preview first 500 chars
+    print("Predicted PII spans:")
+    for span in mapped_spans:
+        print(span)
+with open("../../../data/original/golden_dataset_original/1.txt", "r", encoding="utf-8") as f:
+    text = f.read()
+
+masked_text, spans = mask_pii_spans(text, return_spans=True)
+mapped_spans = convert_labels_to_custom(spans)
+
+print(masked_text)
+print("Predicted PII spans:")
+for span in mapped_spans:
+    print(span)
+## Load Ground Truth and Calculate Precision, Recall & F1
+import json
+
+# Load ground truth
+with open("../../../data/original/ground_truth.json", "r", encoding="utf-8") as f:
+    ground_truth = json.load(f)
+
+# Metrics counters
+TP, FP, FN = 0, 0, 0
+
+# Optional: group similar gold labels
+GROUPED_LABELS = {
+    "TITEL": {"TITEL"},
+    "VORNAME": {"VORNAME", "GIVENNAME"},
+    "NACHNAME": {"NACHNAME", "SURNAME", "USERNAME"},
+    "FIRMA": {"FIRMA"},
+    "TELEFONNUMMER": {"TELEFONNUMMER", "PHONENUMBER", "TELEPHONENUM"},
+    "EMAIL": {"EMAIL"},
+    "FAX": {"FAX"},
+    "STRASSE": {"STRASSE", "STREET"},
+    "HAUSNUMMER": {"HAUSNUMMER", "BUILDINGNUM"},
+    "POSTLEITZAHL": {"POSTLEITZAHL", "PLZ", "ZIP", "ZIPCODE"},
+    "WOHNORT": {"WOHNORT", "ORT", "CITY"},
+    "ZÄHLERNUMMER": {"ZÄHLERNUMMER", "METER_ID"},
+    "ZÄHLERSTAND": {"ZÄHLERSTAND", "METER_READING"},
+    "VERTRAGSNUMMER": {"VERTRAGSNUMMER", "ANGEBOTSNUMMER", "KUNDENNUMMER"},
+    "ZAHLUNG": {"BETRAG", "ZAHLUNG", "AMOUNT"},
+    "BANK": {"BANK"},
+    "IBAN": {"IBAN"},
+    "BIC": {"BIC"},
+    "DATUM": {"DATUM", "DATE", "DATEOFBIRTH"},
+    "GESENDET_MIT": {"GESENDET_MIT"},
+    "LINK": {"LINK", "URL"}
+}
+
+
+# Helper: normalize labels to group base (e.g. map VERTRAGSNUMMER → KUNDENNUMMER)
+def normalize_label(label):
+    for group, aliases in GROUPED_LABELS.items():
+        if label in aliases:
+            return group
+    return label
+
+
+# Relaxed span match with IoU
+def relaxed_overlap(pred, gold, iou_threshold=0.5):
+    pred_label = normalize_label(pred["label"])
+    gold_label = normalize_label(gold["label"])
+    if pred_label != gold_label:
+        return False
+    inter_start = max(pred["start"], gold["start"])
+    inter_end = min(pred["end"], gold["end"])
+    intersection = max(0, inter_end - inter_start)
+    union = max(pred["end"], gold["end"]) - min(pred["start"], gold["start"])
+    iou = intersection / union if union > 0 else 0
+    return iou >= iou_threshold
+
+
+# Evaluation loop
+for example in ground_truth:
+    text = example["text"]
+    gold_spans = [label for label in example["labels"] if label["start"] < label["end"]]
+
+    _, raw_preds = mask_pii_spans(text, return_spans=True)
+    pred_spans = convert_labels_to_custom(raw_preds)
+
+    matched_gold = set()
+    matched_pred = set()
+
+    for i, pred in enumerate(pred_spans):
+        for j, gold in enumerate(gold_spans):
+            if relaxed_overlap(pred, gold):
+                TP += 1
+                matched_gold.add(j)
+                matched_pred.add(i)
+                break
+
+    FP += len(pred_spans) - len(matched_pred)
+    FN += len(gold_spans) - len(matched_gold)
+
+# Compute metrics
+precision = TP / (TP + FP) if (TP + FP) > 0 else 0.0
+recall = TP / (TP + FN) if (TP + FN) > 0 else 0.0
+f1 = 2 * precision * recall / (precision + recall) if (precision + recall) > 0 else 0.0
+
+print("=== Evaluation Metrics ===")
+print(f"True Positives: {TP}")
+print(f"False Positives: {FP}")
+print(f"False Negatives: {FN}")
+print(f"\nPrecision: {precision:.4f}")
+print(f"Recall:    {recall:.4f}")
+print(f"F1 Score:  {f1:.4f}")
+#%% md
+## Per Label Results
+#%%
+from collections import defaultdict
+import json
+
+# Load ground truth
+with open("../../../data/original/ground_truth.json", "r", encoding="utf-8") as f:
+    ground_truth = json.load(f)
+
+# Initialize per-label counts
+label_metrics = defaultdict(lambda: {"TP": 0, "FP": 0, "FN": 0})
+
+# Evaluation loop
+for example in ground_truth:
+    text = example["text"]
+    gold_spans = [label for label in example["labels"] if label["start"] < label["end"]]
+
+    _, raw_preds = mask_pii_spans(text, return_spans=True)
+    pred_spans = convert_labels_to_custom(raw_preds)
+
+    matched_gold = set()
+    matched_pred = set()
+
+    for i, pred in enumerate(pred_spans):
+        for j, gold in enumerate(gold_spans):
+            if relaxed_overlap(pred, gold):
+                norm_label = normalize_label(gold["label"])
+                label_metrics[norm_label]["TP"] += 1
+                matched_gold.add(j)
+                matched_pred.add(i)
+                break
+
+    # Count unmatched predictions as FP
+    for i, pred in enumerate(pred_spans):
+        if i not in matched_pred:
+            norm_label = normalize_label(pred["label"])
+            label_metrics[norm_label]["FP"] += 1
+
+    # Count unmatched gold spans as FN
+    for j, gold in enumerate(gold_spans):
+        if j not in matched_gold:
+            norm_label = normalize_label(gold["label"])
+            label_metrics[norm_label]["FN"] += 1
+
+# Print per-label metrics
+print("=== Per-Label Evaluation ===")
+for label, counts in sorted(label_metrics.items()):
+    TP = counts["TP"]
+    FP = counts["FP"]
+    FN = counts["FN"]
+    precision = TP / (TP + FP) if (TP + FP) > 0 else 0.0
+    recall = TP / (TP + FN) if (TP + FN) > 0 else 0.0
+    f1 = 2 * precision * recall / (precision + recall) if (precision + recall) > 0 else 0.0
+
+import pandas as pd
+
+rows = []
+for label, counts in label_metrics.items():
+    TP, FP, FN = counts["TP"], counts["FP"], counts["FN"]
+    precision = TP / (TP + FP) if (TP + FP) > 0 else 0.0
+    recall = TP / (TP + FN) if (TP + FN) > 0 else 0.0
+    f1 = 2 * precision * recall / (precision + recall) if (precision + recall) > 0 else 0.0
+
+    rows.append({
+        "Label": label,
+        "TP": TP,
+        "FP": FP,
+        "FN": FN,
+        "Precision": precision,
+        "Recall": recall,
+        "F1": f1
+    })
+
+df = (
+    pd.DataFrame(rows)
+    .sort_values(by="TP", ascending=False)  # <-- sort by TP descending
+    .reset_index(drop=True)
+)
+
+print(df.to_markdown(index=False, floatfmt=".4f"))
+
+#    print(f"\nLabel: {label}")
+#    print(f"  TP: {TP}, FP: {FP}, FN: {FN}")
+#    print(f"  Precision: {precision:.4f}")
+#    print(f"  Recall:    {recall:.4f}")
+#    print(f"  F1 Score:  {f1:.4f}")
+#%% md
+# Alternative approach
+#%%
+import torch
+import json
+from transformers import AutoTokenizer, AutoModelForTokenClassification
+from collections import defaultdict
+import pandas as pd
+from typing import List, Dict, Tuple, Set
+
+class PiiranhaEvaluator:
+    def __init__(self, model_name="iiiorg/piiranha-v1-detect-personal-information"):
+        self.tokenizer = AutoTokenizer.from_pretrained(model_name)
+        self.model = AutoModelForTokenClassification.from_pretrained(model_name)
+        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
+        self.model.to(self.device)
+
+        # Improved bidirectional label mapping
+        self.LABEL_MAPPING = {
+            # PIIRANHA → Custom
+            "GIVENNAME": "VORNAME",
+            "SURNAME": "NACHNAME",
+            "USERNAME": "USERNAME",  # Keep separate, don't map to NACHNAME
+            "ACCOUNTNUM": "VERTRAGSNUMMER",
+            "CREDITCARDNUMBER": "VERTRAGSNUMMER",
+            "BUILDINGNUM": "HAUSNUMMER",
+            "STREET": "STRASSE",
+            "CITY": "WOHNORT",
+            "STATE": "BUNDESLAND",  # Keep separate from WOHNORT
+            "ZIPCODE": "POSTLEITZAHL",
+            "LOCATION": "WOHNORT",
+            "DATEOFBIRTH": "DATUM",
+            "DATE": "DATUM",
+            "EMAIL": "EMAIL",
+            "PHONENUMBER": "TELEFONNUMMER",
+            "TELEPHONENUM": "TELEFONNUMMER",
+            "IBAN": "IBAN",
+            "BIC": "BIC",
+            "URL": "LINK",
+            "ORGANIZATION": "FIRMA",
+            "TITLE": "TITEL",
+
+            # Custom → PIIRANHA (reverse mapping)
+            "VORNAME": "GIVENNAME",
+            "NACHNAME": "SURNAME",
+            "TELEFONNUMMER": "PHONENUMBER",
+            "STRASSE": "STREET",
+            "HAUSNUMMER": "BUILDINGNUM",
+            "POSTLEITZAHL": "ZIPCODE",
+            "WOHNORT": "CITY",
+            "DATUM": "DATE",
+            "LINK": "URL",
+            "FIRMA": "ORGANIZATION",
+            "TITEL": "TITLE"
+        }
+
+        # Label groups for fuzzy matching
+        self.LABEL_GROUPS = {
+            "PERSON_NAME": {"VORNAME", "NACHNAME", "GIVENNAME", "SURNAME"},
+            "CONTACT": {"TELEFONNUMMER", "EMAIL", "PHONENUMBER", "TELEPHONENUM"},
+            "ADDRESS": {"STRASSE", "HAUSNUMMER", "POSTLEITZAHL", "WOHNORT", "STREET", "BUILDINGNUM", "ZIPCODE", "CITY"},
+            "FINANCIAL": {"IBAN", "BIC", "VERTRAGSNUMMER", "ACCOUNTNUM"},
+            "TEMPORAL": {"DATUM", "DATE", "DATEOFBIRTH"}
+        }
+
+    def normalize_label(self, label: str) -> str:
+        """Normalize label using mapping and remove BIO prefixes"""
+        clean_label = label.replace("B-", "").replace("I-", "")
+        return self.LABEL_MAPPING.get(clean_label, clean_label)
+
+    def labels_are_compatible(self, pred_label: str, gold_label: str) -> bool:
+        """Check if two labels are compatible (exact match or same group)"""
+        norm_pred = self.normalize_label(pred_label)
+        norm_gold = self.normalize_label(gold_label)
+
+        # Exact match
+        if norm_pred == norm_gold:
+            return True
+
+        # Group match (more lenient)
+        for group_labels in self.LABEL_GROUPS.values():
+            if norm_pred in group_labels and norm_gold in group_labels:
+                return True
+
+        return False
+
+    def token_level_alignment(self, text: str, char_spans: List[Dict]) -> List[Dict]:
+        """Convert character-level spans to token-level spans"""
+        encoding = self.tokenizer(text, return_offsets_mapping=True, add_special_tokens=True)
+        offset_mapping = encoding['offset_mapping']
+
+        token_spans = []
+        for span in char_spans:
+            start_char, end_char = span['start'], span['end']
+
+            # Find tokens that overlap with character span
+            overlapping_tokens = []
+            for i, (token_start, token_end) in enumerate(offset_mapping):
+                if token_start >= token_end:  # Skip special tokens
+                    continue
+
+                # Check for overlap
+                if not (end_char <= token_start or start_char >= token_end):
+                    overlapping_tokens.append(i)
+
+            if overlapping_tokens:
+                token_spans.append({
+                    'start_token': overlapping_tokens[0],
+                    'end_token': overlapping_tokens[-1] + 1,
+                    'start_char': start_char,
+                    'end_char': end_char,
+                    'label': span['label']
+                })
+
+        return token_spans
+
+    def predict_spans(self, text: str) -> List[Dict]:
+        """Get predictions with improved span extraction"""
+        inputs = self.tokenizer(text, return_tensors="pt", truncation=True, padding=True)
+        inputs = {k: v.to(self.device) for k, v in inputs.items()}
+
+        with torch.no_grad():
+            outputs = self.model(**inputs)
+
+        predictions = torch.argmax(outputs.logits, dim=-1)
+
+        # Get offset mapping for character positions
+        encoding = self.tokenizer(text, return_offsets_mapping=True, add_special_tokens=True)
+        offset_mapping = encoding['offset_mapping']
+
+        spans = []
+        current_span = None
+
+        for i, (start, end) in enumerate(offset_mapping):
+            if start == end:  # Skip special tokens
+                continue
+
+            label_id = predictions[0][i].item()
+            label = self.model.config.id2label[label_id]
+
+            if label.startswith('B-') or (label.startswith('I-') and current_span is None):
+                # Start new span
+                if current_span:
+                    spans.append(current_span)
+                current_span = {
+                    'start': start,
+                    'end': end,
+                    'label': label
+                }
+            elif label.startswith('I-') and current_span and label[2:] == current_span['label'][2:]:
+                # Continue current span
+                current_span['end'] = end
+            else:
+                # End current span
+                if current_span:
+                    spans.append(current_span)
+                    current_span = None
+
+        # Don't forget the last span
+        if current_span:
+            spans.append(current_span)
+
+        # Normalize labels
+        for span in spans:
+            span['label'] = self.normalize_label(span['label'])
+
+        return spans
+
+    def flexible_overlap(self, pred: Dict, gold: Dict, match_type: str = "partial") -> bool:
+        """Flexible span matching with different strategies"""
+        if not self.labels_are_compatible(pred['label'], gold['label']):
+            return False
+
+        pred_start, pred_end = pred['start'], pred['end']
+        gold_start, gold_end = gold['start'], gold['end']
+
+        if match_type == "exact":
+            return pred_start == gold_start and pred_end == gold_end
+        elif match_type == "partial":
+            # Any overlap counts
+            return not (pred_end <= gold_start or pred_start >= gold_end)
+        elif match_type == "boundary_relaxed":
+            # Allow ±2 character boundary differences
+            tolerance = 2
+            return (abs(pred_start - gold_start) <= tolerance and
+                   abs(pred_end - gold_end) <= tolerance)
+        elif match_type == "token_level":
+            # Convert to token positions and compare
+            # This would require token-level spans (implementation above)
+            return pred.get('start_token', -1) == gold.get('start_token', -2)
+        else:
+            raise ValueError(f"Unknown match_type: {match_type}")
+
+    def evaluate_dataset(self, ground_truth_path: str, match_type: str = "partial") -> Dict:
+        """Evaluate on full dataset with detailed metrics"""
+        with open(ground_truth_path, 'r', encoding='utf-8') as f:
+            ground_truth = json.load(f)
+
+        # Global metrics
+        total_tp = total_fp = total_fn = 0
+
+        # Per-label metrics
+        label_metrics = defaultdict(lambda: {"tp": 0, "fp": 0, "fn": 0})
+
+        # Detailed results for analysis
+        detailed_results = []
+
+        for example in ground_truth:
+            text = example["text"]
+            gold_spans = [span for span in example["labels"] if span["start"] < span["end"]]
+            pred_spans = self.predict_spans(text)
+
+            # Track matches
+            matched_gold = set()
+            matched_pred = set()
+
+            # Find matches
+            for i, pred in enumerate(pred_spans):
+                for j, gold in enumerate(gold_spans):
+                    if self.flexible_overlap(pred, gold, match_type):
+                        # Count as TP
+                        gold_label = self.normalize_label(gold["label"])
+                        label_metrics[gold_label]["tp"] += 1
+                        total_tp += 1
+                        matched_gold.add(j)
+                        matched_pred.add(i)
+                        break
+
+            # Count unmatched predictions as FP
+            for i, pred in enumerate(pred_spans):
+                if i not in matched_pred:
+                    pred_label = self.normalize_label(pred["label"])
+                    label_metrics[pred_label]["fp"] += 1
+                    total_fp += 1
+
+            # Count unmatched gold spans as FN
+            for j, gold in enumerate(gold_spans):
+                if j not in matched_gold:
+                    gold_label = self.normalize_label(gold["label"])
+                    label_metrics[gold_label]["fn"] += 1
+                    total_fn += 1
+
+            # Store detailed results
+            detailed_results.append({
+                "text": text[:100] + "..." if len(text) > 100 else text,
+                "gold_count": len(gold_spans),
+                "pred_count": len(pred_spans),
+                "matches": len(matched_gold),
+                "gold_spans": gold_spans,
+                "pred_spans": pred_spans
+            })
+
+        # Calculate metrics
+        def calc_metrics(tp, fp, fn):
+            precision = tp / (tp + fp) if (tp + fp) > 0 else 0.0
+            recall = tp / (tp + fn) if (tp + fn) > 0 else 0.0
+            f1 = 2 * precision * recall / (precision + recall) if (precision + recall) > 0 else 0.0
+            return precision, recall, f1
+
+        # Global metrics
+        global_precision, global_recall, global_f1 = calc_metrics(total_tp, total_fp, total_fn)
+
+        # Per-label metrics
+        label_results = []
+        for label, counts in label_metrics.items():
+            precision, recall, f1 = calc_metrics(counts["tp"], counts["fp"], counts["fn"])
+            label_results.append({
+                "Label": label,
+                "TP": counts["tp"],
+                "FP": counts["fp"],
+                "FN": counts["fn"],
+                "Precision": precision,
+                "Recall": recall,
+                "F1": f1,
+                "Support": counts["tp"] + counts["fn"]
+            })
+
+        return {
+            "global_metrics": {
+                "precision": global_precision,
+                "recall": global_recall,
+                "f1": global_f1,
+                "total_tp": total_tp,
+                "total_fp": total_fp,
+                "total_fn": total_fn
+            },
+            "label_metrics": label_results,
+            "detailed_results": detailed_results
+        }
+
+    def compare_matching_strategies(self, ground_truth_path: str) -> pd.DataFrame:
+        """Compare different matching strategies"""
+        strategies = ["exact", "partial", "boundary_relaxed"]
+        comparison_results = []
+
+        for strategy in strategies:
+            print(f"Evaluating with {strategy} matching...")
+            results = self.evaluate_dataset(ground_truth_path, strategy)
+            comparison_results.append({
+                "Strategy": strategy,
+                "Precision": results["global_metrics"]["precision"],
+                "Recall": results["global_metrics"]["recall"],
+                "F1": results["global_metrics"]["f1"],
+                "Total_TP": results["global_metrics"]["total_tp"],
+                "Total_FP": results["global_metrics"]["total_fp"],
+                "Total_FN": results["global_metrics"]["total_fn"]
+            })
+
+        return pd.DataFrame(comparison_results)
+
+# Usage example
+def main():
+    evaluator = PiiranhaEvaluator()
+
+    # Compare different matching strategies
+    print("=== Comparing Matching Strategies ===")
+    strategy_comparison = evaluator.compare_matching_strategies("../../../data/original/ground_truth_split/test_norm.json")
+    print(strategy_comparison.to_string(index=False))
+
+    # Detailed evaluation with partial matching (recommended)
+    print("\n=== Detailed Evaluation (Partial Matching) ===")
+    results = evaluator.evaluate_dataset("../../../data/original/ground_truth_split/test_norm.json", match_type="partial")
+
+    # Global metrics
+    print(f"Global F1: {results['global_metrics']['f1']:.4f}")
+    print(f"Global Precision: {results['global_metrics']['precision']:.4f}")
+    print(f"Global Recall: {results['global_metrics']['recall']:.4f}")
+
+    # Per-label metrics
+    df = pd.DataFrame(results['label_metrics']).sort_values('F1', ascending=False)
+    print("\n=== Per-Label Results ===")
+    print(df.to_string(index=False, float_format="%.4f"))
+
+    # Error analysis
+    print("\n=== Error Analysis ===")
+    low_recall_labels = df[df['Recall'] < 0.3]['Label'].tolist()
+    high_fp_labels = df[df['FP'] > df['TP']]['Label'].tolist()
+
+    print(f"Labels with low recall (<0.3): {low_recall_labels}")
+    print(f"Labels with high FP rate: {high_fp_labels}")
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
Index: notebooks/1_data_preparation/1_groundtruth/doccano/doccano_annotations.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"metadata\": {},\n   \"cell_type\": \"code\",\n   \"outputs\": [],\n   \"execution_count\": null,\n   \"source\": \"%pip install doccano\",\n   \"id\": \"df986ebcc2085aa0\"\n  },\n  {\n   \"metadata\": {},\n   \"cell_type\": \"code\",\n   \"outputs\": [],\n   \"execution_count\": null,\n   \"source\": [\n    \"# with pyenv for instance\\n\",\n    \"%pyenv install 3.12.10\\n\",\n    \"%pyenv virtualenv 3.12.10 daia-eon\\n\",\n    \"%pyenv activate daia-eon\\n\",\n    \"%pip install --upgrade pip setuptools wheel\\n\",\n    \"%pip install doccano\"\n   ],\n   \"id\": \"2da64426b940ac4f\"\n  },\n  {\n   \"metadata\": {},\n   \"cell_type\": \"code\",\n   \"outputs\": [],\n   \"execution_count\": null,\n   \"source\": [\n    \"# Initialize database.\\n\",\n    \"doccano init\\n\",\n    \"# Create a super user.\\n\",\n    \"doccano createuser --username admin --password pass\\n\",\n    \"# Start a web server.\\n\",\n    \"doccano webserver --port 8000\"\n   ],\n   \"id\": \"f0d36329723d4ce1\"\n  }\n ],\n \"metadata\": {},\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notebooks/1_data_preparation/1_groundtruth/doccano/doccano_annotations.ipynb b/notebooks/1_data_preparation/1_groundtruth/doccano/doccano_annotations.ipynb
--- a/notebooks/1_data_preparation/1_groundtruth/doccano/doccano_annotations.ipynb	(revision 68e3fd01408523769b50e7566e6fd0db7c5afb8a)
+++ b/notebooks/1_data_preparation/1_groundtruth/doccano/doccano_annotations.ipynb	(date 1754050782159)
@@ -1,45 +1,19 @@
-{
- "cells": [
-  {
-   "metadata": {},
-   "cell_type": "code",
-   "outputs": [],
-   "execution_count": null,
-   "source": "%pip install doccano",
-   "id": "df986ebcc2085aa0"
-  },
-  {
-   "metadata": {},
-   "cell_type": "code",
-   "outputs": [],
-   "execution_count": null,
-   "source": [
-    "# with pyenv for instance\n",
-    "%pyenv install 3.12.10\n",
-    "%pyenv virtualenv 3.12.10 daia-eon\n",
-    "%pyenv activate daia-eon\n",
-    "%pip install --upgrade pip setuptools wheel\n",
-    "%pip install doccano"
-   ],
-   "id": "2da64426b940ac4f"
-  },
-  {
-   "metadata": {},
-   "cell_type": "code",
-   "outputs": [],
-   "execution_count": null,
-   "source": [
-    "# Initialize database.\n",
-    "doccano init\n",
-    "# Create a super user.\n",
-    "doccano createuser --username admin --password pass\n",
-    "# Start a web server.\n",
-    "doccano webserver --port 8000"
-   ],
-   "id": "f0d36329723d4ce1"
-  }
- ],
- "metadata": {},
- "nbformat": 4,
- "nbformat_minor": 5
-}
+#%% md
+# Doccano Setup
+Installs, initializes, creates admin, and starts the Doccano server.
+#%%
+%pip install doccano
+#%%
+# with pyenv for instance
+%pyenv install 3.12.10
+%pyenv virtualenv 3.12.10 daia-eon
+%pyenv activate daia-eon
+%pip install --upgrade pip setuptools wheel
+%pip install doccano
+#%%
+# Initialize database.
+doccano init
+# Create a super user.
+doccano createuser --username admin --password pass
+# Start a web server.
+doccano webserver --port 8000
\ No newline at end of file
Index: notebooks/1_data_preparation/1_groundtruth/doccano/convert_json_doccano.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"metadata\": {},\n   \"cell_type\": \"code\",\n   \"outputs\": [],\n   \"execution_count\": null,\n   \"source\": [\n    \"import json\\n\",\n    \"\\n\",\n    \"# Lade dein JSON-Dokument\\n\",\n    \"with open(\\\"../../../../data/original/golden_dataset_with_spans_norm.json\\\", \\\"r\\\", encoding=\\\"utf-8\\\") as f:\\n\",\n    \"    data = json.load(f)\\n\",\n    \"\\n\",\n    \"# Konvertiere ins Doccano-Format\\n\",\n    \"doccano_data = []\\n\",\n    \"for entry in data:\\n\",\n    \"    doccano_entry = {\\n\",\n    \"        \\\"text\\\": entry[\\\"text\\\"],\\n\",\n    \"        \\\"label\\\": [[label[\\\"start\\\"], label[\\\"end\\\"], label[\\\"label\\\"]] for label in entry[\\\"labels\\\"]]\\n\",\n    \"    }\\n\",\n    \"    doccano_data.append(doccano_entry)\\n\",\n    \"\\n\",\n    \"# Schreibe zeilenweise JSONL-Datei für Doccano\\n\",\n    \"with open(\\\"../../../../data/original/doccano/doccano_input.json\\\", \\\"w\\\", encoding=\\\"utf-8\\\") as f:\\n\",\n    \"    for item in doccano_data:\\n\",\n    \"        json.dump(item, f, ensure_ascii=False)\\n\",\n    \"        f.write(\\\"\\\\n\\\")\"\n   ],\n   \"id\": \"3d7fdd700dfeceda\"\n  }\n ],\n \"metadata\": {},\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notebooks/1_data_preparation/1_groundtruth/doccano/convert_json_doccano.ipynb b/notebooks/1_data_preparation/1_groundtruth/doccano/convert_json_doccano.ipynb
--- a/notebooks/1_data_preparation/1_groundtruth/doccano/convert_json_doccano.ipynb	(revision 68e3fd01408523769b50e7566e6fd0db7c5afb8a)
+++ b/notebooks/1_data_preparation/1_groundtruth/doccano/convert_json_doccano.ipynb	(date 1754050633414)
@@ -1,36 +1,24 @@
-{
- "cells": [
-  {
-   "metadata": {},
-   "cell_type": "code",
-   "outputs": [],
-   "execution_count": null,
-   "source": [
-    "import json\n",
-    "\n",
-    "# Lade dein JSON-Dokument\n",
-    "with open(\"../../../../data/original/golden_dataset_with_spans_norm.json\", \"r\", encoding=\"utf-8\") as f:\n",
-    "    data = json.load(f)\n",
-    "\n",
-    "# Konvertiere ins Doccano-Format\n",
-    "doccano_data = []\n",
-    "for entry in data:\n",
-    "    doccano_entry = {\n",
-    "        \"text\": entry[\"text\"],\n",
-    "        \"label\": [[label[\"start\"], label[\"end\"], label[\"label\"]] for label in entry[\"labels\"]]\n",
-    "    }\n",
-    "    doccano_data.append(doccano_entry)\n",
-    "\n",
-    "# Schreibe zeilenweise JSONL-Datei für Doccano\n",
-    "with open(\"../../../../data/original/doccano/doccano_input.json\", \"w\", encoding=\"utf-8\") as f:\n",
-    "    for item in doccano_data:\n",
-    "        json.dump(item, f, ensure_ascii=False)\n",
-    "        f.write(\"\\n\")"
-   ],
-   "id": "3d7fdd700dfeceda"
-  }
- ],
- "metadata": {},
- "nbformat": 4,
- "nbformat_minor": 5
-}
+#%% md
+# Convert to Doccano
+Input: JSON with spans. Output: Doccano JSONL.
+#%%
+import json
+
+# Lade dein JSON-Dokument
+with open("../../../../data/original/golden_dataset_with_spans_norm.json", "r", encoding="utf-8") as f:
+    data = json.load(f)
+
+# Konvertiere ins Doccano-Format
+doccano_data = []
+for entry in data:
+    doccano_entry = {
+        "text": entry["text"],
+        "label": [[label["start"], label["end"], label["label"]] for label in entry["labels"]]
+    }
+    doccano_data.append(doccano_entry)
+
+# Schreibe zeilenweise JSONL-Datei für Doccano
+with open("../../../../data/original/doccano/doccano_input.json", "w", encoding="utf-8") as f:
+    for item in doccano_data:
+        json.dump(item, f, ensure_ascii=False)
+        f.write("\n")
\ No newline at end of file
Index: notebooks/1_data_preparation/1_groundtruth/doccano/doccano_jsonl_to_json.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"metadata\": {},\n   \"cell_type\": \"code\",\n   \"outputs\": [],\n   \"execution_count\": null,\n   \"source\": [\n    \"import json\\n\",\n    \"\\n\",\n    \"# === Set file paths ===\\n\",\n    \"path_doccano_jsonl = \\\"../../../../data/original/doccano/doccano_groundtruth.jsonl\\\"\\n\",\n    \"path_original_json = \\\"../../../../data/original/golden_dataset_with_spans_norm.json\\\"\\n\",\n    \"output_path = \\\"../../../../data/original/ground_truth.json\\\"\\n\",\n    \"\\n\",\n    \"# === Load original JSON (with correct filenames)\\n\",\n    \"with open(path_original_json, \\\"r\\\", encoding=\\\"utf-8\\\") as f:\\n\",\n    \"    original_data = json.load(f)\\n\",\n    \"\\n\",\n    \"# === Load Doccano JSONL file\\n\",\n    \"doccano_data = []\\n\",\n    \"with open(path_doccano_jsonl, \\\"r\\\", encoding=\\\"utf-8\\\") as f:\\n\",\n    \"    for line in f:\\n\",\n    \"        doccano_data.append(json.loads(line))\\n\",\n    \"\\n\",\n    \"# === Match by order and copy filename into new format\\n\",\n    \"converted = []\\n\",\n    \"for original_entry, doc_entry in zip(original_data, doccano_data):\\n\",\n    \"    converted.append({\\n\",\n    \"        \\\"file\\\": original_entry[\\\"file\\\"],  # Use filename from original\\n\",\n    \"        \\\"text\\\": doc_entry[\\\"text\\\"],\\n\",\n    \"        \\\"labels\\\": [\\n\",\n    \"            {\\\"start\\\": start, \\\"end\\\": end, \\\"label\\\": label}\\n\",\n    \"            for start, end, label in doc_entry.get(\\\"label\\\", [])\\n\",\n    \"        ]\\n\",\n    \"    })\\n\",\n    \"\\n\",\n    \"# === Write to new JSON file\\n\",\n    \"with open(output_path, \\\"w\\\", encoding=\\\"utf-8\\\") as f:\\n\",\n    \"    json.dump(converted, f, ensure_ascii=False, indent=2)\\n\",\n    \"\\n\",\n    \"print(f\\\"✅ Conversion complete. Output saved to: {output_path}\\\")\"\n   ],\n   \"id\": \"a4149196295d41da\"\n  }\n ],\n \"metadata\": {},\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notebooks/1_data_preparation/1_groundtruth/doccano/doccano_jsonl_to_json.ipynb b/notebooks/1_data_preparation/1_groundtruth/doccano/doccano_jsonl_to_json.ipynb
--- a/notebooks/1_data_preparation/1_groundtruth/doccano/doccano_jsonl_to_json.ipynb	(revision 68e3fd01408523769b50e7566e6fd0db7c5afb8a)
+++ b/notebooks/1_data_preparation/1_groundtruth/doccano/doccano_jsonl_to_json.ipynb	(date 1754050861904)
@@ -1,50 +1,38 @@
-{
- "cells": [
-  {
-   "metadata": {},
-   "cell_type": "code",
-   "outputs": [],
-   "execution_count": null,
-   "source": [
-    "import json\n",
-    "\n",
-    "# === Set file paths ===\n",
-    "path_doccano_jsonl = \"../../../../data/original/doccano/doccano_groundtruth.jsonl\"\n",
-    "path_original_json = \"../../../../data/original/golden_dataset_with_spans_norm.json\"\n",
-    "output_path = \"../../../../data/original/ground_truth.json\"\n",
-    "\n",
-    "# === Load original JSON (with correct filenames)\n",
-    "with open(path_original_json, \"r\", encoding=\"utf-8\") as f:\n",
-    "    original_data = json.load(f)\n",
-    "\n",
-    "# === Load Doccano JSONL file\n",
-    "doccano_data = []\n",
-    "with open(path_doccano_jsonl, \"r\", encoding=\"utf-8\") as f:\n",
-    "    for line in f:\n",
-    "        doccano_data.append(json.loads(line))\n",
-    "\n",
-    "# === Match by order and copy filename into new format\n",
-    "converted = []\n",
-    "for original_entry, doc_entry in zip(original_data, doccano_data):\n",
-    "    converted.append({\n",
-    "        \"file\": original_entry[\"file\"],  # Use filename from original\n",
-    "        \"text\": doc_entry[\"text\"],\n",
-    "        \"labels\": [\n",
-    "            {\"start\": start, \"end\": end, \"label\": label}\n",
-    "            for start, end, label in doc_entry.get(\"label\", [])\n",
-    "        ]\n",
-    "    })\n",
-    "\n",
-    "# === Write to new JSON file\n",
-    "with open(output_path, \"w\", encoding=\"utf-8\") as f:\n",
-    "    json.dump(converted, f, ensure_ascii=False, indent=2)\n",
-    "\n",
-    "print(f\"✅ Conversion complete. Output saved to: {output_path}\")"
-   ],
-   "id": "a4149196295d41da"
-  }
- ],
- "metadata": {},
- "nbformat": 4,
- "nbformat_minor": 5
-}
+#%% md
+# Doccano JSONL to JSON
+Combine original filenames with Doccano annotations into normalized ground truth JSON.
+#%%
+import json
+
+# === Set file paths ===
+path_doccano_jsonl = "../../../../data/original/doccano/doccano_groundtruth.jsonl"
+path_original_json = "../../../../data/original/golden_dataset_with_spans_norm.json"
+output_path = "../../../../data/original/ground_truth.json"
+
+# === Load original JSON (with correct filenames)
+with open(path_original_json, "r", encoding="utf-8") as f:
+    original_data = json.load(f)
+
+# === Load Doccano JSONL file
+doccano_data = []
+with open(path_doccano_jsonl, "r", encoding="utf-8") as f:
+    for line in f:
+        doccano_data.append(json.loads(line))
+
+# === Match by order and copy filename into new format
+converted = []
+for original_entry, doc_entry in zip(original_data, doccano_data):
+    converted.append({
+        "file": original_entry["file"],  # Use filename from original
+        "text": doc_entry["text"],
+        "labels": [
+            {"start": start, "end": end, "label": label}
+            for start, end, label in doc_entry.get("label", [])
+        ]
+    })
+
+# === Write to new JSON file
+with open(output_path, "w", encoding="utf-8") as f:
+    json.dump(converted, f, ensure_ascii=False, indent=2)
+
+print(f"✅ Conversion complete. Output saved to: {output_path}")
\ No newline at end of file
Index: notebooks/3_model_training_and_testing/gemini_oneshot/spans/anonymization_metrics.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notebooks/3_model_training_and_testing/gemini_oneshot/spans/anonymization_metrics.py b/notebooks/3_model_training_and_testing/gemini_oneshot/spans/anonymization_metrics.py
new file mode 100644
--- /dev/null	(date 1753962282724)
+++ b/notebooks/3_model_training_and_testing/gemini_oneshot/spans/anonymization_metrics.py	(date 1753962282724)
@@ -0,0 +1,311 @@
+#!/usr/bin/env python3
+"""
+anonymization_metrics_final.py
+
+Improved anonymization evaluation combining:
+  * Label-level (bag-of-labels) comparison.
+  * Span-level greedy maximum-overlap matching (per-label) with strict
+    and relaxed thresholds.
+  * Overlap-weighted precision/recall to give partial credit for boundary fuzziness.
+
+"""
+from __future__ import annotations
+import json
+import re
+from pathlib import Path
+from collections import Counter, defaultdict
+from typing import Tuple, Set, Dict, List, Optional
+
+# ---------------- CONFIG (edit if needed) ----------------
+GROUND_TRUTH_PATH = Path("../../../../data/original/ground_truth_split/test_norm.json")
+ANONYMIZED_PATH = Path("../../../../data/testing/gemini_results/combined_results.json")
+
+STRICT_THRESHOLD = 1.0   # exact match
+RELAXED_THRESHOLD = 0.5  # allow partial overlap
+PRINT_PER_FILE = True
+
+# ---------------- TYPES -------------------------------
+Span = Tuple[int, int, str]  # (start_char, end_char, label)
+SpanSet = Set[Span]
+
+PLACEHOLDER_RE = re.compile(r"<<([A-Z_]+)>>")
+
+# ------------------ IO -------------------------------
+def load_ground_truth(path: Path) -> Dict[str, Tuple[str, SpanSet]]:
+    raw = json.loads(path.read_text(encoding="utf-8"))
+    mapping: Dict[str, Tuple[str, SpanSet]] = {}
+    for item in raw:
+        txt = item["text"]
+        spans: SpanSet = {(lbl["start"], lbl["end"], lbl["label"]) for lbl in item["labels"]}
+        mapping[item["file"]] = (txt, spans)
+    return mapping
+
+def load_anonymized(path: Path) -> Dict[str, str]:
+    raw = json.loads(path.read_text(encoding="utf-8"))
+    return {item["file"]: item["anonymized_text"] for item in raw}
+
+# ------------------ Label-level evaluation -------------
+def label_level_counts(gold: SpanSet, anonymized_text: str) -> Tuple[Dict[str, int], Dict[str, int], Dict[str, int]]:
+    gold_counter = Counter([lbl for (_, _, lbl) in gold])
+    pred_counter = Counter(re.findall(r"<<([A-Z_]+)>>", anonymized_text))
+    labels = set(gold_counter) | set(pred_counter)
+    tp = {}
+    fp = {}
+    fn = {}
+    for label in labels:
+        g = gold_counter.get(label, 0)
+        p = pred_counter.get(label, 0)
+        tp[label] = min(p, g)
+        fp[label] = max(0, p - g)
+        fn[label] = max(0, g - p)
+    return tp, fp, fn
+
+# ------------------ Span utilities --------------------
+def jaccard(a: Tuple[int, int], b: Tuple[int, int]) -> float:
+    s1, e1 = a
+    s2, e2 = b
+    inter = max(0, min(e1, e2) - max(s1, s2))
+    union = max(e1, e2) - min(s1, s2)
+    return inter / union if union else 0.0
+
+def span_length(span: Tuple[int, int]) -> int:
+    return max(0, span[1] - span[0])
+
+# ------------------ Span prediction (simple baseline) --
+def extract_placeholders_via_diff(original: str, anonymized: str) -> SpanSet:
+    """
+    Fallback: use difflib.SequenceMatcher on character sequences.
+    For every replace block where anonymized part is exactly one placeholder,
+    assume that replaced original span is the gold-to-pred prediction.
+    """
+    import difflib
+    sm = difflib.SequenceMatcher(None, original, anonymized)
+    preds: SpanSet = set()
+    for tag, i1, i2, j1, j2 in sm.get_opcodes():
+        if tag != "replace":
+            continue
+        chunk = anonymized[j1:j2].strip()
+        m = PLACEHOLDER_RE.fullmatch(chunk)
+        if m:
+            preds.add((i1, i2, m.group(1)))
+    return preds
+
+# Optional: could add more sophisticated extraction (token-alignment or context-based)
+# For brevity we combine simple diff-based with a fallback of scanning anonymized text
+def extract_predicted_spans(original: str, anonymized: str) -> SpanSet:
+    """
+    Combine:
+      - direct diff-based placeholder replacement extraction
+      - naive scan: for each placeholder label, try to find its rough region via context window
+    """
+    preds = extract_placeholders_via_diff(original, anonymized)
+    # Additional heuristic: if label appears and we didn't get a span, try fuzzy locate using context around placeholder
+    # (Not implemented fully here to keep deterministic; could be added as future extension)
+    return preds
+
+# ------------------ Span-level greedy matching -----------
+def match_spans_greedy(pred: SpanSet, gold: SpanSet, threshold: float
+                      ) -> Tuple[int, int, int, Dict[str, Counter], float, float]:
+    """
+    Greedy maximum-overlap matching per label:
+      - Collect all candidate pred-gold pairs with jaccard >= 0 (we score later).
+      - For each label, sort pairs by descending overlap and pick non-conflicting matches.
+      Returns:
+        tp, fp, fn (binary counts),
+        by_label counters,
+        overlap_precision, overlap_recall (weighted by actual overlap lengths)
+    """
+    matched_gold: Set[Span] = set()
+    matched_pred: Set[Span] = set()
+    by_label: Dict[str, Counter] = defaultdict(Counter)
+
+    # Prepare candidate list per label: (pred, gold, overlap)
+    candidates: List[Tuple[Span, Span, float]] = []
+    for p in pred:
+        for g in gold:
+            if p[2] != g[2]:
+                continue
+            ov = jaccard((p[0], p[1]), (g[0], g[1]))
+            if ov >= threshold * 1e-9:  # include even zero if threshold=0, but threshold applied later
+                candidates.append((p, g, ov))
+
+    # Sort by descending overlap
+    candidates.sort(key=lambda x: x[2], reverse=True)
+
+    # Greedily pick matches without reuse
+    total_overlap = 0.0
+    for p, g, ov in candidates:
+        if ov < threshold:
+            continue
+        if p in matched_pred or g in matched_gold:
+            continue
+        matched_pred.add(p)
+        matched_gold.add(g)
+        total_overlap += ov * max(span_length((p[0], p[1])), span_length((g[0], g[1])))  # approximate actual covered
+        by_label[p[2]]["tp"] += 1
+
+    # Count FP and FN per label
+    for p in pred:
+        if p not in matched_pred:
+            by_label[p[2]]["fp"] += 1
+    for g in gold:
+        if g not in matched_gold:
+            by_label[g[2]]["fn"] += 1
+
+    tp = sum(by_label[l]["tp"] for l in by_label)
+    fp = sum(by_label[l]["fp"] for l in by_label)
+    fn = sum(by_label[l]["fn"] for l in by_label)
+
+    # Overlap-weighted precision/recall (soft credit):
+    # Compute actual total overlap length for matched pairs more precisely:
+    overlap_len = 0
+    for p in matched_pred:
+        for g in matched_gold:
+            if p[2] != g[2]:
+                continue
+            # only count matched pairs once
+    # Instead, recompute overlap sum from matched pairs stored via by_label (we don't have pair linkage here)
+    # Simplify: approximate by summing jaccard * gold_length over matched_gold
+    overlap_sum = 0.0
+    gold_total_len = 0.0
+    pred_total_len = 0.0
+    # Build reverse mapping of matched gold to predicted to approximate
+    for g in gold:
+        gold_total_len += span_length((g[0], g[1]))
+    for p in pred:
+        pred_total_len += span_length((p[0], p[1]))
+    # For overlap_sum, rebuild matches using the same greedy selection to capture pair overlaps exactly
+    # We'll redo a local matched pair list with the same logic to capture overlap lengths
+    matched_pairs: List[Tuple[Span, Span, float]] = []
+    taken_p = set()
+    taken_g = set()
+    for p, g, ov in candidates:
+        if ov < threshold:
+            continue
+        if p in taken_p or g in taken_g:
+            continue
+        if p[2] != g[2]:
+            continue
+        # we already checked ov descending and label same
+        taken_p.add(p)
+        taken_g.add(g)
+        matched_pairs.append((p, g, ov))
+    # Sum real overlap lengths: intersection length
+    real_overlap = 0
+    for p, g, ov in matched_pairs:
+        inter = max(0, min(p[1], g[1]) - max(p[0], g[0]))
+        real_overlap += inter
+    overlap_precision = real_overlap / pred_total_len if pred_total_len else 0.0
+    overlap_recall = real_overlap / gold_total_len if gold_total_len else 0.0
+
+    return tp, fp, fn, by_label, overlap_precision, overlap_recall
+
+def prf(tp: int, fp: int, fn: int) -> Tuple[float, float, float]:
+    precision = tp / (tp + fp) if tp + fp else 0.0
+    recall = tp / (tp + fn) if tp + fn else 0.0
+    f1 = 2 * precision * recall / (precision + recall) if (precision + recall) else 0.0
+    return precision, recall, f1
+
+# ------------------ Reporting --------------------------
+def report(per_file: List[Dict]) -> None:
+    # aggregate
+    agg_label = defaultdict(Counter)
+    agg_strict = Counter()
+    agg_relaxed = Counter()
+    agg_overlap_prec = 0.0
+    agg_overlap_rec = 0.0
+    file_count = len(per_file)
+
+    for entry in per_file:
+        fname = entry["file"]
+        if PRINT_PER_FILE:
+            print(f"\n===== File: {fname} =====")
+        # Label-level
+        tp_l, fp_l, fn_l = entry["label_level"]
+        if PRINT_PER_FILE:
+            print("Label-level (micro) per label:")
+            for lbl in sorted(set(tp_l) | set(fp_l) | set(fn_l)):
+                p_l = tp_l[lbl] / (tp_l[lbl] + fp_l[lbl]) if tp_l[lbl] + fp_l[lbl] else 0.0
+                r_l = tp_l[lbl] / (tp_l[lbl] + fn_l[lbl]) if tp_l[lbl] + fn_l[lbl] else 0.0
+                f_l = 2 * p_l * r_l / (p_l + r_l) if (p_l + r_l) else 0.0
+                print(f"  {lbl:<20} P={p_l:.3f} R={r_l:.3f} F1={f_l:.3f} (TP={tp_l[lbl]} FP={fp_l[lbl]} FN={fn_l[lbl]})")
+                agg_label[lbl].update({"tp": tp_l[lbl], "fp": fp_l[lbl], "fn": fn_l[lbl]})
+        # Span-level strict
+        tp_s, fp_s, fn_s = entry["span_strict"][:3]
+        p_s, r_s, f1_s = prf(tp_s, fp_s, fn_s)
+        ovp_s, ovr_s = entry["span_strict"][4], entry["span_strict"][5]
+        if PRINT_PER_FILE:
+            print(f"Span-level strict   : P={p_s:.3f} R={r_s:.3f} F1={f1_s:.3f} "
+                  f"(TP={tp_s} FP={fp_s} FN={fn_s})")
+            print(f"  Overlap-weighted: P={ovp_s:.3f} R={ovr_s:.3f}")
+        agg_strict.update({"tp": tp_s, "fp": fp_s, "fn": fn_s})
+
+        # Span-level relaxed
+        tp_r, fp_r, fn_r = entry["span_relaxed"][:3]
+        p_r, r_r, f1_r = prf(tp_r, fp_r, fn_r)
+        ovp_r, ovr_r = entry["span_relaxed"][4], entry["span_relaxed"][5]
+        if PRINT_PER_FILE:
+            print(f"Span-level relaxed  : P={p_r:.3f} R={r_r:.3f} F1={f1_r:.3f} "
+                  f"(TP={tp_r} FP={fp_r} FN={fn_r})")
+            print(f"  Overlap-weighted: P={ovp_r:.3f} R={ovr_r:.3f}")
+        agg_relaxed.update({"tp": tp_r, "fp": fp_r, "fn": fn_r})
+
+    # Summary
+    print("\n=== AGGREGATE SUMMARY ===")
+    # Label-level micro
+    total_tp = sum(agg_label[l]["tp"] for l in agg_label)
+    total_fp = sum(agg_label[l]["fp"] for l in agg_label)
+    total_fn = sum(agg_label[l]["fn"] for l in agg_label)
+    p_l, r_l, f_l = prf(total_tp, total_fp, total_fn)
+    print(f"-> Label-level (micro): P={p_l:.3f} R={r_l:.3f} F1={f_l:.3f} (TP={total_tp} FP={total_fp} FN={total_fn})")
+
+    # Span strict
+    p_s, r_s, f1_s = prf(agg_strict["tp"], agg_strict["fp"], agg_strict["fn"])
+    print(f"\n-> Span-level strict : P={p_s:.3f} R={r_s:.3f} F1={f1_s:.3f} "
+          f"(TP={agg_strict['tp']} FP={agg_strict['fp']} FN={agg_strict['fn']})")
+
+    # Span relaxed
+    p_r, r_r, f1_r = prf(agg_relaxed["tp"], agg_relaxed["fp"], agg_relaxed["fn"])
+    print(f"-> Span-level relaxed: P={p_r:.3f} R={r_r:.3f} F1={f1_r:.3f} "
+          f"(TP={agg_relaxed['tp']} FP={agg_relaxed['fp']} FN={agg_relaxed['fn']})")
+
+# ------------------ Main ------------------------------
+def main() -> None:
+    if not GROUND_TRUTH_PATH.exists():
+        raise FileNotFoundError(f"Ground truth file not found: {GROUND_TRUTH_PATH}")
+    if not ANONYMIZED_PATH.exists():
+        raise FileNotFoundError(f"Anonymized file not found: {ANONYMIZED_PATH}")
+
+    gt_map = load_ground_truth(GROUND_TRUTH_PATH)
+    anon_map = load_anonymized(ANONYMIZED_PATH)
+    common_files = sorted(set(gt_map.keys()) & set(anon_map.keys()))
+    if not common_files:
+        raise RuntimeError("No overlapping file names between ground truth and anonymized JSON.")
+
+    results = []
+    for fname in common_files:
+        original_text, gold_spans = gt_map[fname]
+        anonymized_text = anon_map[fname]
+
+        # label-level
+        tp_l, fp_l, fn_l = label_level_counts(gold_spans, anonymized_text)
+
+        # predicted spans (you can swap in a better extractor here)
+        pred_spans = extract_predicted_spans(original_text, anonymized_text)
+
+        # span-level strict
+        strict_metrics = match_spans_greedy(pred_spans, gold_spans, STRICT_THRESHOLD)
+        # span-level relaxed
+        relaxed_metrics = match_spans_greedy(pred_spans, gold_spans, RELAXED_THRESHOLD)
+
+        results.append({
+            "file": fname,
+            "label_level": (tp_l, fp_l, fn_l),
+            "span_strict": strict_metrics,   # tp,fp,fn,by_label,overlapP,overlapR
+            "span_relaxed": relaxed_metrics, # same tuple
+        })
+
+    report(results)
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
Index: notebooks/1_data_preparation/1_groundtruth/doccano/doccano_label_review.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"metadata\": {},\n   \"cell_type\": \"code\",\n   \"outputs\": [],\n   \"execution_count\": null,\n   \"source\": [\n    \"import json\\n\",\n    \"from collections import namedtuple\\n\",\n    \"\\n\",\n    \"# === File paths ===\\n\",\n    \"path_original = \\\"../../../../data/original/golden_dataset_with_spans_norm.json\\\"\\n\",\n    \"path_reviewed = \\\"../../../../data/original/ground_truth.json\\\"\\n\",\n    \"\\n\",\n    \"# === Helper to detect overlapping spans in one file ===\\n\",\n    \"def find_overlaps(labels):\\n\",\n    \"    overlaps = []\\n\",\n    \"    # sort by start index\\n\",\n    \"    sorted_lbls = sorted(labels, key=lambda x: x[\\\"start\\\"])\\n\",\n    \"    for a, b in zip(sorted_lbls, sorted_lbls[1:]):\\n\",\n    \"        if a[\\\"end\\\"] > b[\\\"start\\\"]:\\n\",\n    \"            overlaps.append((a, b))\\n\",\n    \"    return overlaps\\n\",\n    \"\\n\",\n    \"# === Load both datasets ===\\n\",\n    \"with open(path_original, \\\"r\\\", encoding=\\\"utf-8\\\") as f:\\n\",\n    \"    orig_data = json.load(f)\\n\",\n    \"\\n\",\n    \"with open(path_reviewed, \\\"r\\\", encoding=\\\"utf-8\\\") as f:\\n\",\n    \"    rev_data = json.load(f)\\n\",\n    \"\\n\",\n    \"# === Compare label sets per file ===\\n\",\n    \"Diff = namedtuple(\\\"Diff\\\", [\\\"file\\\", \\\"orig_labels\\\", \\\"rev_labels\\\"])\\n\",\n    \"diffs = []\\n\",\n    \"for o, r in zip(orig_data, rev_data):\\n\",\n    \"    # assume same order / same filenames\\n\",\n    \"    if o[\\\"labels\\\"] != r[\\\"labels\\\"]:\\n\",\n    \"        diffs.append(Diff(o[\\\"file\\\"], o[\\\"labels\\\"], r[\\\"labels\\\"]))\\n\",\n    \"\\n\",\n    \"# === Count overlapping spans in each dataset ===\\n\",\n    \"orig_overlaps_per_file = {e[\\\"file\\\"]: find_overlaps(e[\\\"labels\\\"]) for e in orig_data}\\n\",\n    \"rev_overlaps_per_file  = {e[\\\"file\\\"]: find_overlaps(e[\\\"labels\\\"]) for e in rev_data}\\n\",\n    \"\\n\",\n    \"# Summary numbers\\n\",\n    \"num_changed_txts = len(diffs)\\n\",\n    \"total_orig_overlaps = sum(len(v) for v in orig_overlaps_per_file.values())\\n\",\n    \"total_rev_overlaps  = sum(len(v) for v in rev_overlaps_per_file .values())\\n\",\n    \"files_with_orig_overlaps = sum(1 for v in orig_overlaps_per_file.values() if v)\\n\",\n    \"files_with_rev_overlaps  = sum(1 for v in rev_overlaps_per_file .values() if v)\\n\",\n    \"\\n\",\n    \"# === 1. How many txts are now different? ===\\n\",\n    \"print(f\\\"1) Number of text files with changed labels: {num_changed_txts}\\\\n\\\")\\n\",\n    \"\\n\",\n    \"# === 2. List those txts with labels before and after review ===\\n\",\n    \"print(\\\"2) Changed files and their label counts:\\\")\\n\",\n    \"for d in diffs:\\n\",\n    \"    print(f\\\" - {d.file}: before={len(d.orig_labels)} labels, after={len(d.rev_labels)} labels\\\")\\n\",\n    \"print()\\n\",\n    \"\\n\",\n    \"# === 3. Count of overlapping spans in both versions ===\\n\",\n    \"print(\\\"3) Overlapping spans summary:\\\")\\n\",\n    \"print(f\\\"   • Original JSON: {total_orig_overlaps} overlaps across {files_with_orig_overlaps} files\\\")\\n\",\n    \"print(f\\\"   • Reviewed JSON: {total_rev_overlaps} overlaps across {files_with_rev_overlaps} files\\\\n\\\")\\n\",\n    \"\\n\",\n    \"# === 4. Details on changes + overlaps in reviewed ===\\n\",\n    \"print(\\\"4) Detail per changed file:\\\")\\n\",\n    \"for d in diffs:\\n\",\n    \"    print(f\\\"\\\\n-- {d.file} --\\\")\\n\",\n    \"    # show which spans were added or removed\\n\",\n    \"    set_orig = set((lbl[\\\"start\\\"], lbl[\\\"end\\\"], lbl[\\\"label\\\"]) for lbl in d.orig_labels)\\n\",\n    \"    set_rev  = set((lbl[\\\"start\\\"], lbl[\\\"end\\\"], lbl[\\\"label\\\"]) for lbl in d.rev_labels)\\n\",\n    \"    added   = set_rev - set_orig\\n\",\n    \"    removed = set_orig - set_rev\\n\",\n    \"\\n\",\n    \"    if added:\\n\",\n    \"        print(\\\"   Added labels/spans:\\\")\\n\",\n    \"        for s,e,l in sorted(added):\\n\",\n    \"            print(f\\\"     + [{s},{e}] “{l}”\\\")\\n\",\n    \"    if removed:\\n\",\n    \"        print(\\\"   Removed labels/spans:\\\")\\n\",\n    \"        for s,e,l in sorted(removed):\\n\",\n    \"            print(f\\\"     - [{s},{e}] “{l}”\\\")\\n\",\n    \"    if not added and not removed:\\n\",\n    \"        print(\\\"   (Labels changed, but same spans; maybe only label names differed.)\\\")\\n\",\n    \"\\n\",\n    \"    # show overlapping spans in the reviewed version\\n\",\n    \"    overlaps = rev_overlaps_per_file[d.file]\\n\",\n    \"    if overlaps:\\n\",\n    \"        print(\\\"   Overlaps in reviewed file:\\\")\\n\",\n    \"        for a,b in overlaps:\\n\",\n    \"            print(f\\\"     • {a} overlaps with {b}\\\")\\n\",\n    \"    else:\\n\",\n    \"        print(\\\"   No overlaps in reviewed file.\\\")\"\n   ],\n   \"id\": \"764ea556235f4267\"\n  }\n ],\n \"metadata\": {},\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notebooks/1_data_preparation/1_groundtruth/doccano/doccano_label_review.ipynb b/notebooks/1_data_preparation/1_groundtruth/doccano/doccano_label_review.ipynb
--- a/notebooks/1_data_preparation/1_groundtruth/doccano/doccano_label_review.ipynb	(revision 68e3fd01408523769b50e7566e6fd0db7c5afb8a)
+++ b/notebooks/1_data_preparation/1_groundtruth/doccano/doccano_label_review.ipynb	(date 1754050997397)
@@ -1,102 +1,90 @@
-{
- "cells": [
-  {
-   "metadata": {},
-   "cell_type": "code",
-   "outputs": [],
-   "execution_count": null,
-   "source": [
-    "import json\n",
-    "from collections import namedtuple\n",
-    "\n",
-    "# === File paths ===\n",
-    "path_original = \"../../../../data/original/golden_dataset_with_spans_norm.json\"\n",
-    "path_reviewed = \"../../../../data/original/ground_truth.json\"\n",
-    "\n",
-    "# === Helper to detect overlapping spans in one file ===\n",
-    "def find_overlaps(labels):\n",
-    "    overlaps = []\n",
-    "    # sort by start index\n",
-    "    sorted_lbls = sorted(labels, key=lambda x: x[\"start\"])\n",
-    "    for a, b in zip(sorted_lbls, sorted_lbls[1:]):\n",
-    "        if a[\"end\"] > b[\"start\"]:\n",
-    "            overlaps.append((a, b))\n",
-    "    return overlaps\n",
-    "\n",
-    "# === Load both datasets ===\n",
-    "with open(path_original, \"r\", encoding=\"utf-8\") as f:\n",
-    "    orig_data = json.load(f)\n",
-    "\n",
-    "with open(path_reviewed, \"r\", encoding=\"utf-8\") as f:\n",
-    "    rev_data = json.load(f)\n",
-    "\n",
-    "# === Compare label sets per file ===\n",
-    "Diff = namedtuple(\"Diff\", [\"file\", \"orig_labels\", \"rev_labels\"])\n",
-    "diffs = []\n",
-    "for o, r in zip(orig_data, rev_data):\n",
-    "    # assume same order / same filenames\n",
-    "    if o[\"labels\"] != r[\"labels\"]:\n",
-    "        diffs.append(Diff(o[\"file\"], o[\"labels\"], r[\"labels\"]))\n",
-    "\n",
-    "# === Count overlapping spans in each dataset ===\n",
-    "orig_overlaps_per_file = {e[\"file\"]: find_overlaps(e[\"labels\"]) for e in orig_data}\n",
-    "rev_overlaps_per_file  = {e[\"file\"]: find_overlaps(e[\"labels\"]) for e in rev_data}\n",
-    "\n",
-    "# Summary numbers\n",
-    "num_changed_txts = len(diffs)\n",
-    "total_orig_overlaps = sum(len(v) for v in orig_overlaps_per_file.values())\n",
-    "total_rev_overlaps  = sum(len(v) for v in rev_overlaps_per_file .values())\n",
-    "files_with_orig_overlaps = sum(1 for v in orig_overlaps_per_file.values() if v)\n",
-    "files_with_rev_overlaps  = sum(1 for v in rev_overlaps_per_file .values() if v)\n",
-    "\n",
-    "# === 1. How many txts are now different? ===\n",
-    "print(f\"1) Number of text files with changed labels: {num_changed_txts}\\n\")\n",
-    "\n",
-    "# === 2. List those txts with labels before and after review ===\n",
-    "print(\"2) Changed files and their label counts:\")\n",
-    "for d in diffs:\n",
-    "    print(f\" - {d.file}: before={len(d.orig_labels)} labels, after={len(d.rev_labels)} labels\")\n",
-    "print()\n",
-    "\n",
-    "# === 3. Count of overlapping spans in both versions ===\n",
-    "print(\"3) Overlapping spans summary:\")\n",
-    "print(f\"   • Original JSON: {total_orig_overlaps} overlaps across {files_with_orig_overlaps} files\")\n",
-    "print(f\"   • Reviewed JSON: {total_rev_overlaps} overlaps across {files_with_rev_overlaps} files\\n\")\n",
-    "\n",
-    "# === 4. Details on changes + overlaps in reviewed ===\n",
-    "print(\"4) Detail per changed file:\")\n",
-    "for d in diffs:\n",
-    "    print(f\"\\n-- {d.file} --\")\n",
-    "    # show which spans were added or removed\n",
-    "    set_orig = set((lbl[\"start\"], lbl[\"end\"], lbl[\"label\"]) for lbl in d.orig_labels)\n",
-    "    set_rev  = set((lbl[\"start\"], lbl[\"end\"], lbl[\"label\"]) for lbl in d.rev_labels)\n",
-    "    added   = set_rev - set_orig\n",
-    "    removed = set_orig - set_rev\n",
-    "\n",
-    "    if added:\n",
-    "        print(\"   Added labels/spans:\")\n",
-    "        for s,e,l in sorted(added):\n",
-    "            print(f\"     + [{s},{e}] “{l}”\")\n",
-    "    if removed:\n",
-    "        print(\"   Removed labels/spans:\")\n",
-    "        for s,e,l in sorted(removed):\n",
-    "            print(f\"     - [{s},{e}] “{l}”\")\n",
-    "    if not added and not removed:\n",
-    "        print(\"   (Labels changed, but same spans; maybe only label names differed.)\")\n",
-    "\n",
-    "    # show overlapping spans in the reviewed version\n",
-    "    overlaps = rev_overlaps_per_file[d.file]\n",
-    "    if overlaps:\n",
-    "        print(\"   Overlaps in reviewed file:\")\n",
-    "        for a,b in overlaps:\n",
-    "            print(f\"     • {a} overlaps with {b}\")\n",
-    "    else:\n",
-    "        print(\"   No overlaps in reviewed file.\")"
-   ],
-   "id": "764ea556235f4267"
-  }
- ],
- "metadata": {},
- "nbformat": 4,
- "nbformat_minor": 5
-}
+#%% md
+# Label Review
+Compare original vs reviewed labels; show diffs and overlapping spans.
+#%%
+import json
+from collections import namedtuple
+
+# === File paths ===
+path_original = "../../../../data/original/golden_dataset_with_spans_norm.json"
+path_reviewed = "../../../../data/original/ground_truth.json"
+
+# === Helper to detect overlapping spans in one file ===
+def find_overlaps(labels):
+    overlaps = []
+    # sort by start index
+    sorted_lbls = sorted(labels, key=lambda x: x["start"])
+    for a, b in zip(sorted_lbls, sorted_lbls[1:]):
+        if a["end"] > b["start"]:
+            overlaps.append((a, b))
+    return overlaps
+
+# === Load both datasets ===
+with open(path_original, "r", encoding="utf-8") as f:
+    orig_data = json.load(f)
+
+with open(path_reviewed, "r", encoding="utf-8") as f:
+    rev_data = json.load(f)
+
+# === Compare label sets per file ===
+Diff = namedtuple("Diff", ["file", "orig_labels", "rev_labels"])
+diffs = []
+for o, r in zip(orig_data, rev_data):
+    # assume same order / same filenames
+    if o["labels"] != r["labels"]:
+        diffs.append(Diff(o["file"], o["labels"], r["labels"]))
+
+# === Count overlapping spans in each dataset ===
+orig_overlaps_per_file = {e["file"]: find_overlaps(e["labels"]) for e in orig_data}
+rev_overlaps_per_file  = {e["file"]: find_overlaps(e["labels"]) for e in rev_data}
+
+# Summary numbers
+num_changed_txts = len(diffs)
+total_orig_overlaps = sum(len(v) for v in orig_overlaps_per_file.values())
+total_rev_overlaps  = sum(len(v) for v in rev_overlaps_per_file .values())
+files_with_orig_overlaps = sum(1 for v in orig_overlaps_per_file.values() if v)
+files_with_rev_overlaps  = sum(1 for v in rev_overlaps_per_file .values() if v)
+
+# === 1. How many txts are now different? ===
+print(f"1) Number of text files with changed labels: {num_changed_txts}\n")
+
+# === 2. List those txts with labels before and after review ===
+print("2) Changed files and their label counts:")
+for d in diffs:
+    print(f" - {d.file}: before={len(d.orig_labels)} labels, after={len(d.rev_labels)} labels")
+print()
+
+# === 3. Count of overlapping spans in both versions ===
+print("3) Overlapping spans summary:")
+print(f"   • Original JSON: {total_orig_overlaps} overlaps across {files_with_orig_overlaps} files")
+print(f"   • Reviewed JSON: {total_rev_overlaps} overlaps across {files_with_rev_overlaps} files\n")
+
+# === 4. Details on changes + overlaps in reviewed ===
+print("4) Detail per changed file:")
+for d in diffs:
+    print(f"\n-- {d.file} --")
+    # show which spans were added or removed
+    set_orig = set((lbl["start"], lbl["end"], lbl["label"]) for lbl in d.orig_labels)
+    set_rev  = set((lbl["start"], lbl["end"], lbl["label"]) for lbl in d.rev_labels)
+    added   = set_rev - set_orig
+    removed = set_orig - set_rev
+
+    if added:
+        print("   Added labels/spans:")
+        for s,e,l in sorted(added):
+            print(f"     + [{s},{e}] “{l}”")
+    if removed:
+        print("   Removed labels/spans:")
+        for s,e,l in sorted(removed):
+            print(f"     - [{s},{e}] “{l}”")
+    if not added and not removed:
+        print("   (Labels changed, but same spans; maybe only label names differed.)")
+
+    # show overlapping spans in the reviewed version
+    overlaps = rev_overlaps_per_file[d.file]
+    if overlaps:
+        print("   Overlaps in reviewed file:")
+        for a,b in overlaps:
+            print(f"     • {a} overlaps with {b}")
+    else:
+        print("   No overlaps in reviewed file.")
\ No newline at end of file
Index: notebooks/3_model_training_and_testing/gemini_oneshot/gemini_anonymizer_spans.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#!/usr/bin/env python3\n\"\"\"\nGemini Email PII Detection Pipeline\n\nA Python pipeline that uses the Google Gemini API to detect sensitive entities\nin German email texts using 21 custom labels, in parallel, then writes all\nresults into a single combined JSON file with span information.\n\"\"\"\n\nimport os\nimport sys\nimport json\nimport re\nimport getpass\nimport logging\nfrom dataclasses import dataclass\nfrom pathlib import Path\nfrom typing import List, Dict\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nimport google.generativeai as genai\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(levelname)s - %(message)s\"\n)\nlogger = logging.getLogger(__name__)\n\n\nclass GeminiDetector:\n    \"\"\"Main class for handling Gemini API-based PII detection.\"\"\"\n    TARGET_LABELS = [\n        'NACHNAME', 'VORNAME', 'STRASSE', 'POSTLEITZAHL', 'WOHNORT',\n        'HAUSNUMMER', 'VERTRAGSNUMMER', 'DATUM', 'ZÄHLERNUMMER',\n        'TELEFONNUMMER', 'GESENDET_MIT', 'ZAHLUNG', 'FIRMA', 'TITEL',\n        'EMAIL', 'ZÄHLERSTAND', 'LINK', 'IBAN', 'BANK', 'BIC', 'FAX'\n    ]\n\n    def __init__(self, api_key: str, model_name: str = \"gemini-1.5-flash\"):\n        \"\"\"Initialize the Gemini detector with API key.\"\"\"\n        genai.configure(api_key=api_key)\n        self.model = genai.GenerativeModel(\n            model_name,\n            generation_config={\"temperature\": 0}\n        )\n\n    def _create_detection_prompt(self, text: str) -> str:\n        \"\"\"Create a prompt for PII detection that returns JSON spans.\"\"\"\n        labels_str = \"', '\".join(self.TARGET_LABELS)\n        return f\"\"\"You are an expert PII detection system. Your task is to identify sensitive entities in German email text and return their exact positions.\n\nIMPORTANT RULES:\n1. Only detect entities that match these 21 labels: ['{labels_str}']\n2. Return ONLY a JSON object with this exact structure: {{\"entities\":[{{\"start\":0,\"end\":5,\"label\":\"VORNAME\"}}, ...]}}\n3. Use 0-based indexing where start is inclusive and end is exclusive\n4. Include EVERY occurrence of each entity type separately (do NOT collapse duplicates)\n5. Ensure all start/end positions are accurate for the exact text between <TEXT_BEGIN> and <TEXT_END>\n6. If no entities found, return {{\"entities\":[]}}\n7. Return ONLY the JSON object, no markdown, no explanations\n\nLABEL DEFINITIONS:\n- NACHNAME: Last names/surnames\n- VORNAME: First names/given names\n- STRASSE: Street names\n- POSTLEITZAHL: Postal codes\n- WOHNORT: City/town names\n- HAUSNUMMER: House numbers\n- VERTRAGSNUMMER: Contract numbers, all other sensitive numbers that are not defined in other categories\n- DATUM: Dates in any format\n- ZÄHLERNUMMER: Meter numbers\n- TELEFONNUMMER: Phone numbers\n- GESENDET_MIT: \"Sent with\" messages\n- ZAHLUNG: Payment information\n- FIRMA: Company names\n- TITEL: Titles (e.g., Dr., Dipl.)\n- EMAIL: Email addresses\n- ZÄHLERSTAND: Meter readings, could be in m3 or kWh or without units\n- LINK: URLs and web links\n- IBAN: Bank account numbers\n- BANK: Bank names\n- BIC: Bank identifier codes\n- FAX: Fax numbers\n\n<TEXT_BEGIN>\n{text}\n<TEXT_END>\"\"\"\n\n    def call_gemini_api(self, text: str) -> List[Dict]:\n        \"\"\"Call the Gemini API to detect PII entities in the given text.\"\"\"\n        try:\n            prompt = self._create_detection_prompt(text)\n            response = self.model.generate_content(prompt)\n\n            if not response.text:\n                logger.warning(\"Empty response from Gemini API\")\n                return []\n\n            # Extract JSON from response (robust parsing)\n            json_match = re.search(r'\\{.*\\}', response.text, re.DOTALL)\n            if not json_match:\n                logger.warning(\"No JSON found in Gemini response\")\n                return []\n\n            json_str = json_match.group(0)\n            data = json.loads(json_str)\n\n            # Validate and filter entities\n            entities = data.get(\"entities\", [])\n            valid_entities = []\n            text_length = len(text)\n\n            for entity in entities:\n                if not isinstance(entity, dict):\n                    continue\n\n                start = entity.get(\"start\")\n                end = entity.get(\"end\")\n                label = entity.get(\"label\")\n\n                # Validate entity structure and bounds\n                if (isinstance(start, int) and isinstance(end, int) and\n                        isinstance(label, str) and label in self.TARGET_LABELS and\n                        0 <= start < end <= text_length):\n                    valid_entities.append({\n                        \"start\": start,\n                        \"end\": end,\n                        \"label\": label\n                    })\n                else:\n                    logger.warning(f\"Invalid entity detected: {entity}\")\n\n            # Sort by start position\n            valid_entities.sort(key=lambda x: x[\"start\"])\n            return valid_entities\n\n        except json.JSONDecodeError as e:\n            logger.error(f\"JSON parsing error: {e}\")\n            return []\n        except Exception as e:\n            logger.error(f\"Error calling Gemini API: {e}\")\n            return []\n\n    def process_file(self, path: str) -> Dict:\n        \"\"\"Process a single .txt file and return its result dict.\"\"\"\n        logger.info(f\"Processing file: {path}\")\n        text = Path(path).read_text(encoding='utf-8')\n        entities = self.call_gemini_api(text)\n        return {\n            \"file\": Path(path).name,\n            \"text_length\": len(text),\n            \"entities\": entities\n        }\n\n    def process_json_file(self, json_path: str) -> List[Dict]:\n        \"\"\"Process a JSON file of entries; return list of result dicts.\"\"\"\n        logger.info(f\"Processing JSON file: {json_path}\")\n        data = json.loads(Path(json_path).read_text(encoding='utf-8'))\n        results: List[Dict] = []\n        for entry in data:\n            text = entry.get(\"text\", \"\")\n            fname = entry.get(\"file\", \"unknown.txt\")\n            entities = self.call_gemini_api(text)\n            results.append({\n                \"file\": fname,\n                \"text_length\": len(text),\n                \"entities\": entities\n            })\n        return results\n\n    def process_directory_parallel(\n            self,\n            dir_path: str,\n            max_workers: int = 5\n    ) -> List[Dict]:\n        \"\"\"Process all .txt files in a directory in parallel.\"\"\"\n        files = list(Path(dir_path).glob(\"*.txt\"))\n        results: List[Dict] = []\n        with ThreadPoolExecutor(max_workers=max_workers) as executor:\n            future_to_file = {\n                executor.submit(self.process_file, str(fp)): fp\n                for fp in files\n            }\n            for future in as_completed(future_to_file):\n                fp = future_to_file[future]\n                try:\n                    results.append(future.result())\n                except Exception as e:\n                    logger.error(f\"Error processing {fp.name}: {e}\")\n                    results.append({\n                        \"file\": fp.name,\n                        \"text_length\": 0,\n                        \"entities\": []\n                    })\n        return results\n\n    def process_json_parallel(\n            self,\n            json_path: str,\n            max_workers: int = 5\n    ) -> List[Dict]:\n        \"\"\"Process JSON entries in parallel.\"\"\"\n        data = json.loads(Path(json_path).read_text(encoding='utf-8'))\n        entries = [e for e in data if isinstance(e, dict) and \"text\" in e and \"file\" in e]\n        results: List[Dict] = []\n        with ThreadPoolExecutor(max_workers=max_workers) as executor:\n            future_to_entry = {\n                executor.submit(self._process_entry, entry): entry\n                for entry in entries\n            }\n            for future in as_completed(future_to_entry):\n                entry = future_to_entry[future]\n                try:\n                    results.append(future.result())\n                except Exception as e:\n                    fname = entry.get(\"file\", \"unknown.txt\")\n                    logger.error(f\"Error on entry {fname}: {e}\")\n                    results.append({\n                        \"file\": fname,\n                        \"text_length\": len(entry.get(\"text\", \"\")),\n                        \"entities\": []\n                    })\n        return results\n\n    def _process_entry(self, entry: Dict) -> Dict:\n        \"\"\"Helper for JSON parallel processing.\"\"\"\n        fname = entry[\"file\"]\n        text = entry[\"text\"]\n        entities = self.call_gemini_api(text)\n        return {\n            \"file\": fname,\n            \"text_length\": len(text),\n            \"entities\": entities\n        }\n\n\ndef main():\n    # 1) Load API key (prompt if needed)\n    api_key = os.environ.get(\"GEMINI_API_KEY\")\n    if not api_key:\n        api_key = getpass.getpass(\"Enter your Gemini API key: \")\n        if not api_key:\n            logger.error(\"No API key provided.\")\n            return 1\n\n    # 2) Hard-coded paths and settings\n    input_path = \"../../../data/original/ground_truth_split/test_norm.json\"\n    output_dir = \"../../../data/testing/gemini_results\"\n    model_name = \"gemini-1.5-flash\"\n    max_workers = 5\n\n    # 3) Ensure output directory exists\n    Path(output_dir).mkdir(parents=True, exist_ok=True)\n\n    # 4) Initialize detector\n    detector = GeminiDetector(api_key, model_name)\n\n    # 5) Run in parallel and collect results\n    inp = Path(input_path)\n    if inp.is_file() and inp.suffix.lower() == \".json\":\n        results = detector.process_json_parallel(str(inp), max_workers=max_workers)\n    elif inp.is_dir():\n        results = detector.process_directory_parallel(str(inp), max_workers=max_workers)\n    else:\n        logger.error(f\"Invalid input path: {inp}\")\n        return 1\n\n    # 6) Write a single combined JSON\n    combined_file = Path(output_dir) / \"combined_results.json\"\n    with combined_file.open(\"w\", encoding=\"utf-8\") as f:\n        json.dump(results, f, ensure_ascii=False, indent=2)\n    logger.info(f\"Wrote combined results ({len(results)} entries) to {combined_file}\")\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notebooks/3_model_training_and_testing/gemini_oneshot/gemini_anonymizer_spans.py b/notebooks/3_model_training_and_testing/gemini_oneshot/gemini_anonymizer_spans.py
--- a/notebooks/3_model_training_and_testing/gemini_oneshot/gemini_anonymizer_spans.py	(revision 68e3fd01408523769b50e7566e6fd0db7c5afb8a)
+++ b/notebooks/3_model_training_and_testing/gemini_oneshot/gemini_anonymizer_spans.py	(date 1753962514056)
@@ -1,24 +1,24 @@
 #!/usr/bin/env python3
 """
-Gemini Email PII Detection Pipeline
+Gemini Email PII Anonymization Pipeline
 
-A Python pipeline that uses the Google Gemini API to detect sensitive entities
-in German email texts using 21 custom labels, in parallel, then writes all
-results into a single combined JSON file with span information.
+Uses the Google Gemini API to anonymize sensitive entities in German email texts
+by replacing them with placeholders (<<LABEL_N>>) and returning the original
+lengths. Processes a JSON list of entries and writes combined results to a single JSON output.
 """
 
 import os
 import sys
 import json
 import re
+import time
 import getpass
 import logging
-from dataclasses import dataclass
 from pathlib import Path
-from typing import List, Dict
+from typing import List, Dict, Optional
 from concurrent.futures import ThreadPoolExecutor, as_completed
 
-import google.generativeai as genai
+import google.generativeai as genai  # ensure the package is installed and configured
 
 # Configure logging
 logging.basicConfig(
@@ -27,9 +27,15 @@
 )
 logger = logging.getLogger(__name__)
 
+# === hardcoded paths & settings ===
+INPUT_JSON = "../../../data/original/ground_truth_split/test_norm.json"
+OUTPUT_DIR = "../../../data/testing/gemini_results"
+OUTPUT_FILE_NAME = "llm_span_results.json"
+MODEL_NAME = "gemini-2.5-flash"
+MAX_WORKERS = 5
 
-class GeminiDetector:
-    """Main class for handling Gemini API-based PII detection."""
+
+class GeminiAnonymizer:
     TARGET_LABELS = [
         'NACHNAME', 'VORNAME', 'STRASSE', 'POSTLEITZAHL', 'WOHNORT',
         'HAUSNUMMER', 'VERTRAGSNUMMER', 'DATUM', 'ZÄHLERNUMMER',
@@ -37,242 +43,217 @@
         'EMAIL', 'ZÄHLERSTAND', 'LINK', 'IBAN', 'BANK', 'BIC', 'FAX'
     ]
 
-    def __init__(self, api_key: str, model_name: str = "gemini-1.5-flash"):
-        """Initialize the Gemini detector with API key."""
+    PLACEHOLDER_PATTERN = re.compile(r'<<([A-ZÄÖÜ]+)_(\d+)>>')
+
+    def __init__(self, api_key: str, model_name: str = "gemini-2.5-flash"):
         genai.configure(api_key=api_key)
         self.model = genai.GenerativeModel(
             model_name,
             generation_config={"temperature": 0}
         )
 
-    def _create_detection_prompt(self, text: str) -> str:
-        """Create a prompt for PII detection that returns JSON spans."""
-        labels_str = "', '".join(self.TARGET_LABELS)
-        return f"""You are an expert PII detection system. Your task is to identify sensitive entities in German email text and return their exact positions.
+    def _create_prompt(self, text: str) -> str:
+        return f"""You are an expert PII anonymization system for German email text. Your task is to replace every sensitive entity from the following 21 label set with placeholders, and then output the original lengths of those entities.
 
-IMPORTANT RULES:
-1. Only detect entities that match these 21 labels: ['{labels_str}']
-2. Return ONLY a JSON object with this exact structure: {{"entities":[{{"start":0,"end":5,"label":"VORNAME"}}, ...]}}
-3. Use 0-based indexing where start is inclusive and end is exclusive
-4. Include EVERY occurrence of each entity type separately (do NOT collapse duplicates)
-5. Ensure all start/end positions are accurate for the exact text between <TEXT_BEGIN> and <TEXT_END>
-6. If no entities found, return {{"entities":[]}}
-7. Return ONLY the JSON object, no markdown, no explanations
+LABELS (only these are allowed):
+['NACHNAME', 'VORNAME', 'STRASSE', 'POSTLEITZAHL', 'WOHNORT',
+ 'HAUSNUMMER', 'VERTRAGSNUMMER', 'DATUM', 'ZÄHLERNUMMER',
+ 'TELEFONNUMMER', 'GESENDET_MIT', 'ZAHLUNG', 'FIRMA', 'TITEL',
+ 'EMAIL', 'ZÄHLERSTAND', 'LINK', 'IBAN', 'BANK', 'BIC', 'FAX']
 
-LABEL DEFINITIONS:
-- NACHNAME: Last names/surnames
-- VORNAME: First names/given names
+RULES:
+1. Replace each detected entity with a placeholder of the form <<LABEL_N>>, where LABEL is one of the above and N is a unique sequential number per label type (starting at 1). E.g., first first name becomes <<VORNAME_1>>, second <<VORNAME_2>>, etc.
+2. Do NOT invent or use any labels outside the list above; if a span is ambiguous or does not clearly belong to one of these labels, leave it unchanged.
+3. Preserve the rest of the text exactly, only substituting the sensitive spans with their placeholders.
+4. After the anonymized text, output immediately (no explanation or markdown) a JSON object with a single key \"lengths\" mapping each placeholder to the character length of the original string it replaced.
+5. Use only: (a) the anonymized text with placeholders, then (b) the JSON object. No extra commentary, headers, or formatting.
+
+LABEL DEFINITIONS (for disambiguation):
+- NACHNAME: Last names / surnames
+- VORNAME: First names / given names
 - STRASSE: Street names
 - POSTLEITZAHL: Postal codes
-- WOHNORT: City/town names
+- WOHNORT: City / town names
 - HAUSNUMMER: House numbers
-- VERTRAGSNUMMER: Contract numbers, all other sensitive numbers that are not defined in other categories
+- VERTRAGSNUMMER: Contract numbers or other sensitive account identifiers not covered elsewhere
 - DATUM: Dates in any format
 - ZÄHLERNUMMER: Meter numbers
 - TELEFONNUMMER: Phone numbers
-- GESENDET_MIT: "Sent with" messages
-- ZAHLUNG: Payment information
+- GESENDET_MIT: Phrases like \"Gesendet mit ...\" (sent-with messages)
+- ZAHLUNG: Payment information or monetary amounts (e.g., \"Euro 103,22\")
 - FIRMA: Company names
-- TITEL: Titles (e.g., Dr., Dipl.)
+- TITEL: Honorifics / titles (e.g., Dr., Dipl.)
 - EMAIL: Email addresses
-- ZÄHLERSTAND: Meter readings, could be in m3 or kWh or without units
-- LINK: URLs and web links
-- IBAN: Bank account numbers
+- ZÄHLERSTAND: Meter readings (e.g., m3, kWh)
+- LINK: URLs / web links (include surrounding angle brackets if present)
+- IBAN: Bank account numbers (IBAN)
 - BANK: Bank names
 - BIC: Bank identifier codes
 - FAX: Fax numbers
 
+EXAMPLE:
+Original:
+\"Hallo John Doe, Ihre Vertragsnummer lautet 123456.\"
+
+Correct output:
+Hallo <<VORNAME_1>> <<NACHNAME_1>>, Ihre Vertragsnummer lautet <<VERTRAGSNUMMER_1>>.
+{{
+  \"lengths\": {{
+    \"VORNAME_1\": 4,
+    \"NACHNAME_1\": 3,
+    \"VERTRAGSNUMMER_1\": 6
+  }}
+}}
+
 <TEXT_BEGIN>
 {text}
 <TEXT_END>"""
 
-    def call_gemini_api(self, text: str) -> List[Dict]:
-        """Call the Gemini API to detect PII entities in the given text."""
-        try:
-            prompt = self._create_detection_prompt(text)
-            response = self.model.generate_content(prompt)
-
-            if not response.text:
-                logger.warning("Empty response from Gemini API")
-                return []
-
-            # Extract JSON from response (robust parsing)
-            json_match = re.search(r'\{.*\}', response.text, re.DOTALL)
-            if not json_match:
-                logger.warning("No JSON found in Gemini response")
-                return []
-
-            json_str = json_match.group(0)
-            data = json.loads(json_str)
-
-            # Validate and filter entities
-            entities = data.get("entities", [])
-            valid_entities = []
-            text_length = len(text)
-
-            for entity in entities:
-                if not isinstance(entity, dict):
-                    continue
+    def _extract_trailing_json(self, response_text: str) -> Optional[Dict]:
+        # Find the last valid JSON object (heuristic)
+        idx = len(response_text) - 1
+        while idx >= 0 and response_text[idx] != '}':
+            idx -= 1
+        if idx < 0:
+            return None
+        for start in range(idx, -1, -1):
+            snippet = response_text[start:idx + 1]
+            try:
+                data = json.loads(snippet)
+                return data
+            except json.JSONDecodeError:
+                continue
+        return None
 
-                start = entity.get("start")
-                end = entity.get("end")
-                label = entity.get("label")
-
-                # Validate entity structure and bounds
-                if (isinstance(start, int) and isinstance(end, int) and
-                        isinstance(label, str) and label in self.TARGET_LABELS and
-                        0 <= start < end <= text_length):
-                    valid_entities.append({
-                        "start": start,
-                        "end": end,
-                        "label": label
-                    })
-                else:
-                    logger.warning(f"Invalid entity detected: {entity}")
+    def _parse_response(self, response_text: str) -> Dict:
+        lengths_obj = self._extract_trailing_json(response_text)
+        if not lengths_obj or "lengths" not in lengths_obj:
+            logger.warning("Could not extract valid 'lengths' JSON from response. Full response:\n%s", response_text)
+            lengths = {}
+        else:
+            lengths = lengths_obj["lengths"]
+
+        if lengths_obj:
+            try:
+                json_str = json.dumps(lengths_obj, ensure_ascii=False)
+                anonymized_text = response_text.rsplit(json_str, 1)[0].strip()
+            except Exception:
+                last_brace = response_text.rfind('{')
+                anonymized_text = response_text[:last_brace].strip() if last_brace != -1 else response_text.strip()
+        else:
+            anonymized_text = response_text.strip()
 
-            # Sort by start position
-            valid_entities.sort(key=lambda x: x["start"])
-            return valid_entities
+        return {
+            "anonymized_text": anonymized_text,
+            "lengths": lengths
+        }
 
-        except json.JSONDecodeError as e:
-            logger.error(f"JSON parsing error: {e}")
-            return []
-        except Exception as e:
-            logger.error(f"Error calling Gemini API: {e}")
-            return []
-
-    def process_file(self, path: str) -> Dict:
-        """Process a single .txt file and return its result dict."""
-        logger.info(f"Processing file: {path}")
-        text = Path(path).read_text(encoding='utf-8')
-        entities = self.call_gemini_api(text)
+    def _extract_placeholders(self, anonymized_text: str) -> List[Dict]:
+        placeholders = []
+        for m in self.PLACEHOLDER_PATTERN.finditer(anonymized_text):
+            full = m.group(0)
+            label = m.group(1)
+            index = int(m.group(2))
+            placeholders.append({
+                "placeholder": full,
+                "label": label,
+                "index": index,
+                "start": m.start(),
+                "end": m.end()
+            })
+        return placeholders
+
+    def call_gemini(self, text: str, max_retries: int = 3) -> Dict:
+        prompt = self._create_prompt(text)
+        backoff = 1.0
+        last_exc = None
+        for attempt in range(1, max_retries + 1):
+            try:
+                response = self.model.generate_content(prompt)
+                if not getattr(response, "text", None):
+                    logger.warning("Empty response from Gemini API (attempt %d)", attempt)
+                    raise ValueError("Empty response")
+                parsed = self._parse_response(response.text)
+                placeholders = self._extract_placeholders(parsed["anonymized_text"])
+                return {
+                    "anonymized_text": parsed["anonymized_text"],
+                    "lengths": parsed["lengths"],
+                    "placeholders": placeholders
+                }
+            except Exception as e:
+                logger.error("Error calling Gemini API on attempt %d: %s", attempt, e)
+                last_exc = e
+                time.sleep(backoff)
+                backoff *= 2
+        logger.error("All retries failed for Gemini API call. Last error: %s", last_exc)
         return {
-            "file": Path(path).name,
-            "text_length": len(text),
-            "entities": entities
+            "anonymized_text": "",
+            "lengths": {},
+            "placeholders": []
         }
 
-    def process_json_file(self, json_path: str) -> List[Dict]:
-        """Process a JSON file of entries; return list of result dicts."""
+    def process_json_parallel(self, json_path: str, max_workers: int = 5) -> List[Dict]:
         logger.info(f"Processing JSON file: {json_path}")
         data = json.loads(Path(json_path).read_text(encoding='utf-8'))
+        entries = [e for e in data if isinstance(e, dict) and "text" in e and "file" in e]
         results: List[Dict] = []
-        for entry in data:
-            text = entry.get("text", "")
-            fname = entry.get("file", "unknown.txt")
-            entities = self.call_gemini_api(text)
-            results.append({
+
+        def _worker(entry: Dict) -> Dict:
+            fname = entry["file"]
+            text = entry["text"]
+            anonymization = self.call_gemini(text)
+            return {
                 "file": fname,
                 "text_length": len(text),
-                "entities": entities
-            })
-        return results
+                "anonymized_text": anonymization["anonymized_text"],
+                "lengths": anonymization["lengths"],
+                "placeholders": anonymization["placeholders"]
+            }
 
-    def process_directory_parallel(
-            self,
-            dir_path: str,
-            max_workers: int = 5
-    ) -> List[Dict]:
-        """Process all .txt files in a directory in parallel."""
-        files = list(Path(dir_path).glob("*.txt"))
-        results: List[Dict] = []
         with ThreadPoolExecutor(max_workers=max_workers) as executor:
-            future_to_file = {
-                executor.submit(self.process_file, str(fp)): fp
-                for fp in files
-            }
-            for future in as_completed(future_to_file):
-                fp = future_to_file[future]
-                try:
-                    results.append(future.result())
-                except Exception as e:
-                    logger.error(f"Error processing {fp.name}: {e}")
-                    results.append({
-                        "file": fp.name,
-                        "text_length": 0,
-                        "entities": []
-                    })
-        return results
-
-    def process_json_parallel(
-            self,
-            json_path: str,
-            max_workers: int = 5
-    ) -> List[Dict]:
-        """Process JSON entries in parallel."""
-        data = json.loads(Path(json_path).read_text(encoding='utf-8'))
-        entries = [e for e in data if isinstance(e, dict) and "text" in e and "file" in e]
-        results: List[Dict] = []
-        with ThreadPoolExecutor(max_workers=max_workers) as executor:
-            future_to_entry = {
-                executor.submit(self._process_entry, entry): entry
-                for entry in entries
-            }
+            future_to_entry = {executor.submit(_worker, entry): entry for entry in entries}
             for future in as_completed(future_to_entry):
                 entry = future_to_entry[future]
+                fname = entry.get("file", "unknown.txt")
                 try:
                     results.append(future.result())
                 except Exception as e:
-                    fname = entry.get("file", "unknown.txt")
-                    logger.error(f"Error on entry {fname}: {e}")
+                    logger.error(f"Error processing entry {fname}: {e}")
                     results.append({
                         "file": fname,
                         "text_length": len(entry.get("text", "")),
-                        "entities": []
+                        "anonymized_text": "",
+                        "lengths": {},
+                        "placeholders": []
                     })
         return results
 
-    def _process_entry(self, entry: Dict) -> Dict:
-        """Helper for JSON parallel processing."""
-        fname = entry["file"]
-        text = entry["text"]
-        entities = self.call_gemini_api(text)
-        return {
-            "file": fname,
-            "text_length": len(text),
-            "entities": entities
-        }
-
 
 def main():
-    # 1) Load API key (prompt if needed)
     api_key = os.environ.get("GEMINI_API_KEY")
     if not api_key:
         api_key = getpass.getpass("Enter your Gemini API key: ")
         if not api_key:
             logger.error("No API key provided.")
-            return 1
+            sys.exit(1)
 
-    # 2) Hard-coded paths and settings
-    input_path = "../../../data/original/ground_truth_split/test_norm.json"
-    output_dir = "../../../data/testing/gemini_results"
-    model_name = "gemini-1.5-flash"
-    max_workers = 5
+    # Ensure output directory exists
+    output_dir = Path(OUTPUT_DIR)
+    output_dir.mkdir(parents=True, exist_ok=True)
 
-    # 3) Ensure output directory exists
-    Path(output_dir).mkdir(parents=True, exist_ok=True)
+    anonymizer = GeminiAnonymizer(api_key, model_name=MODEL_NAME)
+    input_path = Path(INPUT_JSON)
+    if not input_path.is_file():
+        logger.error("Invalid input JSON path: %s", input_path)
+        sys.exit(1)
 
-    # 4) Initialize detector
-    detector = GeminiDetector(api_key, model_name)
+    results = anonymizer.process_json_parallel(str(input_path), max_workers=MAX_WORKERS)
 
-    # 5) Run in parallel and collect results
-    inp = Path(input_path)
-    if inp.is_file() and inp.suffix.lower() == ".json":
-        results = detector.process_json_parallel(str(inp), max_workers=max_workers)
-    elif inp.is_dir():
-        results = detector.process_directory_parallel(str(inp), max_workers=max_workers)
-    else:
-        logger.error(f"Invalid input path: {inp}")
-        return 1
-
-    # 6) Write a single combined JSON
-    combined_file = Path(output_dir) / "combined_results.json"
+    combined_file = output_dir / OUTPUT_FILE_NAME
     with combined_file.open("w", encoding="utf-8") as f:
         json.dump(results, f, ensure_ascii=False, indent=2)
     logger.info(f"Wrote combined results ({len(results)} entries) to {combined_file}")
 
-    return 0
-
 
 if __name__ == "__main__":
-    sys.exit(main())
\ No newline at end of file
+    main()
\ No newline at end of file
Index: notebooks/3_model_training_and_testing/gemini_oneshot/spans/reverse_check.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notebooks/3_model_training_and_testing/gemini_oneshot/spans/reverse_check.py b/notebooks/3_model_training_and_testing/gemini_oneshot/spans/reverse_check.py
new file mode 100644
--- /dev/null	(date 1753959752150)
+++ b/notebooks/3_model_training_and_testing/gemini_oneshot/spans/reverse_check.py	(date 1753959752150)
@@ -0,0 +1,54 @@
+from difflib import SequenceMatcher
+from collections import Counter
+from typing import List, Tuple, Dict, Any
+
+# Assume Span = Tuple[int, int, str]  # (start, end, label)
+
+def reverse_check_file(
+    original_text: str,
+    anonymized_text: str,
+    gold_spans: List[Tuple[int, int, str]],
+    fuzzy_threshold: float = 0.8
+) -> Tuple[List[Dict[str, Any]], Dict[str, int]]:
+    """
+    For each gold span, check if its exact substring still appears in the anonymized text.
+    Returns per-span diagnostics and summary counts.
+    """
+    diagnostics = []
+    for start, end, label in gold_spans:
+        pii = original_text[start:end]
+        if not pii.strip():
+            # ignore empty or whitespace spans
+            continue
+
+        entry = {
+            "span": (start, end, label),
+            "pii": pii,
+            "label": label,
+            "exact_leak": False,
+            "partial_leak": False,
+            "removed": False,
+            "similarity": 0.0,
+        }
+
+        if pii in anonymized_text:
+            entry["exact_leak"] = True
+            entry["similarity"] = 1.0
+        else:
+            # Compute fuzzy similarity globally; for large snippets you might want to window this
+            ratio = SequenceMatcher(None, pii, anonymized_text).ratio()
+            entry["similarity"] = ratio
+            if ratio >= fuzzy_threshold:
+                entry["partial_leak"] = True
+            else:
+                entry["removed"] = True
+
+        diagnostics.append(entry)
+
+    # Summarize
+    summary = Counter()
+    summary["total"] = len(diagnostics)
+    summary["removed"] = sum(1 for d in diagnostics if d["removed"])
+    summary["exact_leaks"] = sum(1 for d in diagnostics if d["exact_leak"])
+    summary["partial_leaks"] = sum(1 for d in diagnostics if d["partial_leak"])
+    return diagnostics, summary
\ No newline at end of file
Index: notebooks/3_model_training_and_testing/gemini_oneshot/gemini_anonymization_pipeline.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"metadata\": {},\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"# Gemini Email Anonymization Pipeline\\n\",\n    \"\\n\",\n    \"A Python pipeline that uses the Google Gemini API to detect and anonymize\\n\",\n    \"sensitive entities in email texts using 21 custom labels.\\n\"\n   ],\n   \"id\": \"7bf9efc3657183d9\"\n  },\n  {\n   \"metadata\": {},\n   \"cell_type\": \"code\",\n   \"outputs\": [],\n   \"execution_count\": null,\n   \"source\": [\n    \"#!/usr/bin/env python3\\n\",\n    \"\\n\",\n    \"import os\\n\",\n    \"import json\\n\",\n    \"import re\\n\",\n    \"import argparse\\n\",\n    \"import logging\\n\",\n    \"from typing import List, Dict, Optional, Tuple\\n\",\n    \"from pathlib import Path\\n\",\n    \"import google.generativeai as genai\\n\",\n    \"from dataclasses import dataclass\\n\",\n    \"\\n\",\n    \"# Configure logging\\n\",\n    \"logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\\n\",\n    \"logger = logging.getLogger(__name__)\\n\",\n    \"\\n\",\n    \"@dataclass\\n\",\n    \"class EntitySpan:\\n\",\n    \"    \\\"\\\"\\\"Represents an entity span with start, end positions and label.\\\"\\\"\\\"\\n\",\n    \"    start: int\\n\",\n    \"    end: int\\n\",\n    \"    label: str\\n\",\n    \"\\n\",\n    \"class GeminiAnonymizer:\\n\",\n    \"    \\\"\\\"\\\"Main class for handling Gemini API-based email anonymization.\\\"\\\"\\\"\\n\",\n    \"\\n\",\n    \"    # Target labels for anonymization\\n\",\n    \"    TARGET_LABELS = [\\n\",\n    \"        'NACHNAME', 'VORNAME', 'STRASSE', 'POSTLEITZAHL', 'WOHNORT',\\n\",\n    \"        'HAUSNUMMER', 'VERTRAGSNUMMER', 'DATUM', 'ZÄHLERNUMMER',\\n\",\n    \"        'TELEFONNUMMER', 'GESENDET_MIT', 'ZAHLUNG', 'FIRMA', 'TITEL',\\n\",\n    \"        'EMAIL', 'ZÄHLERSTAND', 'LINK', 'IBAN', 'BANK', 'BIC', 'FAX'\\n\",\n    \"    ]\\n\",\n    \"\\n\",\n    \"    def __init__(self, api_key: str, model_name: str = \\\"gemini-1.5-flash\\\"):\\n\",\n    \"        \\\"\\\"\\\"Initialize the Gemini anonymizer with API key.\\\"\\\"\\\"\\n\",\n    \"        genai.configure(api_key=api_key)\\n\",\n    \"        self.model = genai.GenerativeModel(model_name)\\n\",\n    \"\\n\",\n    \"    def _create_anonymization_prompt(self, text: str) -> str:\\n\",\n    \"        \\\"\\\"\\\"Create a detailed prompt for the Gemini API to anonymize text.\\\"\\\"\\\"\\n\",\n    \"        labels_str = \\\"', '\\\".join(self.TARGET_LABELS)\\n\",\n    \"\\n\",\n    \"        prompt = f\\\"\\\"\\\"You are an expert text anonymization system. Your task is to identify and replace sensitive entities in German email text with anonymization placeholders.\\n\",\n    \"\\n\",\n    \"IMPORTANT RULES:\\n\",\n    \"1. Only replace entities that match these 21 labels: ['{labels_str}']\\n\",\n    \"2. Replace each detected entity with <<LABEL>> (e.g., <<VORNAME>>, <<NACHNAME>>)\\n\",\n    \"3. Preserve the original text structure, formatting, and whitespace exactly\\n\",\n    \"4. Do not modify any text that doesn't contain sensitive entities\\n\",\n    \"5. Return ONLY the anonymized text, no explanations or metadata\\n\",\n    \"\\n\",\n    \"LABEL DEFINITIONS:\\n\",\n    \"- NACHNAME: Last names/surnames\\n\",\n    \"- VORNAME: First names/given names\\n\",\n    \"- STRASSE: Street names\\n\",\n    \"- POSTLEITZAHL: Postal codes\\n\",\n    \"- WOHNORT: City/town names\\n\",\n    \"- HAUSNUMMER: House numbers\\n\",\n    \"- VERTRAGSNUMMER: Contract numbers, all other seemingly sensitive numbers that don't fall into another category (e.g., OR-0001239759)\\n\",\n    \"- DATUM: Dates in any format, also only Months, or \\\"10ter\\\" (\\\"tenth\\\") of a month\\n\",\n    \"- ZÄHLERNUMMER: Meter numbers\\n\",\n    \"- TELEFONNUMMER: Phone numbers\\n\",\n    \"- GESENDET_MIT: \\\"Sent with\\\" messages (e.g., \\\"Diese Nachricht wurde von meinem Android...\\\")\\n\",\n    \"- ZAHLUNG: Payment information, Euros/ Cents etc.\\n\",\n    \"- FIRMA: Company names\\n\",\n    \"- TITEL: Titles (Mr., Mrs., Dr., Dipl., etc.)\\n\",\n    \"- EMAIL: Email addresses\\n\",\n    \"- ZÄHLERSTAND: Meter readings and differences in m3 or kwh etc.\\n\",\n    \"- LINK: URLs and web links\\n\",\n    \"- IBAN: International bank account numbers\\n\",\n    \"- BANK: Bank names\\n\",\n    \"- BIC: Bank identifier codes\\n\",\n    \"- FAX: Fax numbers\\n\",\n    \"\\n\",\n    \"EXAMPLE:\\n\",\n    \"Input: \\\"Kunde: Gertraude Wagenknecht-Speer\\\"\\n\",\n    \"Output: \\\"Kunde: <<VORNAME>> <<NACHNAME>>\\\"\\n\",\n    \"\\n\",\n    \"TEXT TO ANONYMIZE:\\n\",\n    \"{text}\\n\",\n    \"\\n\",\n    \"ANONYMIZED TEXT:\\\"\\\"\\\"\\n\",\n    \"\\n\",\n    \"        return prompt\\n\",\n    \"\\n\",\n    \"    def call_gemini_api(self, text: str) -> str:\\n\",\n    \"        \\\"\\\"\\\"Call the Gemini API to anonymize the given text.\\\"\\\"\\\"\\n\",\n    \"        try:\\n\",\n    \"            prompt = self._create_anonymization_prompt(text)\\n\",\n    \"            response = self.model.generate_content(prompt)\\n\",\n    \"\\n\",\n    \"            if response.text:\\n\",\n    \"                return response.text.strip()\\n\",\n    \"            else:\\n\",\n    \"                logger.error(\\\"Empty response from Gemini API\\\")\\n\",\n    \"                return text\\n\",\n    \"\\n\",\n    \"        except Exception as e:\\n\",\n    \"            logger.error(f\\\"Error calling Gemini API: {e}\\\")\\n\",\n    \"            return text\\n\",\n    \"\\n\",\n    \"    def extract_spans(self, original_text: str, anonymized_text: str) -> List[Dict]:\\n\",\n    \"        \\\"\\\"\\\"Extract entity spans by comparing original and anonymized texts.\\\"\\\"\\\"\\n\",\n    \"        spans = []\\n\",\n    \"\\n\",\n    \"        # Find all placeholder patterns in anonymized text\\n\",\n    \"        placeholder_pattern = r'<<([A-Z_]+)>>'\\n\",\n    \"        placeholders = list(re.finditer(placeholder_pattern, anonymized_text))\\n\",\n    \"\\n\",\n    \"        if not placeholders:\\n\",\n    \"            return spans\\n\",\n    \"\\n\",\n    \"        # Create a mapping of positions\\n\",\n    \"        original_pos = 0\\n\",\n    \"        anonymized_pos = 0\\n\",\n    \"\\n\",\n    \"        for placeholder_match in placeholders:\\n\",\n    \"            placeholder_start = placeholder_match.start()\\n\",\n    \"            placeholder_end = placeholder_match.end()\\n\",\n    \"            label = placeholder_match.group(1)\\n\",\n    \"\\n\",\n    \"            # Find the corresponding position in original text\\n\",\n    \"            # Move to the placeholder position in anonymized text\\n\",\n    \"            while anonymized_pos < placeholder_start:\\n\",\n    \"                if (anonymized_pos < len(anonymized_text) and\\n\",\n    \"                    original_pos < len(original_text) and\\n\",\n    \"                    anonymized_text[anonymized_pos] == original_text[original_pos]):\\n\",\n    \"                    anonymized_pos += 1\\n\",\n    \"                    original_pos += 1\\n\",\n    \"                else:\\n\",\n    \"                    break\\n\",\n    \"\\n\",\n    \"            # Find the end of the original entity\\n\",\n    \"            entity_start = original_pos\\n\",\n    \"\\n\",\n    \"            # Look ahead to find where the next non-placeholder text matches\\n\",\n    \"            next_match_pos = self._find_next_match_position(\\n\",\n    \"                original_text, anonymized_text, original_pos, placeholder_end\\n\",\n    \"            )\\n\",\n    \"\\n\",\n    \"            if next_match_pos > entity_start:\\n\",\n    \"                spans.append({\\n\",\n    \"                    \\\"start\\\": entity_start,\\n\",\n    \"                    \\\"end\\\": next_match_pos,\\n\",\n    \"                    \\\"label\\\": label\\n\",\n    \"                })\\n\",\n    \"                original_pos = next_match_pos\\n\",\n    \"\\n\",\n    \"            anonymized_pos = placeholder_end\\n\",\n    \"\\n\",\n    \"        return spans\\n\",\n    \"\\n\",\n    \"    def _find_next_match_position(self, original_text: str, anonymized_text: str,\\n\",\n    \"                                 original_pos: int, anonymized_pos: int) -> int:\\n\",\n    \"        \\\"\\\"\\\"Find the next position where original and anonymized text match.\\\"\\\"\\\"\\n\",\n    \"        # Look for the next sequence of characters that match\\n\",\n    \"        window_size = 10  # Look ahead window\\n\",\n    \"\\n\",\n    \"        for i in range(original_pos, len(original_text)):\\n\",\n    \"            if anonymized_pos >= len(anonymized_text):\\n\",\n    \"                break\\n\",\n    \"\\n\",\n    \"            # Check if we have a match at this position\\n\",\n    \"            match_found = True\\n\",\n    \"            for j in range(min(window_size, len(original_text) - i, len(anonymized_text) - anonymized_pos)):\\n\",\n    \"                if (i + j >= len(original_text) or\\n\",\n    \"                    anonymized_pos + j >= len(anonymized_text) or\\n\",\n    \"                    original_text[i + j] != anonymized_text[anonymized_pos + j]):\\n\",\n    \"                    match_found = False\\n\",\n    \"                    break\\n\",\n    \"\\n\",\n    \"            if match_found:\\n\",\n    \"                return i\\n\",\n    \"\\n\",\n    \"        return len(original_text)\\n\",\n    \"\\n\",\n    \"    def anonymize_text(self, text: str, labels: List[Dict]) -> str:\\n\",\n    \"        \\\"\\\"\\\"Anonymize text using provided labels (for manual override).\\\"\\\"\\\"\\n\",\n    \"        # Sort labels by start position in reverse order to avoid position shifts\\n\",\n    \"        sorted_labels = sorted(labels, key=lambda x: x['start'], reverse=True)\\n\",\n    \"\\n\",\n    \"        anonymized = text\\n\",\n    \"        for label_info in sorted_labels:\\n\",\n    \"            start = label_info['start']\\n\",\n    \"            end = label_info['end']\\n\",\n    \"            label = label_info['label']\\n\",\n    \"\\n\",\n    \"            anonymized = (anonymized[:start] +\\n\",\n    \"                         f\\\"<<{label}>>\\\" +\\n\",\n    \"                         anonymized[end:])\\n\",\n    \"\\n\",\n    \"        return anonymized\\n\",\n    \"\\n\",\n    \"    def write_json(self, file_name: str, original_text: str, anonymized_text: str,\\n\",\n    \"                   labels: List[Dict], output_dir: str = \\\"output\\\"):\\n\",\n    \"        \\\"\\\"\\\"Write results to JSON file.\\\"\\\"\\\"\\n\",\n    \"        os.makedirs(output_dir, exist_ok=True)\\n\",\n    \"\\n\",\n    \"        output_data = {\\n\",\n    \"            \\\"file\\\": file_name,\\n\",\n    \"            \\\"text\\\": original_text,\\n\",\n    \"            \\\"anonymized_text\\\": anonymized_text,\\n\",\n    \"            \\\"labels\\\": labels\\n\",\n    \"        }\\n\",\n    \"\\n\",\n    \"        output_file = os.path.join(output_dir, f\\\"{Path(file_name).stem}.json\\\")\\n\",\n    \"        with open(output_file, 'w', encoding='utf-8') as f:\\n\",\n    \"            json.dump(output_data, f, ensure_ascii=False, indent=2)\\n\",\n    \"\\n\",\n    \"        logger.info(f\\\"JSON output written to {output_file}\\\")\\n\",\n    \"\\n\",\n    \"    def process_file(self, file_path: str, output_format: str = \\\"json\\\") -> Dict:\\n\",\n    \"        \\\"\\\"\\\"Process a single text file.\\\"\\\"\\\"\\n\",\n    \"        logger.info(f\\\"Processing file: {file_path}\\\")\\n\",\n    \"\\n\",\n    \"        try:\\n\",\n    \"            with open(file_path, 'r', encoding='utf-8') as f:\\n\",\n    \"                original_text = f.read()\\n\",\n    \"\\n\",\n    \"            # Call Gemini API for anonymization\\n\",\n    \"            anonymized_text = self.call_gemini_api(original_text)\\n\",\n    \"\\n\",\n    \"            # Extract spans\\n\",\n    \"            labels = self.extract_spans(original_text, anonymized_text)\\n\",\n    \"\\n\",\n    \"            file_name = os.path.basename(file_path)\\n\",\n    \"\\n\",\n    \"            if output_format == \\\"json\\\":\\n\",\n    \"                self.write_json(file_name, original_text, anonymized_text, labels)\\n\",\n    \"            elif output_format == \\\"txt\\\":\\n\",\n    \"                self.write_txt(file_name, anonymized_text)\\n\",\n    \"\\n\",\n    \"            return {\\n\",\n    \"                \\\"file\\\": file_name,\\n\",\n    \"                \\\"original_text\\\": original_text,\\n\",\n    \"                \\\"anonymized_text\\\": anonymized_text,\\n\",\n    \"                \\\"labels\\\": labels,\\n\",\n    \"                \\\"success\\\": True\\n\",\n    \"            }\\n\",\n    \"\\n\",\n    \"        except Exception as e:\\n\",\n    \"            logger.error(f\\\"Error processing file {file_path}: {e}\\\")\\n\",\n    \"            return {\\n\",\n    \"                \\\"file\\\": os.path.basename(file_path),\\n\",\n    \"                \\\"success\\\": False,\\n\",\n    \"                \\\"error\\\": str(e)\\n\",\n    \"            }\\n\",\n    \"\\n\",\n    \"    def write_txt(self, file_name: str, anonymized_text: str, output_dir: str = \\\"output\\\"):\\n\",\n    \"        \\\"\\\"\\\"Write anonymized text to a .txt file.\\\"\\\"\\\"\\n\",\n    \"        os.makedirs(output_dir, exist_ok=True)\\n\",\n    \"\\n\",\n    \"        output_file = os.path.join(output_dir, file_name)\\n\",\n    \"        with open(output_file, 'w', encoding='utf-8') as f:\\n\",\n    \"            f.write(anonymized_text)\\n\",\n    \"\\n\",\n    \"        logger.info(f\\\"Anonymized text written to {output_file}\\\")\\n\",\n    \"\\n\",\n    \"    def process_directory(self, input_dir: str, output_format: str = \\\"json\\\") -> List[Dict]:\\n\",\n    \"        \\\"\\\"\\\"Process all .txt files in a directory.\\\"\\\"\\\"\\n\",\n    \"        input_path = Path(input_dir)\\n\",\n    \"\\n\",\n    \"        if not input_path.exists():\\n\",\n    \"            raise FileNotFoundError(f\\\"Input directory '{input_dir}' does not exist\\\")\\n\",\n    \"\\n\",\n    \"        txt_files = list(input_path.glob(\\\"*.txt\\\"))\\n\",\n    \"\\n\",\n    \"        if not txt_files:\\n\",\n    \"            logger.warning(f\\\"No .txt files found in {input_dir}\\\")\\n\",\n    \"            return []\\n\",\n    \"\\n\",\n    \"        results = []\\n\",\n    \"        for file_path in txt_files:\\n\",\n    \"            result = self.process_file(str(file_path), output_format)\\n\",\n    \"            results.append(result)\\n\",\n    \"\\n\",\n    \"        # Create summary JSON if processing multiple files\\n\",\n    \"        if len(results) > 1 and output_format == \\\"json\\\":\\n\",\n    \"            self.write_batch_summary(results)\\n\",\n    \"\\n\",\n    \"        return results\\n\",\n    \"\\n\",\n    \"    def write_batch_summary(self, results: List[Dict], output_dir: str = \\\"output\\\"):\\n\",\n    \"        \\\"\\\"\\\"Write a summary of batch processing results.\\\"\\\"\\\"\\n\",\n    \"        os.makedirs(output_dir, exist_ok=True)\\n\",\n    \"\\n\",\n    \"        summary = {\\n\",\n    \"            \\\"total_files\\\": len(results),\\n\",\n    \"            \\\"successful\\\": sum(1 for r in results if r.get(\\\"success\\\", False)),\\n\",\n    \"            \\\"failed\\\": sum(1 for r in results if not r.get(\\\"success\\\", False)),\\n\",\n    \"            \\\"files\\\": {}\\n\",\n    \"        }\\n\",\n    \"\\n\",\n    \"        for result in results:\\n\",\n    \"            if result.get(\\\"success\\\", False):\\n\",\n    \"                summary[\\\"files\\\"][result[\\\"file\\\"]] = result[\\\"anonymized_text\\\"]\\n\",\n    \"\\n\",\n    \"        summary_file = os.path.join(output_dir, \\\"batch_summary.json\\\")\\n\",\n    \"        with open(summary_file, 'w', encoding='utf-8') as f:\\n\",\n    \"            json.dump(summary, f, ensure_ascii=False, indent=2)\\n\",\n    \"\\n\",\n    \"        logger.info(f\\\"Batch summary written to {summary_file}\\\")\\n\",\n    \"\\n\",\n    \"def main():\\n\",\n    \"    \\\"\\\"\\\"Main CLI function.\\\"\\\"\\\"\\n\",\n    \"    parser = argparse.ArgumentParser(description=\\\"Gemini Email Anonymization Pipeline\\\")\\n\",\n    \"    parser.add_argument(\\\"../../../data/original/ground_truth_split/test_norm.json\\\", help=\\\"Input file or directory containing .txt files\\\")\\n\",\n    \"    parser.add_argument(\\\"--api-key\\\", required=True, help=\\\"Google Gemini API key\\\")\\n\",\n    \"    parser.add_argument(\\\"--model\\\", default=\\\"gemini-1.5-flash\\\", help=\\\"Gemini model to use\\\")\\n\",\n    \"    parser.add_argument(\\\"--output-format\\\", choices=[\\\"json\\\", \\\"txt\\\"], default=\\\"json\\\",\\n\",\n    \"                       help=\\\"Output format (json or txt)\\\")\\n\",\n    \"    parser.add_argument(\\\"../../../data/testing/gemini_results\\\", default=\\\"output\\\", help=\\\"Output directory\\\")\\n\",\n    \"\\n\",\n    \"    args = parser.parse_args()\\n\",\n    \"\\n\",\n    \"    # Initialize anonymizer\\n\",\n    \"    anonymizer = GeminiAnonymizer(args.api_key, args.model)\\n\",\n    \"\\n\",\n    \"    input_path = Path(args.input)\\n\",\n    \"\\n\",\n    \"    try:\\n\",\n    \"        if input_path.is_file():\\n\",\n    \"            # Process single file\\n\",\n    \"            result = anonymizer.process_file(str(input_path), args.output_format)\\n\",\n    \"            if result[\\\"success\\\"]:\\n\",\n    \"                logger.info(\\\"File processed successfully\\\")\\n\",\n    \"            else:\\n\",\n    \"                logger.error(f\\\"Failed to process file: {result.get('error', 'Unknown error')}\\\")\\n\",\n    \"\\n\",\n    \"        elif input_path.is_dir():\\n\",\n    \"            # Process directory\\n\",\n    \"            results = anonymizer.process_directory(str(input_path), args.output_format)\\n\",\n    \"            successful = sum(1 for r in results if r.get(\\\"success\\\", False))\\n\",\n    \"            logger.info(f\\\"Processed {successful}/{len(results)} files successfully\\\")\\n\",\n    \"\\n\",\n    \"        else:\\n\",\n    \"            logger.error(f\\\"Input path '{args.input}' is neither a file nor a directory\\\")\\n\",\n    \"            return 1\\n\",\n    \"\\n\",\n    \"    except Exception as e:\\n\",\n    \"        logger.error(f\\\"Error: {e}\\\")\\n\",\n    \"        return 1\\n\",\n    \"\\n\",\n    \"    return 0\\n\",\n    \"\\n\",\n    \"if __name__ == \\\"__main__\\\":\\n\",\n    \"    exit(main())\"\n   ],\n   \"id\": \"9425a0f4914e33fe\"\n  }\n ],\n \"metadata\": {},\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notebooks/3_model_training_and_testing/gemini_oneshot/gemini_anonymization_pipeline.ipynb b/notebooks/3_model_training_and_testing/gemini_oneshot/gemini_anonymization_pipeline.ipynb
--- a/notebooks/3_model_training_and_testing/gemini_oneshot/gemini_anonymization_pipeline.ipynb	(revision 68e3fd01408523769b50e7566e6fd0db7c5afb8a)
+++ b/notebooks/3_model_training_and_testing/gemini_oneshot/gemini_anonymization_pipeline.ipynb	(date 1753020043609)
@@ -1,375 +1,355 @@
-{
- "cells": [
-  {
-   "metadata": {},
-   "cell_type": "markdown",
-   "source": [
-    "# Gemini Email Anonymization Pipeline\n",
-    "\n",
-    "A Python pipeline that uses the Google Gemini API to detect and anonymize\n",
-    "sensitive entities in email texts using 21 custom labels.\n"
-   ],
-   "id": "7bf9efc3657183d9"
-  },
-  {
-   "metadata": {},
-   "cell_type": "code",
-   "outputs": [],
-   "execution_count": null,
-   "source": [
-    "#!/usr/bin/env python3\n",
-    "\n",
-    "import os\n",
-    "import json\n",
-    "import re\n",
-    "import argparse\n",
-    "import logging\n",
-    "from typing import List, Dict, Optional, Tuple\n",
-    "from pathlib import Path\n",
-    "import google.generativeai as genai\n",
-    "from dataclasses import dataclass\n",
-    "\n",
-    "# Configure logging\n",
-    "logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n",
-    "logger = logging.getLogger(__name__)\n",
-    "\n",
-    "@dataclass\n",
-    "class EntitySpan:\n",
-    "    \"\"\"Represents an entity span with start, end positions and label.\"\"\"\n",
-    "    start: int\n",
-    "    end: int\n",
-    "    label: str\n",
-    "\n",
-    "class GeminiAnonymizer:\n",
-    "    \"\"\"Main class for handling Gemini API-based email anonymization.\"\"\"\n",
-    "\n",
-    "    # Target labels for anonymization\n",
-    "    TARGET_LABELS = [\n",
-    "        'NACHNAME', 'VORNAME', 'STRASSE', 'POSTLEITZAHL', 'WOHNORT',\n",
-    "        'HAUSNUMMER', 'VERTRAGSNUMMER', 'DATUM', 'ZÄHLERNUMMER',\n",
-    "        'TELEFONNUMMER', 'GESENDET_MIT', 'ZAHLUNG', 'FIRMA', 'TITEL',\n",
-    "        'EMAIL', 'ZÄHLERSTAND', 'LINK', 'IBAN', 'BANK', 'BIC', 'FAX'\n",
-    "    ]\n",
-    "\n",
-    "    def __init__(self, api_key: str, model_name: str = \"gemini-1.5-flash\"):\n",
-    "        \"\"\"Initialize the Gemini anonymizer with API key.\"\"\"\n",
-    "        genai.configure(api_key=api_key)\n",
-    "        self.model = genai.GenerativeModel(model_name)\n",
-    "\n",
-    "    def _create_anonymization_prompt(self, text: str) -> str:\n",
-    "        \"\"\"Create a detailed prompt for the Gemini API to anonymize text.\"\"\"\n",
-    "        labels_str = \"', '\".join(self.TARGET_LABELS)\n",
-    "\n",
-    "        prompt = f\"\"\"You are an expert text anonymization system. Your task is to identify and replace sensitive entities in German email text with anonymization placeholders.\n",
-    "\n",
-    "IMPORTANT RULES:\n",
-    "1. Only replace entities that match these 21 labels: ['{labels_str}']\n",
-    "2. Replace each detected entity with <<LABEL>> (e.g., <<VORNAME>>, <<NACHNAME>>)\n",
-    "3. Preserve the original text structure, formatting, and whitespace exactly\n",
-    "4. Do not modify any text that doesn't contain sensitive entities\n",
-    "5. Return ONLY the anonymized text, no explanations or metadata\n",
-    "\n",
-    "LABEL DEFINITIONS:\n",
-    "- NACHNAME: Last names/surnames\n",
-    "- VORNAME: First names/given names\n",
-    "- STRASSE: Street names\n",
-    "- POSTLEITZAHL: Postal codes\n",
-    "- WOHNORT: City/town names\n",
-    "- HAUSNUMMER: House numbers\n",
-    "- VERTRAGSNUMMER: Contract numbers, all other seemingly sensitive numbers that don't fall into another category (e.g., OR-0001239759)\n",
-    "- DATUM: Dates in any format, also only Months, or \"10ter\" (\"tenth\") of a month\n",
-    "- ZÄHLERNUMMER: Meter numbers\n",
-    "- TELEFONNUMMER: Phone numbers\n",
-    "- GESENDET_MIT: \"Sent with\" messages (e.g., \"Diese Nachricht wurde von meinem Android...\")\n",
-    "- ZAHLUNG: Payment information, Euros/ Cents etc.\n",
-    "- FIRMA: Company names\n",
-    "- TITEL: Titles (Mr., Mrs., Dr., Dipl., etc.)\n",
-    "- EMAIL: Email addresses\n",
-    "- ZÄHLERSTAND: Meter readings and differences in m3 or kwh etc.\n",
-    "- LINK: URLs and web links\n",
-    "- IBAN: International bank account numbers\n",
-    "- BANK: Bank names\n",
-    "- BIC: Bank identifier codes\n",
-    "- FAX: Fax numbers\n",
-    "\n",
-    "EXAMPLE:\n",
-    "Input: \"Kunde: Gertraude Wagenknecht-Speer\"\n",
-    "Output: \"Kunde: <<VORNAME>> <<NACHNAME>>\"\n",
-    "\n",
-    "TEXT TO ANONYMIZE:\n",
-    "{text}\n",
-    "\n",
-    "ANONYMIZED TEXT:\"\"\"\n",
-    "\n",
-    "        return prompt\n",
-    "\n",
-    "    def call_gemini_api(self, text: str) -> str:\n",
-    "        \"\"\"Call the Gemini API to anonymize the given text.\"\"\"\n",
-    "        try:\n",
-    "            prompt = self._create_anonymization_prompt(text)\n",
-    "            response = self.model.generate_content(prompt)\n",
-    "\n",
-    "            if response.text:\n",
-    "                return response.text.strip()\n",
-    "            else:\n",
-    "                logger.error(\"Empty response from Gemini API\")\n",
-    "                return text\n",
-    "\n",
-    "        except Exception as e:\n",
-    "            logger.error(f\"Error calling Gemini API: {e}\")\n",
-    "            return text\n",
-    "\n",
-    "    def extract_spans(self, original_text: str, anonymized_text: str) -> List[Dict]:\n",
-    "        \"\"\"Extract entity spans by comparing original and anonymized texts.\"\"\"\n",
-    "        spans = []\n",
-    "\n",
-    "        # Find all placeholder patterns in anonymized text\n",
-    "        placeholder_pattern = r'<<([A-Z_]+)>>'\n",
-    "        placeholders = list(re.finditer(placeholder_pattern, anonymized_text))\n",
-    "\n",
-    "        if not placeholders:\n",
-    "            return spans\n",
-    "\n",
-    "        # Create a mapping of positions\n",
-    "        original_pos = 0\n",
-    "        anonymized_pos = 0\n",
-    "\n",
-    "        for placeholder_match in placeholders:\n",
-    "            placeholder_start = placeholder_match.start()\n",
-    "            placeholder_end = placeholder_match.end()\n",
-    "            label = placeholder_match.group(1)\n",
-    "\n",
-    "            # Find the corresponding position in original text\n",
-    "            # Move to the placeholder position in anonymized text\n",
-    "            while anonymized_pos < placeholder_start:\n",
-    "                if (anonymized_pos < len(anonymized_text) and\n",
-    "                    original_pos < len(original_text) and\n",
-    "                    anonymized_text[anonymized_pos] == original_text[original_pos]):\n",
-    "                    anonymized_pos += 1\n",
-    "                    original_pos += 1\n",
-    "                else:\n",
-    "                    break\n",
-    "\n",
-    "            # Find the end of the original entity\n",
-    "            entity_start = original_pos\n",
-    "\n",
-    "            # Look ahead to find where the next non-placeholder text matches\n",
-    "            next_match_pos = self._find_next_match_position(\n",
-    "                original_text, anonymized_text, original_pos, placeholder_end\n",
-    "            )\n",
-    "\n",
-    "            if next_match_pos > entity_start:\n",
-    "                spans.append({\n",
-    "                    \"start\": entity_start,\n",
-    "                    \"end\": next_match_pos,\n",
-    "                    \"label\": label\n",
-    "                })\n",
-    "                original_pos = next_match_pos\n",
-    "\n",
-    "            anonymized_pos = placeholder_end\n",
-    "\n",
-    "        return spans\n",
-    "\n",
-    "    def _find_next_match_position(self, original_text: str, anonymized_text: str,\n",
-    "                                 original_pos: int, anonymized_pos: int) -> int:\n",
-    "        \"\"\"Find the next position where original and anonymized text match.\"\"\"\n",
-    "        # Look for the next sequence of characters that match\n",
-    "        window_size = 10  # Look ahead window\n",
-    "\n",
-    "        for i in range(original_pos, len(original_text)):\n",
-    "            if anonymized_pos >= len(anonymized_text):\n",
-    "                break\n",
-    "\n",
-    "            # Check if we have a match at this position\n",
-    "            match_found = True\n",
-    "            for j in range(min(window_size, len(original_text) - i, len(anonymized_text) - anonymized_pos)):\n",
-    "                if (i + j >= len(original_text) or\n",
-    "                    anonymized_pos + j >= len(anonymized_text) or\n",
-    "                    original_text[i + j] != anonymized_text[anonymized_pos + j]):\n",
-    "                    match_found = False\n",
-    "                    break\n",
-    "\n",
-    "            if match_found:\n",
-    "                return i\n",
-    "\n",
-    "        return len(original_text)\n",
-    "\n",
-    "    def anonymize_text(self, text: str, labels: List[Dict]) -> str:\n",
-    "        \"\"\"Anonymize text using provided labels (for manual override).\"\"\"\n",
-    "        # Sort labels by start position in reverse order to avoid position shifts\n",
-    "        sorted_labels = sorted(labels, key=lambda x: x['start'], reverse=True)\n",
-    "\n",
-    "        anonymized = text\n",
-    "        for label_info in sorted_labels:\n",
-    "            start = label_info['start']\n",
-    "            end = label_info['end']\n",
-    "            label = label_info['label']\n",
-    "\n",
-    "            anonymized = (anonymized[:start] +\n",
-    "                         f\"<<{label}>>\" +\n",
-    "                         anonymized[end:])\n",
-    "\n",
-    "        return anonymized\n",
-    "\n",
-    "    def write_json(self, file_name: str, original_text: str, anonymized_text: str,\n",
-    "                   labels: List[Dict], output_dir: str = \"output\"):\n",
-    "        \"\"\"Write results to JSON file.\"\"\"\n",
-    "        os.makedirs(output_dir, exist_ok=True)\n",
-    "\n",
-    "        output_data = {\n",
-    "            \"file\": file_name,\n",
-    "            \"text\": original_text,\n",
-    "            \"anonymized_text\": anonymized_text,\n",
-    "            \"labels\": labels\n",
-    "        }\n",
-    "\n",
-    "        output_file = os.path.join(output_dir, f\"{Path(file_name).stem}.json\")\n",
-    "        with open(output_file, 'w', encoding='utf-8') as f:\n",
-    "            json.dump(output_data, f, ensure_ascii=False, indent=2)\n",
-    "\n",
-    "        logger.info(f\"JSON output written to {output_file}\")\n",
-    "\n",
-    "    def process_file(self, file_path: str, output_format: str = \"json\") -> Dict:\n",
-    "        \"\"\"Process a single text file.\"\"\"\n",
-    "        logger.info(f\"Processing file: {file_path}\")\n",
-    "\n",
-    "        try:\n",
-    "            with open(file_path, 'r', encoding='utf-8') as f:\n",
-    "                original_text = f.read()\n",
-    "\n",
-    "            # Call Gemini API for anonymization\n",
-    "            anonymized_text = self.call_gemini_api(original_text)\n",
-    "\n",
-    "            # Extract spans\n",
-    "            labels = self.extract_spans(original_text, anonymized_text)\n",
-    "\n",
-    "            file_name = os.path.basename(file_path)\n",
-    "\n",
-    "            if output_format == \"json\":\n",
-    "                self.write_json(file_name, original_text, anonymized_text, labels)\n",
-    "            elif output_format == \"txt\":\n",
-    "                self.write_txt(file_name, anonymized_text)\n",
-    "\n",
-    "            return {\n",
-    "                \"file\": file_name,\n",
-    "                \"original_text\": original_text,\n",
-    "                \"anonymized_text\": anonymized_text,\n",
-    "                \"labels\": labels,\n",
-    "                \"success\": True\n",
-    "            }\n",
-    "\n",
-    "        except Exception as e:\n",
-    "            logger.error(f\"Error processing file {file_path}: {e}\")\n",
-    "            return {\n",
-    "                \"file\": os.path.basename(file_path),\n",
-    "                \"success\": False,\n",
-    "                \"error\": str(e)\n",
-    "            }\n",
-    "\n",
-    "    def write_txt(self, file_name: str, anonymized_text: str, output_dir: str = \"output\"):\n",
-    "        \"\"\"Write anonymized text to a .txt file.\"\"\"\n",
-    "        os.makedirs(output_dir, exist_ok=True)\n",
-    "\n",
-    "        output_file = os.path.join(output_dir, file_name)\n",
-    "        with open(output_file, 'w', encoding='utf-8') as f:\n",
-    "            f.write(anonymized_text)\n",
-    "\n",
-    "        logger.info(f\"Anonymized text written to {output_file}\")\n",
-    "\n",
-    "    def process_directory(self, input_dir: str, output_format: str = \"json\") -> List[Dict]:\n",
-    "        \"\"\"Process all .txt files in a directory.\"\"\"\n",
-    "        input_path = Path(input_dir)\n",
-    "\n",
-    "        if not input_path.exists():\n",
-    "            raise FileNotFoundError(f\"Input directory '{input_dir}' does not exist\")\n",
-    "\n",
-    "        txt_files = list(input_path.glob(\"*.txt\"))\n",
-    "\n",
-    "        if not txt_files:\n",
-    "            logger.warning(f\"No .txt files found in {input_dir}\")\n",
-    "            return []\n",
-    "\n",
-    "        results = []\n",
-    "        for file_path in txt_files:\n",
-    "            result = self.process_file(str(file_path), output_format)\n",
-    "            results.append(result)\n",
-    "\n",
-    "        # Create summary JSON if processing multiple files\n",
-    "        if len(results) > 1 and output_format == \"json\":\n",
-    "            self.write_batch_summary(results)\n",
-    "\n",
-    "        return results\n",
-    "\n",
-    "    def write_batch_summary(self, results: List[Dict], output_dir: str = \"output\"):\n",
-    "        \"\"\"Write a summary of batch processing results.\"\"\"\n",
-    "        os.makedirs(output_dir, exist_ok=True)\n",
-    "\n",
-    "        summary = {\n",
-    "            \"total_files\": len(results),\n",
-    "            \"successful\": sum(1 for r in results if r.get(\"success\", False)),\n",
-    "            \"failed\": sum(1 for r in results if not r.get(\"success\", False)),\n",
-    "            \"files\": {}\n",
-    "        }\n",
-    "\n",
-    "        for result in results:\n",
-    "            if result.get(\"success\", False):\n",
-    "                summary[\"files\"][result[\"file\"]] = result[\"anonymized_text\"]\n",
-    "\n",
-    "        summary_file = os.path.join(output_dir, \"batch_summary.json\")\n",
-    "        with open(summary_file, 'w', encoding='utf-8') as f:\n",
-    "            json.dump(summary, f, ensure_ascii=False, indent=2)\n",
-    "\n",
-    "        logger.info(f\"Batch summary written to {summary_file}\")\n",
-    "\n",
-    "def main():\n",
-    "    \"\"\"Main CLI function.\"\"\"\n",
-    "    parser = argparse.ArgumentParser(description=\"Gemini Email Anonymization Pipeline\")\n",
-    "    parser.add_argument(\"../../../data/original/ground_truth_split/test_norm.json\", help=\"Input file or directory containing .txt files\")\n",
-    "    parser.add_argument(\"--api-key\", required=True, help=\"Google Gemini API key\")\n",
-    "    parser.add_argument(\"--model\", default=\"gemini-1.5-flash\", help=\"Gemini model to use\")\n",
-    "    parser.add_argument(\"--output-format\", choices=[\"json\", \"txt\"], default=\"json\",\n",
-    "                       help=\"Output format (json or txt)\")\n",
-    "    parser.add_argument(\"../../../data/testing/gemini_results\", default=\"output\", help=\"Output directory\")\n",
-    "\n",
-    "    args = parser.parse_args()\n",
-    "\n",
-    "    # Initialize anonymizer\n",
-    "    anonymizer = GeminiAnonymizer(args.api_key, args.model)\n",
-    "\n",
-    "    input_path = Path(args.input)\n",
-    "\n",
-    "    try:\n",
-    "        if input_path.is_file():\n",
-    "            # Process single file\n",
-    "            result = anonymizer.process_file(str(input_path), args.output_format)\n",
-    "            if result[\"success\"]:\n",
-    "                logger.info(\"File processed successfully\")\n",
-    "            else:\n",
-    "                logger.error(f\"Failed to process file: {result.get('error', 'Unknown error')}\")\n",
-    "\n",
-    "        elif input_path.is_dir():\n",
-    "            # Process directory\n",
-    "            results = anonymizer.process_directory(str(input_path), args.output_format)\n",
-    "            successful = sum(1 for r in results if r.get(\"success\", False))\n",
-    "            logger.info(f\"Processed {successful}/{len(results)} files successfully\")\n",
-    "\n",
-    "        else:\n",
-    "            logger.error(f\"Input path '{args.input}' is neither a file nor a directory\")\n",
-    "            return 1\n",
-    "\n",
-    "    except Exception as e:\n",
-    "        logger.error(f\"Error: {e}\")\n",
-    "        return 1\n",
-    "\n",
-    "    return 0\n",
-    "\n",
-    "if __name__ == \"__main__\":\n",
-    "    exit(main())"
-   ],
-   "id": "9425a0f4914e33fe"
-  }
- ],
- "metadata": {},
- "nbformat": 4,
- "nbformat_minor": 5
-}
+#%% md
+# Gemini Email Anonymization Pipeline
+
+A Python pipeline that uses the Google Gemini API to detect and anonymize
+sensitive entities in email texts using 21 custom labels.
+
+#%%
+#!/usr/bin/env python3
+
+import os
+import json
+import re
+import argparse
+import logging
+from typing import List, Dict, Optional, Tuple
+from pathlib import Path
+import google.generativeai as genai
+from dataclasses import dataclass
+
+# Configure logging
+logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
+logger = logging.getLogger(__name__)
+
+@dataclass
+class EntitySpan:
+    """Represents an entity span with start, end positions and label."""
+    start: int
+    end: int
+    label: str
+
+class GeminiAnonymizer:
+    """Main class for handling Gemini API-based email anonymization."""
+
+    # Target labels for anonymization
+    TARGET_LABELS = [
+        'NACHNAME', 'VORNAME', 'STRASSE', 'POSTLEITZAHL', 'WOHNORT',
+        'HAUSNUMMER', 'VERTRAGSNUMMER', 'DATUM', 'ZÄHLERNUMMER',
+        'TELEFONNUMMER', 'GESENDET_MIT', 'ZAHLUNG', 'FIRMA', 'TITEL',
+        'EMAIL', 'ZÄHLERSTAND', 'LINK', 'IBAN', 'BANK', 'BIC', 'FAX'
+    ]
+
+    def __init__(self, api_key: str, model_name: str = "gemini-1.5-flash"):
+        """Initialize the Gemini anonymizer with API key."""
+        genai.configure(api_key=api_key)
+        self.model = genai.GenerativeModel(model_name)
+
+    def _create_anonymization_prompt(self, text: str) -> str:
+        """Create a detailed prompt for the Gemini API to anonymize text."""
+        labels_str = "', '".join(self.TARGET_LABELS)
+
+        prompt = f"""You are an expert text anonymization system. Your task is to identify and replace sensitive entities in German email text with anonymization placeholders.
+
+IMPORTANT RULES:
+1. Only replace entities that match these 21 labels: ['{labels_str}']
+2. Replace each detected entity with <<LABEL>> (e.g., <<VORNAME>>, <<NACHNAME>>)
+3. Preserve the original text structure, formatting, and whitespace exactly
+4. Do not modify any text that doesn't contain sensitive entities
+5. Return ONLY the anonymized text, no explanations or metadata
+
+LABEL DEFINITIONS:
+- NACHNAME: Last names/surnames
+- VORNAME: First names/given names
+- STRASSE: Street names
+- POSTLEITZAHL: Postal codes
+- WOHNORT: City/town names
+- HAUSNUMMER: House numbers
+- VERTRAGSNUMMER: Contract numbers, all other seemingly sensitive numbers that don't fall into another category (e.g., OR-0001239759)
+- DATUM: Dates in any format, also only Months, or "10ter" ("tenth") of a month
+- ZÄHLERNUMMER: Meter numbers
+- TELEFONNUMMER: Phone numbers
+- GESENDET_MIT: "Sent with" messages (e.g., "Diese Nachricht wurde von meinem Android...")
+- ZAHLUNG: Payment information, Euros/ Cents etc.
+- FIRMA: Company names
+- TITEL: Titles (Mr., Mrs., Dr., Dipl., etc.)
+- EMAIL: Email addresses
+- ZÄHLERSTAND: Meter readings and differences in m3 or kwh etc.
+- LINK: URLs and web links
+- IBAN: International bank account numbers
+- BANK: Bank names
+- BIC: Bank identifier codes
+- FAX: Fax numbers
+
+EXAMPLE:
+Input: "Kunde: Gertraude Wagenknecht-Speer"
+Output: "Kunde: <<VORNAME>> <<NACHNAME>>"
+
+TEXT TO ANONYMIZE:
+{text}
+
+ANONYMIZED TEXT:"""
+
+        return prompt
+
+    def call_gemini_api(self, text: str) -> str:
+        """Call the Gemini API to anonymize the given text."""
+        try:
+            prompt = self._create_anonymization_prompt(text)
+            response = self.model.generate_content(prompt)
+
+            if response.text:
+                return response.text.strip()
+            else:
+                logger.error("Empty response from Gemini API")
+                return text
+
+        except Exception as e:
+            logger.error(f"Error calling Gemini API: {e}")
+            return text
+
+    def extract_spans(self, original_text: str, anonymized_text: str) -> List[Dict]:
+        """Extract entity spans by comparing original and anonymized texts."""
+        spans = []
+
+        # Find all placeholder patterns in anonymized text
+        placeholder_pattern = r'<<([A-Z_]+)>>'
+        placeholders = list(re.finditer(placeholder_pattern, anonymized_text))
+
+        if not placeholders:
+            return spans
+
+        # Create a mapping of positions
+        original_pos = 0
+        anonymized_pos = 0
+
+        for placeholder_match in placeholders:
+            placeholder_start = placeholder_match.start()
+            placeholder_end = placeholder_match.end()
+            label = placeholder_match.group(1)
+
+            # Find the corresponding position in original text
+            # Move to the placeholder position in anonymized text
+            while anonymized_pos < placeholder_start:
+                if (anonymized_pos < len(anonymized_text) and
+                    original_pos < len(original_text) and
+                    anonymized_text[anonymized_pos] == original_text[original_pos]):
+                    anonymized_pos += 1
+                    original_pos += 1
+                else:
+                    break
+
+            # Find the end of the original entity
+            entity_start = original_pos
+
+            # Look ahead to find where the next non-placeholder text matches
+            next_match_pos = self._find_next_match_position(
+                original_text, anonymized_text, original_pos, placeholder_end
+            )
+
+            if next_match_pos > entity_start:
+                spans.append({
+                    "start": entity_start,
+                    "end": next_match_pos,
+                    "label": label
+                })
+                original_pos = next_match_pos
+
+            anonymized_pos = placeholder_end
+
+        return spans
+
+    def _find_next_match_position(self, original_text: str, anonymized_text: str,
+                                 original_pos: int, anonymized_pos: int) -> int:
+        """Find the next position where original and anonymized text match."""
+        # Look for the next sequence of characters that match
+        window_size = 10  # Look ahead window
+
+        for i in range(original_pos, len(original_text)):
+            if anonymized_pos >= len(anonymized_text):
+                break
+
+            # Check if we have a match at this position
+            match_found = True
+            for j in range(min(window_size, len(original_text) - i, len(anonymized_text) - anonymized_pos)):
+                if (i + j >= len(original_text) or
+                    anonymized_pos + j >= len(anonymized_text) or
+                    original_text[i + j] != anonymized_text[anonymized_pos + j]):
+                    match_found = False
+                    break
+
+            if match_found:
+                return i
+
+        return len(original_text)
+
+    def anonymize_text(self, text: str, labels: List[Dict]) -> str:
+        """Anonymize text using provided labels (for manual override)."""
+        # Sort labels by start position in reverse order to avoid position shifts
+        sorted_labels = sorted(labels, key=lambda x: x['start'], reverse=True)
+
+        anonymized = text
+        for label_info in sorted_labels:
+            start = label_info['start']
+            end = label_info['end']
+            label = label_info['label']
+
+            anonymized = (anonymized[:start] +
+                         f"<<{label}>>" +
+                         anonymized[end:])
+
+        return anonymized
+
+    def write_json(self, file_name: str, original_text: str, anonymized_text: str,
+                   labels: List[Dict], output_dir: str = "output"):
+        """Write results to JSON file."""
+        os.makedirs(output_dir, exist_ok=True)
+
+        output_data = {
+            "file": file_name,
+            "text": original_text,
+            "anonymized_text": anonymized_text,
+            "labels": labels
+        }
+
+        output_file = os.path.join(output_dir, f"{Path(file_name).stem}.json")
+        with open(output_file, 'w', encoding='utf-8') as f:
+            json.dump(output_data, f, ensure_ascii=False, indent=2)
+
+        logger.info(f"JSON output written to {output_file}")
+
+    def process_file(self, file_path: str, output_format: str = "json") -> Dict:
+        """Process a single text file."""
+        logger.info(f"Processing file: {file_path}")
+
+        try:
+            with open(file_path, 'r', encoding='utf-8') as f:
+                original_text = f.read()
+
+            # Call Gemini API for anonymization
+            anonymized_text = self.call_gemini_api(original_text)
+
+            # Extract spans
+            labels = self.extract_spans(original_text, anonymized_text)
+
+            file_name = os.path.basename(file_path)
+
+            if output_format == "json":
+                self.write_json(file_name, original_text, anonymized_text, labels)
+            elif output_format == "txt":
+                self.write_txt(file_name, anonymized_text)
+
+            return {
+                "file": file_name,
+                "original_text": original_text,
+                "anonymized_text": anonymized_text,
+                "labels": labels,
+                "success": True
+            }
+
+        except Exception as e:
+            logger.error(f"Error processing file {file_path}: {e}")
+            return {
+                "file": os.path.basename(file_path),
+                "success": False,
+                "error": str(e)
+            }
+
+    def write_txt(self, file_name: str, anonymized_text: str, output_dir: str = "output"):
+        """Write anonymized text to a .txt file."""
+        os.makedirs(output_dir, exist_ok=True)
+
+        output_file = os.path.join(output_dir, file_name)
+        with open(output_file, 'w', encoding='utf-8') as f:
+            f.write(anonymized_text)
+
+        logger.info(f"Anonymized text written to {output_file}")
+
+    def process_directory(self, input_dir: str, output_format: str = "json") -> List[Dict]:
+        """Process all .txt files in a directory."""
+        input_path = Path(input_dir)
+
+        if not input_path.exists():
+            raise FileNotFoundError(f"Input directory '{input_dir}' does not exist")
+
+        txt_files = list(input_path.glob("*.txt"))
+
+        if not txt_files:
+            logger.warning(f"No .txt files found in {input_dir}")
+            return []
+
+        results = []
+        for file_path in txt_files:
+            result = self.process_file(str(file_path), output_format)
+            results.append(result)
+
+        # Create summary JSON if processing multiple files
+        if len(results) > 1 and output_format == "json":
+            self.write_batch_summary(results)
+
+        return results
+
+    def write_batch_summary(self, results: List[Dict], output_dir: str = "output"):
+        """Write a summary of batch processing results."""
+        os.makedirs(output_dir, exist_ok=True)
+
+        summary = {
+            "total_files": len(results),
+            "successful": sum(1 for r in results if r.get("success", False)),
+            "failed": sum(1 for r in results if not r.get("success", False)),
+            "files": {}
+        }
+
+        for result in results:
+            if result.get("success", False):
+                summary["files"][result["file"]] = result["anonymized_text"]
+
+        summary_file = os.path.join(output_dir, "batch_summary.json")
+        with open(summary_file, 'w', encoding='utf-8') as f:
+            json.dump(summary, f, ensure_ascii=False, indent=2)
+
+        logger.info(f"Batch summary written to {summary_file}")
+
+def main():
+    """Main CLI function."""
+    parser = argparse.ArgumentParser(description="Gemini Email Anonymization Pipeline")
+    parser.add_argument("../../../data/original/ground_truth_split/test_norm.json", help="Input file or directory containing .txt files")
+    parser.add_argument("--api-key", required=True, help="Google Gemini API key")
+    parser.add_argument("--model", default="gemini-1.5-flash", help="Gemini model to use")
+    parser.add_argument("--output-format", choices=["json", "txt"], default="json",
+                       help="Output format (json or txt)")
+    parser.add_argument("../../../data/testing/gemini_results", default="output", help="Output directory")
+
+    args = parser.parse_args()
+
+    # Initialize anonymizer
+    anonymizer = GeminiAnonymizer(args.api_key, args.model)
+
+    input_path = Path(args.input)
+
+    try:
+        if input_path.is_file():
+            # Process single file
+            result = anonymizer.process_file(str(input_path), args.output_format)
+            if result["success"]:
+                logger.info("File processed successfully")
+            else:
+                logger.error(f"Failed to process file: {result.get('error', 'Unknown error')}")
+
+        elif input_path.is_dir():
+            # Process directory
+            results = anonymizer.process_directory(str(input_path), args.output_format)
+            successful = sum(1 for r in results if r.get("success", False))
+            logger.info(f"Processed {successful}/{len(results)} files successfully")
+
+        else:
+            logger.error(f"Input path '{args.input}' is neither a file nor a directory")
+            return 1
+
+    except Exception as e:
+        logger.error(f"Error: {e}")
+        return 1
+
+    return 0
+
+if __name__ == "__main__":
+    exit(main())
\ No newline at end of file
Index: notebooks/1_data_preparation/2_data_split/dataset_descriptives.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"id\": \"initial_id\",\n   \"metadata\": {\n    \"collapsed\": true,\n    \"ExecuteTime\": {\n     \"end_time\": \"2025-07-13T10:05:54.273355Z\",\n     \"start_time\": \"2025-07-13T10:05:53.566366Z\"\n    }\n   },\n   \"source\": [\n    \"# Dataset Analysis Notebook\\n\",\n    \"# Analyze label distribution and completeness in JSON datasets\\n\",\n    \"\\n\",\n    \"import json\\n\",\n    \"import pandas as pd\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"import seaborn as sns\\n\",\n    \"from collections import Counter\\n\",\n    \"from typing import Dict, List, Set, Tuple\\n\",\n    \"\\n\",\n    \"# Define the expected labels\\n\",\n    \"PLACEHOLDERS = {\\n\",\n    \"    \\\"TITEL\\\"         :  [\\\"TITEL\\\"],\\n\",\n    \"    \\\"VORNAME\\\"       :  [\\\"VORNAME\\\"],\\n\",\n    \"    \\\"NACHNAME\\\"      :  [\\\"NACHNAME\\\"],\\n\",\n    \"    \\\"FIRMA\\\"         :  [\\\"FIRMA\\\"],\\n\",\n    \"    \\\"TELEFONNUMMER\\\" :  [\\\"TELEFONNUMMER\\\"],\\n\",\n    \"    \\\"EMAIL\\\"         :  [\\\"EMAIL\\\"],\\n\",\n    \"    \\\"FAX\\\"           :  [\\\"FAX\\\"],\\n\",\n    \"    \\\"STRASSE\\\"       :  [\\\"STRASSE\\\"],\\n\",\n    \"    \\\"HAUSNUMMER\\\"    :  [\\\"HAUSNUMMER\\\"],\\n\",\n    \"    \\\"POSTLEITZAHL\\\"  :  [\\\"POSTLEITZAHL\\\",\\\"PLZ\\\",\\\"ZIP\\\"],\\n\",\n    \"    \\\"WOHNORT\\\"       :  [\\\"WOHNORT\\\",\\\"ORT\\\",\\\"CITY\\\"],\\n\",\n    \"    \\\"ZÄHLERNUMMER\\\"  :  [\\\"ZÄHLERNUMMER\\\",\\\"METER_ID\\\"],\\n\",\n    \"    \\\"ZÄHLERSTAND\\\"   :  [\\\"ZÄHLERSTAND\\\",\\\"METER_READING\\\"],\\n\",\n    \"    \\\"VERTRAGSNUMMER\\\":  [\\\"VERTRAGSNUMMER\\\",\\\"ANGEBOTSNUMMER\\\", \\\"KUNDENNUMMER\\\"],\\n\",\n    \"    \\\"ZAHLUNG\\\"       :  [\\\"BETRAG\\\",\\\"ZAHLUNG\\\",\\\"AMOUNT\\\"],\\n\",\n    \"    \\\"BANK\\\"          :  [\\\"BANK\\\"],\\n\",\n    \"    \\\"IBAN\\\"          :  [\\\"IBAN\\\"],\\n\",\n    \"    \\\"BIC\\\"           :  [\\\"BIC\\\"],\\n\",\n    \"    \\\"DATUM\\\"         :  [\\\"DATUM\\\",\\\"DATE\\\"],\\n\",\n    \"    \\\"GESENDET_MIT\\\"  :  [\\\"GESENDET_MIT\\\"],\\n\",\n    \"    \\\"LINK\\\"          :  [\\\"LINK\\\"]\\n\",\n    \"}\\n\",\n    \"\\n\",\n    \"# Get all expected labels as a set\\n\",\n    \"EXPECTED_LABELS = set(PLACEHOLDERS.keys())\\n\",\n    \"\\n\",\n    \"def load_dataset(file_path: str) -> List[Dict]:\\n\",\n    \"    \\\"\\\"\\\"Load JSON dataset from file.\\\"\\\"\\\"\\n\",\n    \"    try:\\n\",\n    \"        with open(file_path, 'r', encoding='utf-8') as f:\\n\",\n    \"            data = json.load(f)\\n\",\n    \"        print(f\\\"✓ Successfully loaded dataset from: {file_path}\\\")\\n\",\n    \"        return data\\n\",\n    \"    except FileNotFoundError:\\n\",\n    \"        print(f\\\"❌ Error: File not found at {file_path}\\\")\\n\",\n    \"        return []\\n\",\n    \"    except json.JSONDecodeError as e:\\n\",\n    \"        print(f\\\"❌ Error: Invalid JSON format - {e}\\\")\\n\",\n    \"        return []\\n\",\n    \"    except Exception as e:\\n\",\n    \"        print(f\\\"❌ Error loading file: {e}\\\")\\n\",\n    \"        return []\\n\",\n    \"\\n\",\n    \"def extract_labels_from_sample(sample: Dict) -> Set[str]:\\n\",\n    \"    \\\"\\\"\\\"Extract unique labels from a single sample.\\\"\\\"\\\"\\n\",\n    \"    return {label['label'] for label in sample.get('labels', [])}\\n\",\n    \"\\n\",\n    \"def analyze_dataset(data: List[Dict]) -> Dict:\\n\",\n    \"    \\\"\\\"\\\"Perform comprehensive analysis of the dataset.\\\"\\\"\\\"\\n\",\n    \"    if not data:\\n\",\n    \"        return {}\\n\",\n    \"\\n\",\n    \"    # Basic statistics\\n\",\n    \"    num_samples = len(data)\\n\",\n    \"\\n\",\n    \"    # Extract all labels from all samples\\n\",\n    \"    all_labels = []\\n\",\n    \"    samples_with_labels = []\\n\",\n    \"\\n\",\n    \"    for sample in data:\\n\",\n    \"        sample_labels = extract_labels_from_sample(sample)\\n\",\n    \"        all_labels.extend(sample_labels)\\n\",\n    \"        samples_with_labels.append(sample_labels)\\n\",\n    \"\\n\",\n    \"    # Count label occurrences\\n\",\n    \"    label_counts = Counter(all_labels)\\n\",\n    \"    unique_labels = set(all_labels)\\n\",\n    \"\\n\",\n    \"    # Find missing labels\\n\",\n    \"    missing_labels = EXPECTED_LABELS - unique_labels\\n\",\n    \"\\n\",\n    \"    # Additional statistics\\n\",\n    \"    total_label_instances = len(all_labels)\\n\",\n    \"    samples_per_label = {label: sum(1 for s in samples_with_labels if label in s)\\n\",\n    \"                        for label in unique_labels}\\n\",\n    \"\\n\",\n    \"    # Labels per sample statistics\\n\",\n    \"    labels_per_sample = [len(sample_labels) for sample_labels in samples_with_labels]\\n\",\n    \"\\n\",\n    \"    return {\\n\",\n    \"        'num_samples': num_samples,\\n\",\n    \"        'unique_labels': unique_labels,\\n\",\n    \"        'label_counts': label_counts,\\n\",\n    \"        'missing_labels': missing_labels,\\n\",\n    \"        'total_label_instances': total_label_instances,\\n\",\n    \"        'samples_per_label': samples_per_label,\\n\",\n    \"        'labels_per_sample': labels_per_sample\\n\",\n    \"    }\\n\",\n    \"\\n\",\n    \"def print_analysis_summary(analysis: Dict, dataset_name: str = \\\"Dataset\\\"):\\n\",\n    \"    \\\"\\\"\\\"Print a comprehensive summary of the analysis.\\\"\\\"\\\"\\n\",\n    \"    if not analysis:\\n\",\n    \"        print(\\\"No analysis data available.\\\")\\n\",\n    \"        return\\n\",\n    \"\\n\",\n    \"    print(\\\"=\\\" * 60)\\n\",\n    \"    print(f\\\"\uD83D\uDCCA {dataset_name.upper()} ANALYSIS SUMMARY\\\")\\n\",\n    \"    print(\\\"=\\\" * 60)\\n\",\n    \"\\n\",\n    \"    # Basic statistics\\n\",\n    \"    print(f\\\"\\\\n\uD83D\uDCC8 BASIC STATISTICS:\\\")\\n\",\n    \"    print(f\\\"  Total samples: {analysis['num_samples']}\\\")\\n\",\n    \"    print(f\\\"  Total label instances: {analysis['total_label_instances']}\\\")\\n\",\n    \"    print(f\\\"  Unique labels found: {len(analysis['unique_labels'])}\\\")\\n\",\n    \"    print(f\\\"  Expected labels: {len(EXPECTED_LABELS)}\\\")\\n\",\n    \"\\n\",\n    \"    # Labels per sample statistics\\n\",\n    \"    labels_per_sample = analysis['labels_per_sample']\\n\",\n    \"    if labels_per_sample:\\n\",\n    \"        print(f\\\"  Average labels per sample: {sum(labels_per_sample) / len(labels_per_sample):.2f}\\\")\\n\",\n    \"        print(f\\\"  Min labels per sample: {min(labels_per_sample)}\\\")\\n\",\n    \"        print(f\\\"  Max labels per sample: {max(labels_per_sample)}\\\")\\n\",\n    \"\\n\",\n    \"    # Missing labels\\n\",\n    \"    print(f\\\"\\\\n\uD83D\uDD0D MISSING LABELS:\\\")\\n\",\n    \"    if analysis['missing_labels']:\\n\",\n    \"        print(f\\\"  Missing labels ({len(analysis['missing_labels'])}): {sorted(analysis['missing_labels'])}\\\")\\n\",\n    \"    else:\\n\",\n    \"        print(\\\"  ✓ All expected labels are present!\\\")\\n\",\n    \"\\n\",\n    \"    # Label frequency analysis\\n\",\n    \"    print(f\\\"\\\\n\uD83D\uDCCA LABEL FREQUENCY ANALYSIS:\\\")\\n\",\n    \"    label_counts = analysis['label_counts']\\n\",\n    \"    sorted_labels = sorted(label_counts.items(), key=lambda x: x[1], reverse=True)\\n\",\n    \"\\n\",\n    \"    print(f\\\"  {'Label':<15} {'Count':<8} {'Samples':<8} {'%':<8}\\\")\\n\",\n    \"    print(f\\\"  {'-'*15} {'-'*8} {'-'*8} {'-'*8}\\\")\\n\",\n    \"\\n\",\n    \"    for label, count in sorted_labels:\\n\",\n    \"        samples_with_label = analysis['samples_per_label'][label]\\n\",\n    \"        percentage = (samples_with_label / analysis['num_samples']) * 100\\n\",\n    \"        print(f\\\"  {label:<15} {count:<8} {samples_with_label:<8} {percentage:<8.1f}%\\\")\\n\",\n    \"\\n\",\n    \"def create_visualizations(analysis: Dict, dataset_name: str = \\\"Dataset\\\"):\\n\",\n    \"    \\\"\\\"\\\"Create visualizations for the dataset analysis.\\\"\\\"\\\"\\n\",\n    \"    if not analysis or not analysis['label_counts']:\\n\",\n    \"        print(\\\"No data available for visualization.\\\")\\n\",\n    \"        return\\n\",\n    \"\\n\",\n    \"    # Set up the plotting style\\n\",\n    \"    plt.style.use('default')\\n\",\n    \"    fig, axes = plt.subplots(2, 2, figsize=(15, 12))\\n\",\n    \"    fig.suptitle(f'{dataset_name} - Label Analysis Visualizations', fontsize=16, fontweight='bold')\\n\",\n    \"\\n\",\n    \"    # 1. Label frequency bar chart\\n\",\n    \"    label_counts = analysis['label_counts']\\n\",\n    \"    sorted_labels = sorted(label_counts.items(), key=lambda x: x[1], reverse=True)\\n\",\n    \"    labels, counts = zip(*sorted_labels)\\n\",\n    \"\\n\",\n    \"    axes[0, 0].bar(range(len(labels)), counts, color='skyblue', edgecolor='navy', alpha=0.7)\\n\",\n    \"    axes[0, 0].set_title('Label Frequency (Total Instances)', fontweight='bold')\\n\",\n    \"    axes[0, 0].set_xlabel('Labels')\\n\",\n    \"    axes[0, 0].set_ylabel('Count')\\n\",\n    \"    axes[0, 0].set_xticks(range(len(labels)))\\n\",\n    \"    axes[0, 0].set_xticklabels(labels, rotation=45, ha='right')\\n\",\n    \"    axes[0, 0].grid(axis='y', alpha=0.3)\\n\",\n    \"\\n\",\n    \"    # 2. Samples per label bar chart\\n\",\n    \"    samples_per_label = analysis['samples_per_label']\\n\",\n    \"    sorted_samples = sorted(samples_per_label.items(), key=lambda x: x[1], reverse=True)\\n\",\n    \"    labels_spl, samples_spl = zip(*sorted_samples)\\n\",\n    \"\\n\",\n    \"    axes[0, 1].bar(range(len(labels_spl)), samples_spl, color='lightcoral', edgecolor='darkred', alpha=0.7)\\n\",\n    \"    axes[0, 1].set_title('Samples Containing Each Label', fontweight='bold')\\n\",\n    \"    axes[0, 1].set_xlabel('Labels')\\n\",\n    \"    axes[0, 1].set_ylabel('Number of Samples')\\n\",\n    \"    axes[0, 1].set_xticks(range(len(labels_spl)))\\n\",\n    \"    axes[0, 1].set_xticklabels(labels_spl, rotation=45, ha='right')\\n\",\n    \"    axes[0, 1].grid(axis='y', alpha=0.3)\\n\",\n    \"\\n\",\n    \"    # 3. Labels per sample distribution\\n\",\n    \"    labels_per_sample = analysis['labels_per_sample']\\n\",\n    \"    axes[1, 0].hist(labels_per_sample, bins=max(labels_per_sample)-min(labels_per_sample)+1,\\n\",\n    \"                   color='lightgreen', edgecolor='darkgreen', alpha=0.7)\\n\",\n    \"    axes[1, 0].set_title('Distribution of Labels per Sample', fontweight='bold')\\n\",\n    \"    axes[1, 0].set_xlabel('Number of Labels per Sample')\\n\",\n    \"    axes[1, 0].set_ylabel('Frequency')\\n\",\n    \"    axes[1, 0].grid(axis='y', alpha=0.3)\\n\",\n    \"\\n\",\n    \"    # 4. Label completeness pie chart\\n\",\n    \"    present_labels = len(analysis['unique_labels'])\\n\",\n    \"    missing_labels = len(analysis['missing_labels'])\\n\",\n    \"\\n\",\n    \"    labels_pie = ['Present Labels', 'Missing Labels']\\n\",\n    \"    sizes = [present_labels, missing_labels]\\n\",\n    \"    colors = ['lightblue', 'lightcoral']\\n\",\n    \"\\n\",\n    \"    axes[1, 1].pie(sizes, labels=labels_pie, colors=colors, autopct='%1.1f%%', startangle=90)\\n\",\n    \"    axes[1, 1].set_title('Label Completeness', fontweight='bold')\\n\",\n    \"\\n\",\n    \"    plt.tight_layout()\\n\",\n    \"    plt.show()\\n\",\n    \"\\n\",\n    \"def create_detailed_dataframe(analysis: Dict) -> pd.DataFrame:\\n\",\n    \"    \\\"\\\"\\\"Create a detailed DataFrame with label statistics.\\\"\\\"\\\"\\n\",\n    \"    if not analysis or not analysis['label_counts']:\\n\",\n    \"        return pd.DataFrame()\\n\",\n    \"\\n\",\n    \"    # Prepare data for DataFrame\\n\",\n    \"    data_rows = []\\n\",\n    \"\\n\",\n    \"    for label in EXPECTED_LABELS:\\n\",\n    \"        if label in analysis['unique_labels']:\\n\",\n    \"            count = analysis['label_counts'][label]\\n\",\n    \"            samples = analysis['samples_per_label'][label]\\n\",\n    \"            percentage = (samples / analysis['num_samples']) * 100\\n\",\n    \"            status = 'Present'\\n\",\n    \"        else:\\n\",\n    \"            count = 0\\n\",\n    \"            samples = 0\\n\",\n    \"            percentage = 0.0\\n\",\n    \"            status = 'Missing'\\n\",\n    \"\\n\",\n    \"        data_rows.append({\\n\",\n    \"            'Label': label,\\n\",\n    \"            'Status': status,\\n\",\n    \"            'Total_Instances': count,\\n\",\n    \"            'Samples_With_Label': samples,\\n\",\n    \"            'Percentage_of_Samples': round(percentage, 2)\\n\",\n    \"        })\\n\",\n    \"\\n\",\n    \"    df = pd.DataFrame(data_rows)\\n\",\n    \"    return df.sort_values('Total_Instances', ascending=False)\\n\",\n    \"\\n\",\n    \"# Main analysis function\\n\",\n    \"def analyze_dataset_file(file_path: str, dataset_name: str = None):\\n\",\n    \"    \\\"\\\"\\\"Complete analysis workflow for a dataset file.\\\"\\\"\\\"\\n\",\n    \"    if dataset_name is None:\\n\",\n    \"        dataset_name = file_path.split('/')[-1].replace('.json', '')\\n\",\n    \"\\n\",\n    \"    print(f\\\"\uD83D\uDD0D Analyzing dataset: {dataset_name}\\\")\\n\",\n    \"    print(f\\\"\uD83D\uDCC1 File path: {file_path}\\\")\\n\",\n    \"    print(\\\"-\\\" * 60)\\n\",\n    \"\\n\",\n    \"    # Load dataset\\n\",\n    \"    data = load_dataset(file_path)\\n\",\n    \"    if not data:\\n\",\n    \"        return None\\n\",\n    \"\\n\",\n    \"    # Perform analysis\\n\",\n    \"    analysis = analyze_dataset(data)\\n\",\n    \"\\n\",\n    \"    # Print summary\\n\",\n    \"    print_analysis_summary(analysis, dataset_name)\\n\",\n    \"\\n\",\n    \"    # Create visualizations\\n\",\n    \"    create_visualizations(analysis, dataset_name)\\n\",\n    \"\\n\",\n    \"    # Create detailed DataFrame\\n\",\n    \"    df = create_detailed_dataframe(analysis)\\n\",\n    \"    print(f\\\"\\\\n\uD83D\uDCCB DETAILED LABEL STATISTICS:\\\")\\n\",\n    \"    print(df.to_string(index=False))\\n\",\n    \"\\n\",\n    \"    return analysis, df\\n\",\n    \"\\n\",\n    \"# Example usage:\\n\",\n    \"if __name__ == \\\"__main__\\\":\\n\",\n    \"    # Example: Analyze a dataset\\n\",\n    \"    # Change this path to your dataset file\\n\",\n    \"    # file_path = \\\"./train.json\\\"\\n\",\n    \"\\n\",\n    \"    # Run the analysis\\n\",\n    \"    # analysis, df = analyze_dataset_file(file_path, \\\"Training Dataset\\\")\\n\",\n    \"\\n\",\n    \"    # You can also analyze multiple datasets:\\n\",\n    \"    datasets = [\\n\",\n    \"        (\\\"./train.json\\\", \\\"Training Set\\\"),\\n\",\n    \"        (\\\"./validation.json\\\", \\\"Validation Set\\\"),\\n\",\n    \"        (\\\"./test.json\\\", \\\"Test Set\\\")\\n\",\n    \"    ]\\n\",\n    \"\\n\",\n    \"    print(\\\"\\\\n\\\" + \\\"=\\\"*80)\\n\",\n    \"    print(\\\"\uD83D\uDCCA ANALYZING ALL DATASETS\\\")\\n\",\n    \"    print(\\\"=\\\"*80)\\n\",\n    \"\\n\",\n    \"    for file_path, name in datasets:\\n\",\n    \"        print(f\\\"\\\\n{'='*20} {name.upper()} {'='*20}\\\")\\n\",\n    \"        try:\\n\",\n    \"            analysis, df = analyze_dataset_file(file_path, name)\\n\",\n    \"        except Exception as e:\\n\",\n    \"            print(f\\\"❌ Error analyzing {name}: {e}\\\")\"\n   ],\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"\\n\",\n      \"================================================================================\\n\",\n      \"\uD83D\uDCCA ANALYZING ALL DATASETS\\n\",\n      \"================================================================================\\n\",\n      \"\\n\",\n      \"==================== TRAINING SET ====================\\n\",\n      \"\uD83D\uDD0D Analyzing dataset: Training Set\\n\",\n      \"\uD83D\uDCC1 File path: ./train.json\\n\",\n      \"------------------------------------------------------------\\n\",\n      \"✓ Successfully loaded dataset from: ./train.json\\n\",\n      \"============================================================\\n\",\n      \"\uD83D\uDCCA TRAINING SET ANALYSIS SUMMARY\\n\",\n      \"============================================================\\n\",\n      \"\\n\",\n      \"\uD83D\uDCC8 BASIC STATISTICS:\\n\",\n      \"  Total samples: 96\\n\",\n      \"  Total label instances: 527\\n\",\n      \"  Unique labels found: 21\\n\",\n      \"  Expected labels: 21\\n\",\n      \"  Average labels per sample: 5.49\\n\",\n      \"  Min labels per sample: 1\\n\",\n      \"  Max labels per sample: 13\\n\",\n      \"\\n\",\n      \"\uD83D\uDD0D MISSING LABELS:\\n\",\n      \"  ✓ All expected labels are present!\\n\",\n      \"\\n\",\n      \"\uD83D\uDCCA LABEL FREQUENCY ANALYSIS:\\n\",\n      \"  Label           Count    Samples  %       \\n\",\n      \"  --------------- -------- -------- --------\\n\",\n      \"  NACHNAME        93       93       96.9    %\\n\",\n      \"  VORNAME         88       88       91.7    %\\n\",\n      \"  STRASSE         42       42       43.8    %\\n\",\n      \"  WOHNORT         40       40       41.7    %\\n\",\n      \"  POSTLEITZAHL    40       40       41.7    %\\n\",\n      \"  HAUSNUMMER      40       40       41.7    %\\n\",\n      \"  VERTRAGSNUMMER  36       36       37.5    %\\n\",\n      \"  DATUM           29       29       30.2    %\\n\",\n      \"  ZÄHLERNUMMER    26       26       27.1    %\\n\",\n      \"  TELEFONNUMMER   19       19       19.8    %\\n\",\n      \"  GESENDET_MIT    16       16       16.7    %\\n\",\n      \"  ZAHLUNG         13       13       13.5    %\\n\",\n      \"  FIRMA           13       13       13.5    %\\n\",\n      \"  TITEL           8        8        8.3     %\\n\",\n      \"  EMAIL           8        8        8.3     %\\n\",\n      \"  ZÄHLERSTAND     5        5        5.2     %\\n\",\n      \"  LINK            4        4        4.2     %\\n\",\n      \"  IBAN            3        3        3.1     %\\n\",\n      \"  BANK            2        2        2.1     %\\n\",\n      \"  BIC             1        1        1.0     %\\n\",\n      \"  FAX             1        1        1.0     %\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<Figure size 1500x1200 with 4 Axes>\"\n      ],\n      \"image/png\": \"\"\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"\\n\",\n      \"\uD83D\uDCCB DETAILED LABEL STATISTICS:\\n\",\n      \"         Label  Status  Total_Instances  Samples_With_Label  Percentage_of_Samples\\n\",\n      \"      NACHNAME Present               93                  93                  96.88\\n\",\n      \"       VORNAME Present               88                  88                  91.67\\n\",\n      \"       STRASSE Present               42                  42                  43.75\\n\",\n      \"       WOHNORT Present               40                  40                  41.67\\n\",\n      \"    HAUSNUMMER Present               40                  40                  41.67\\n\",\n      \"  POSTLEITZAHL Present               40                  40                  41.67\\n\",\n      \"VERTRAGSNUMMER Present               36                  36                  37.50\\n\",\n      \"         DATUM Present               29                  29                  30.21\\n\",\n      \"  ZÄHLERNUMMER Present               26                  26                  27.08\\n\",\n      \" TELEFONNUMMER Present               19                  19                  19.79\\n\",\n      \"  GESENDET_MIT Present               16                  16                  16.67\\n\",\n      \"         FIRMA Present               13                  13                  13.54\\n\",\n      \"       ZAHLUNG Present               13                  13                  13.54\\n\",\n      \"         EMAIL Present                8                   8                   8.33\\n\",\n      \"         TITEL Present                8                   8                   8.33\\n\",\n      \"   ZÄHLERSTAND Present                5                   5                   5.21\\n\",\n      \"          LINK Present                4                   4                   4.17\\n\",\n      \"          IBAN Present                3                   3                   3.12\\n\",\n      \"          BANK Present                2                   2                   2.08\\n\",\n      \"           FAX Present                1                   1                   1.04\\n\",\n      \"           BIC Present                1                   1                   1.04\\n\",\n      \"\\n\",\n      \"==================== VALIDATION SET ====================\\n\",\n      \"\uD83D\uDD0D Analyzing dataset: Validation Set\\n\",\n      \"\uD83D\uDCC1 File path: ./validation.json\\n\",\n      \"------------------------------------------------------------\\n\",\n      \"✓ Successfully loaded dataset from: ./validation.json\\n\",\n      \"============================================================\\n\",\n      \"\uD83D\uDCCA VALIDATION SET ANALYSIS SUMMARY\\n\",\n      \"============================================================\\n\",\n      \"\\n\",\n      \"\uD83D\uDCC8 BASIC STATISTICS:\\n\",\n      \"  Total samples: 25\\n\",\n      \"  Total label instances: 121\\n\",\n      \"  Unique labels found: 21\\n\",\n      \"  Expected labels: 21\\n\",\n      \"  Average labels per sample: 4.84\\n\",\n      \"  Min labels per sample: 0\\n\",\n      \"  Max labels per sample: 13\\n\",\n      \"\\n\",\n      \"\uD83D\uDD0D MISSING LABELS:\\n\",\n      \"  ✓ All expected labels are present!\\n\",\n      \"\\n\",\n      \"\uD83D\uDCCA LABEL FREQUENCY ANALYSIS:\\n\",\n      \"  Label           Count    Samples  %       \\n\",\n      \"  --------------- -------- -------- --------\\n\",\n      \"  NACHNAME        24       24       96.0    %\\n\",\n      \"  VORNAME         21       21       84.0    %\\n\",\n      \"  VERTRAGSNUMMER  11       11       44.0    %\\n\",\n      \"  DATUM           11       11       44.0    %\\n\",\n      \"  WOHNORT         6        6        24.0    %\\n\",\n      \"  POSTLEITZAHL    6        6        24.0    %\\n\",\n      \"  HAUSNUMMER      6        6        24.0    %\\n\",\n      \"  STRASSE         6        6        24.0    %\\n\",\n      \"  ZÄHLERNUMMER    5        5        20.0    %\\n\",\n      \"  GESENDET_MIT    4        4        16.0    %\\n\",\n      \"  FIRMA           3        3        12.0    %\\n\",\n      \"  TELEFONNUMMER   3        3        12.0    %\\n\",\n      \"  TITEL           3        3        12.0    %\\n\",\n      \"  FAX             2        2        8.0     %\\n\",\n      \"  EMAIL           2        2        8.0     %\\n\",\n      \"  ZÄHLERSTAND     2        2        8.0     %\\n\",\n      \"  ZAHLUNG         2        2        8.0     %\\n\",\n      \"  BIC             1        1        4.0     %\\n\",\n      \"  IBAN            1        1        4.0     %\\n\",\n      \"  BANK            1        1        4.0     %\\n\",\n      \"  LINK            1        1        4.0     %\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<Figure size 1500x1200 with 4 Axes>\"\n      ],\n      \"image/png\": \"\"\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"\\n\",\n      \"\uD83D\uDCCB DETAILED LABEL STATISTICS:\\n\",\n      \"         Label  Status  Total_Instances  Samples_With_Label  Percentage_of_Samples\\n\",\n      \"      NACHNAME Present               24                  24                   96.0\\n\",\n      \"       VORNAME Present               21                  21                   84.0\\n\",\n      \"VERTRAGSNUMMER Present               11                  11                   44.0\\n\",\n      \"         DATUM Present               11                  11                   44.0\\n\",\n      \"  POSTLEITZAHL Present                6                   6                   24.0\\n\",\n      \"       STRASSE Present                6                   6                   24.0\\n\",\n      \"       WOHNORT Present                6                   6                   24.0\\n\",\n      \"    HAUSNUMMER Present                6                   6                   24.0\\n\",\n      \"  ZÄHLERNUMMER Present                5                   5                   20.0\\n\",\n      \"  GESENDET_MIT Present                4                   4                   16.0\\n\",\n      \" TELEFONNUMMER Present                3                   3                   12.0\\n\",\n      \"         FIRMA Present                3                   3                   12.0\\n\",\n      \"         TITEL Present                3                   3                   12.0\\n\",\n      \"           FAX Present                2                   2                    8.0\\n\",\n      \"   ZÄHLERSTAND Present                2                   2                    8.0\\n\",\n      \"         EMAIL Present                2                   2                    8.0\\n\",\n      \"       ZAHLUNG Present                2                   2                    8.0\\n\",\n      \"           BIC Present                1                   1                    4.0\\n\",\n      \"          LINK Present                1                   1                    4.0\\n\",\n      \"          IBAN Present                1                   1                    4.0\\n\",\n      \"          BANK Present                1                   1                    4.0\\n\",\n      \"\\n\",\n      \"==================== TEST SET ====================\\n\",\n      \"\uD83D\uDD0D Analyzing dataset: Test Set\\n\",\n      \"\uD83D\uDCC1 File path: ./test.json\\n\",\n      \"------------------------------------------------------------\\n\",\n      \"✓ Successfully loaded dataset from: ./test.json\\n\",\n      \"============================================================\\n\",\n      \"\uD83D\uDCCA TEST SET ANALYSIS SUMMARY\\n\",\n      \"============================================================\\n\",\n      \"\\n\",\n      \"\uD83D\uDCC8 BASIC STATISTICS:\\n\",\n      \"  Total samples: 41\\n\",\n      \"  Total label instances: 212\\n\",\n      \"  Unique labels found: 23\\n\",\n      \"  Expected labels: 21\\n\",\n      \"  Average labels per sample: 5.17\\n\",\n      \"  Min labels per sample: 2\\n\",\n      \"  Max labels per sample: 12\\n\",\n      \"\\n\",\n      \"\uD83D\uDD0D MISSING LABELS:\\n\",\n      \"  ✓ All expected labels are present!\\n\",\n      \"\\n\",\n      \"\uD83D\uDCCA LABEL FREQUENCY ANALYSIS:\\n\",\n      \"  Label           Count    Samples  %       \\n\",\n      \"  --------------- -------- -------- --------\\n\",\n      \"  NACHNAME        37       37       90.2    %\\n\",\n      \"  VORNAME         37       37       90.2    %\\n\",\n      \"  VERTRAGSNUMMER  18       18       43.9    %\\n\",\n      \"  DATUM           15       15       36.6    %\\n\",\n      \"  WOHNORT         13       13       31.7    %\\n\",\n      \"  POSTLEITZAHL    13       13       31.7    %\\n\",\n      \"  HAUSNUMMER      12       12       29.3    %\\n\",\n      \"  STRASSE         12       12       29.3    %\\n\",\n      \"  TELEFONNUMMER   11       11       26.8    %\\n\",\n      \"  ZAHLUNG         7        7        17.1    %\\n\",\n      \"  ZÄHLERNUMMER    7        7        17.1    %\\n\",\n      \"  GESENDET_MIT    5        5        12.2    %\\n\",\n      \"  IBAN            4        4        9.8     %\\n\",\n      \"  TITEL           3        3        7.3     %\\n\",\n      \"  ZÄHLERSTAND     3        3        7.3     %\\n\",\n      \"  EMAIL           3        3        7.3     %\\n\",\n      \"  FIRMA           3        3        7.3     %\\n\",\n      \"  LINK            2        2        4.9     %\\n\",\n      \"  FAX             2        2        4.9     %\\n\",\n      \"  BANK            2        2        4.9     %\\n\",\n      \"  BIC             1        1        2.4     %\\n\",\n      \"  NAME            1        1        2.4     %\\n\",\n      \"  ADRESSE         1        1        2.4     %\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<Figure size 1500x1200 with 4 Axes>\"\n      ],\n      \"image/png\": \"\"\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"\\n\",\n      \"\uD83D\uDCCB DETAILED LABEL STATISTICS:\\n\",\n      \"         Label  Status  Total_Instances  Samples_With_Label  Percentage_of_Samples\\n\",\n      \"       VORNAME Present               37                  37                  90.24\\n\",\n      \"      NACHNAME Present               37                  37                  90.24\\n\",\n      \"VERTRAGSNUMMER Present               18                  18                  43.90\\n\",\n      \"         DATUM Present               15                  15                  36.59\\n\",\n      \"  POSTLEITZAHL Present               13                  13                  31.71\\n\",\n      \"       WOHNORT Present               13                  13                  31.71\\n\",\n      \"       STRASSE Present               12                  12                  29.27\\n\",\n      \"    HAUSNUMMER Present               12                  12                  29.27\\n\",\n      \" TELEFONNUMMER Present               11                  11                  26.83\\n\",\n      \"  ZÄHLERNUMMER Present                7                   7                  17.07\\n\",\n      \"       ZAHLUNG Present                7                   7                  17.07\\n\",\n      \"  GESENDET_MIT Present                5                   5                  12.20\\n\",\n      \"          IBAN Present                4                   4                   9.76\\n\",\n      \"         FIRMA Present                3                   3                   7.32\\n\",\n      \"   ZÄHLERSTAND Present                3                   3                   7.32\\n\",\n      \"         EMAIL Present                3                   3                   7.32\\n\",\n      \"         TITEL Present                3                   3                   7.32\\n\",\n      \"           FAX Present                2                   2                   4.88\\n\",\n      \"          LINK Present                2                   2                   4.88\\n\",\n      \"          BANK Present                2                   2                   4.88\\n\",\n      \"           BIC Present                1                   1                   2.44\\n\"\n     ]\n    }\n   ],\n   \"execution_count\": 4\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 2\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython2\",\n   \"version\": \"2.7.6\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notebooks/1_data_preparation/2_data_split/dataset_descriptives.ipynb b/notebooks/1_data_preparation/2_data_split/dataset_descriptives.ipynb
--- a/notebooks/1_data_preparation/2_data_split/dataset_descriptives.ipynb	(revision 68e3fd01408523769b50e7566e6fd0db7c5afb8a)
+++ b/notebooks/1_data_preparation/2_data_split/dataset_descriptives.ipynb	(date 1754049669053)
@@ -1,604 +1,440 @@
-{
- "cells": [
-  {
-   "cell_type": "code",
-   "id": "initial_id",
-   "metadata": {
-    "collapsed": true,
-    "ExecuteTime": {
-     "end_time": "2025-07-13T10:05:54.273355Z",
-     "start_time": "2025-07-13T10:05:53.566366Z"
-    }
-   },
-   "source": [
-    "# Dataset Analysis Notebook\n",
-    "# Analyze label distribution and completeness in JSON datasets\n",
-    "\n",
-    "import json\n",
-    "import pandas as pd\n",
-    "import matplotlib.pyplot as plt\n",
-    "import seaborn as sns\n",
-    "from collections import Counter\n",
-    "from typing import Dict, List, Set, Tuple\n",
-    "\n",
-    "# Define the expected labels\n",
-    "PLACEHOLDERS = {\n",
-    "    \"TITEL\"         :  [\"TITEL\"],\n",
-    "    \"VORNAME\"       :  [\"VORNAME\"],\n",
-    "    \"NACHNAME\"      :  [\"NACHNAME\"],\n",
-    "    \"FIRMA\"         :  [\"FIRMA\"],\n",
-    "    \"TELEFONNUMMER\" :  [\"TELEFONNUMMER\"],\n",
-    "    \"EMAIL\"         :  [\"EMAIL\"],\n",
-    "    \"FAX\"           :  [\"FAX\"],\n",
-    "    \"STRASSE\"       :  [\"STRASSE\"],\n",
-    "    \"HAUSNUMMER\"    :  [\"HAUSNUMMER\"],\n",
-    "    \"POSTLEITZAHL\"  :  [\"POSTLEITZAHL\",\"PLZ\",\"ZIP\"],\n",
-    "    \"WOHNORT\"       :  [\"WOHNORT\",\"ORT\",\"CITY\"],\n",
-    "    \"ZÄHLERNUMMER\"  :  [\"ZÄHLERNUMMER\",\"METER_ID\"],\n",
-    "    \"ZÄHLERSTAND\"   :  [\"ZÄHLERSTAND\",\"METER_READING\"],\n",
-    "    \"VERTRAGSNUMMER\":  [\"VERTRAGSNUMMER\",\"ANGEBOTSNUMMER\", \"KUNDENNUMMER\"],\n",
-    "    \"ZAHLUNG\"       :  [\"BETRAG\",\"ZAHLUNG\",\"AMOUNT\"],\n",
-    "    \"BANK\"          :  [\"BANK\"],\n",
-    "    \"IBAN\"          :  [\"IBAN\"],\n",
-    "    \"BIC\"           :  [\"BIC\"],\n",
-    "    \"DATUM\"         :  [\"DATUM\",\"DATE\"],\n",
-    "    \"GESENDET_MIT\"  :  [\"GESENDET_MIT\"],\n",
-    "    \"LINK\"          :  [\"LINK\"]\n",
-    "}\n",
-    "\n",
-    "# Get all expected labels as a set\n",
-    "EXPECTED_LABELS = set(PLACEHOLDERS.keys())\n",
-    "\n",
-    "def load_dataset(file_path: str) -> List[Dict]:\n",
-    "    \"\"\"Load JSON dataset from file.\"\"\"\n",
-    "    try:\n",
-    "        with open(file_path, 'r', encoding='utf-8') as f:\n",
-    "            data = json.load(f)\n",
-    "        print(f\"✓ Successfully loaded dataset from: {file_path}\")\n",
-    "        return data\n",
-    "    except FileNotFoundError:\n",
-    "        print(f\"❌ Error: File not found at {file_path}\")\n",
-    "        return []\n",
-    "    except json.JSONDecodeError as e:\n",
-    "        print(f\"❌ Error: Invalid JSON format - {e}\")\n",
-    "        return []\n",
-    "    except Exception as e:\n",
-    "        print(f\"❌ Error loading file: {e}\")\n",
-    "        return []\n",
-    "\n",
-    "def extract_labels_from_sample(sample: Dict) -> Set[str]:\n",
-    "    \"\"\"Extract unique labels from a single sample.\"\"\"\n",
-    "    return {label['label'] for label in sample.get('labels', [])}\n",
-    "\n",
-    "def analyze_dataset(data: List[Dict]) -> Dict:\n",
-    "    \"\"\"Perform comprehensive analysis of the dataset.\"\"\"\n",
-    "    if not data:\n",
-    "        return {}\n",
-    "\n",
-    "    # Basic statistics\n",
-    "    num_samples = len(data)\n",
-    "\n",
-    "    # Extract all labels from all samples\n",
-    "    all_labels = []\n",
-    "    samples_with_labels = []\n",
-    "\n",
-    "    for sample in data:\n",
-    "        sample_labels = extract_labels_from_sample(sample)\n",
-    "        all_labels.extend(sample_labels)\n",
-    "        samples_with_labels.append(sample_labels)\n",
-    "\n",
-    "    # Count label occurrences\n",
-    "    label_counts = Counter(all_labels)\n",
-    "    unique_labels = set(all_labels)\n",
-    "\n",
-    "    # Find missing labels\n",
-    "    missing_labels = EXPECTED_LABELS - unique_labels\n",
-    "\n",
-    "    # Additional statistics\n",
-    "    total_label_instances = len(all_labels)\n",
-    "    samples_per_label = {label: sum(1 for s in samples_with_labels if label in s)\n",
-    "                        for label in unique_labels}\n",
-    "\n",
-    "    # Labels per sample statistics\n",
-    "    labels_per_sample = [len(sample_labels) for sample_labels in samples_with_labels]\n",
-    "\n",
-    "    return {\n",
-    "        'num_samples': num_samples,\n",
-    "        'unique_labels': unique_labels,\n",
-    "        'label_counts': label_counts,\n",
-    "        'missing_labels': missing_labels,\n",
-    "        'total_label_instances': total_label_instances,\n",
-    "        'samples_per_label': samples_per_label,\n",
-    "        'labels_per_sample': labels_per_sample\n",
-    "    }\n",
-    "\n",
-    "def print_analysis_summary(analysis: Dict, dataset_name: str = \"Dataset\"):\n",
-    "    \"\"\"Print a comprehensive summary of the analysis.\"\"\"\n",
-    "    if not analysis:\n",
-    "        print(\"No analysis data available.\")\n",
-    "        return\n",
-    "\n",
-    "    print(\"=\" * 60)\n",
-    "    print(f\"📊 {dataset_name.upper()} ANALYSIS SUMMARY\")\n",
-    "    print(\"=\" * 60)\n",
-    "\n",
-    "    # Basic statistics\n",
-    "    print(f\"\\n📈 BASIC STATISTICS:\")\n",
-    "    print(f\"  Total samples: {analysis['num_samples']}\")\n",
-    "    print(f\"  Total label instances: {analysis['total_label_instances']}\")\n",
-    "    print(f\"  Unique labels found: {len(analysis['unique_labels'])}\")\n",
-    "    print(f\"  Expected labels: {len(EXPECTED_LABELS)}\")\n",
-    "\n",
-    "    # Labels per sample statistics\n",
-    "    labels_per_sample = analysis['labels_per_sample']\n",
-    "    if labels_per_sample:\n",
-    "        print(f\"  Average labels per sample: {sum(labels_per_sample) / len(labels_per_sample):.2f}\")\n",
-    "        print(f\"  Min labels per sample: {min(labels_per_sample)}\")\n",
-    "        print(f\"  Max labels per sample: {max(labels_per_sample)}\")\n",
-    "\n",
-    "    # Missing labels\n",
-    "    print(f\"\\n🔍 MISSING LABELS:\")\n",
-    "    if analysis['missing_labels']:\n",
-    "        print(f\"  Missing labels ({len(analysis['missing_labels'])}): {sorted(analysis['missing_labels'])}\")\n",
-    "    else:\n",
-    "        print(\"  ✓ All expected labels are present!\")\n",
-    "\n",
-    "    # Label frequency analysis\n",
-    "    print(f\"\\n📊 LABEL FREQUENCY ANALYSIS:\")\n",
-    "    label_counts = analysis['label_counts']\n",
-    "    sorted_labels = sorted(label_counts.items(), key=lambda x: x[1], reverse=True)\n",
-    "\n",
-    "    print(f\"  {'Label':<15} {'Count':<8} {'Samples':<8} {'%':<8}\")\n",
-    "    print(f\"  {'-'*15} {'-'*8} {'-'*8} {'-'*8}\")\n",
-    "\n",
-    "    for label, count in sorted_labels:\n",
-    "        samples_with_label = analysis['samples_per_label'][label]\n",
-    "        percentage = (samples_with_label / analysis['num_samples']) * 100\n",
-    "        print(f\"  {label:<15} {count:<8} {samples_with_label:<8} {percentage:<8.1f}%\")\n",
-    "\n",
-    "def create_visualizations(analysis: Dict, dataset_name: str = \"Dataset\"):\n",
-    "    \"\"\"Create visualizations for the dataset analysis.\"\"\"\n",
-    "    if not analysis or not analysis['label_counts']:\n",
-    "        print(\"No data available for visualization.\")\n",
-    "        return\n",
-    "\n",
-    "    # Set up the plotting style\n",
-    "    plt.style.use('default')\n",
-    "    fig, axes = plt.subplots(2, 2, figsize=(15, 12))\n",
-    "    fig.suptitle(f'{dataset_name} - Label Analysis Visualizations', fontsize=16, fontweight='bold')\n",
-    "\n",
-    "    # 1. Label frequency bar chart\n",
-    "    label_counts = analysis['label_counts']\n",
-    "    sorted_labels = sorted(label_counts.items(), key=lambda x: x[1], reverse=True)\n",
-    "    labels, counts = zip(*sorted_labels)\n",
-    "\n",
-    "    axes[0, 0].bar(range(len(labels)), counts, color='skyblue', edgecolor='navy', alpha=0.7)\n",
-    "    axes[0, 0].set_title('Label Frequency (Total Instances)', fontweight='bold')\n",
-    "    axes[0, 0].set_xlabel('Labels')\n",
-    "    axes[0, 0].set_ylabel('Count')\n",
-    "    axes[0, 0].set_xticks(range(len(labels)))\n",
-    "    axes[0, 0].set_xticklabels(labels, rotation=45, ha='right')\n",
-    "    axes[0, 0].grid(axis='y', alpha=0.3)\n",
-    "\n",
-    "    # 2. Samples per label bar chart\n",
-    "    samples_per_label = analysis['samples_per_label']\n",
-    "    sorted_samples = sorted(samples_per_label.items(), key=lambda x: x[1], reverse=True)\n",
-    "    labels_spl, samples_spl = zip(*sorted_samples)\n",
-    "\n",
-    "    axes[0, 1].bar(range(len(labels_spl)), samples_spl, color='lightcoral', edgecolor='darkred', alpha=0.7)\n",
-    "    axes[0, 1].set_title('Samples Containing Each Label', fontweight='bold')\n",
-    "    axes[0, 1].set_xlabel('Labels')\n",
-    "    axes[0, 1].set_ylabel('Number of Samples')\n",
-    "    axes[0, 1].set_xticks(range(len(labels_spl)))\n",
-    "    axes[0, 1].set_xticklabels(labels_spl, rotation=45, ha='right')\n",
-    "    axes[0, 1].grid(axis='y', alpha=0.3)\n",
-    "\n",
-    "    # 3. Labels per sample distribution\n",
-    "    labels_per_sample = analysis['labels_per_sample']\n",
-    "    axes[1, 0].hist(labels_per_sample, bins=max(labels_per_sample)-min(labels_per_sample)+1,\n",
-    "                   color='lightgreen', edgecolor='darkgreen', alpha=0.7)\n",
-    "    axes[1, 0].set_title('Distribution of Labels per Sample', fontweight='bold')\n",
-    "    axes[1, 0].set_xlabel('Number of Labels per Sample')\n",
-    "    axes[1, 0].set_ylabel('Frequency')\n",
-    "    axes[1, 0].grid(axis='y', alpha=0.3)\n",
-    "\n",
-    "    # 4. Label completeness pie chart\n",
-    "    present_labels = len(analysis['unique_labels'])\n",
-    "    missing_labels = len(analysis['missing_labels'])\n",
-    "\n",
-    "    labels_pie = ['Present Labels', 'Missing Labels']\n",
-    "    sizes = [present_labels, missing_labels]\n",
-    "    colors = ['lightblue', 'lightcoral']\n",
-    "\n",
-    "    axes[1, 1].pie(sizes, labels=labels_pie, colors=colors, autopct='%1.1f%%', startangle=90)\n",
-    "    axes[1, 1].set_title('Label Completeness', fontweight='bold')\n",
-    "\n",
-    "    plt.tight_layout()\n",
-    "    plt.show()\n",
-    "\n",
-    "def create_detailed_dataframe(analysis: Dict) -> pd.DataFrame:\n",
-    "    \"\"\"Create a detailed DataFrame with label statistics.\"\"\"\n",
-    "    if not analysis or not analysis['label_counts']:\n",
-    "        return pd.DataFrame()\n",
-    "\n",
-    "    # Prepare data for DataFrame\n",
-    "    data_rows = []\n",
-    "\n",
-    "    for label in EXPECTED_LABELS:\n",
-    "        if label in analysis['unique_labels']:\n",
-    "            count = analysis['label_counts'][label]\n",
-    "            samples = analysis['samples_per_label'][label]\n",
-    "            percentage = (samples / analysis['num_samples']) * 100\n",
-    "            status = 'Present'\n",
-    "        else:\n",
-    "            count = 0\n",
-    "            samples = 0\n",
-    "            percentage = 0.0\n",
-    "            status = 'Missing'\n",
-    "\n",
-    "        data_rows.append({\n",
-    "            'Label': label,\n",
-    "            'Status': status,\n",
-    "            'Total_Instances': count,\n",
-    "            'Samples_With_Label': samples,\n",
-    "            'Percentage_of_Samples': round(percentage, 2)\n",
-    "        })\n",
-    "\n",
-    "    df = pd.DataFrame(data_rows)\n",
-    "    return df.sort_values('Total_Instances', ascending=False)\n",
-    "\n",
-    "# Main analysis function\n",
-    "def analyze_dataset_file(file_path: str, dataset_name: str = None):\n",
-    "    \"\"\"Complete analysis workflow for a dataset file.\"\"\"\n",
-    "    if dataset_name is None:\n",
-    "        dataset_name = file_path.split('/')[-1].replace('.json', '')\n",
-    "\n",
-    "    print(f\"🔍 Analyzing dataset: {dataset_name}\")\n",
-    "    print(f\"📁 File path: {file_path}\")\n",
-    "    print(\"-\" * 60)\n",
-    "\n",
-    "    # Load dataset\n",
-    "    data = load_dataset(file_path)\n",
-    "    if not data:\n",
-    "        return None\n",
-    "\n",
-    "    # Perform analysis\n",
-    "    analysis = analyze_dataset(data)\n",
-    "\n",
-    "    # Print summary\n",
-    "    print_analysis_summary(analysis, dataset_name)\n",
-    "\n",
-    "    # Create visualizations\n",
-    "    create_visualizations(analysis, dataset_name)\n",
-    "\n",
-    "    # Create detailed DataFrame\n",
-    "    df = create_detailed_dataframe(analysis)\n",
-    "    print(f\"\\n📋 DETAILED LABEL STATISTICS:\")\n",
-    "    print(df.to_string(index=False))\n",
-    "\n",
-    "    return analysis, df\n",
-    "\n",
-    "# Example usage:\n",
-    "if __name__ == \"__main__\":\n",
-    "    # Example: Analyze a dataset\n",
-    "    # Change this path to your dataset file\n",
-    "    # file_path = \"./train.json\"\n",
-    "\n",
-    "    # Run the analysis\n",
-    "    # analysis, df = analyze_dataset_file(file_path, \"Training Dataset\")\n",
-    "\n",
-    "    # You can also analyze multiple datasets:\n",
-    "    datasets = [\n",
-    "        (\"./train.json\", \"Training Set\"),\n",
-    "        (\"./validation.json\", \"Validation Set\"),\n",
-    "        (\"./test.json\", \"Test Set\")\n",
-    "    ]\n",
-    "\n",
-    "    print(\"\\n\" + \"=\"*80)\n",
-    "    print(\"📊 ANALYZING ALL DATASETS\")\n",
-    "    print(\"=\"*80)\n",
-    "\n",
-    "    for file_path, name in datasets:\n",
-    "        print(f\"\\n{'='*20} {name.upper()} {'='*20}\")\n",
-    "        try:\n",
-    "            analysis, df = analyze_dataset_file(file_path, name)\n",
-    "        except Exception as e:\n",
-    "            print(f\"❌ Error analyzing {name}: {e}\")"
-   ],
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "\n",
-      "================================================================================\n",
-      "📊 ANALYZING ALL DATASETS\n",
-      "================================================================================\n",
-      "\n",
-      "==================== TRAINING SET ====================\n",
-      "🔍 Analyzing dataset: Training Set\n",
-      "📁 File path: ./train.json\n",
-      "------------------------------------------------------------\n",
-      "✓ Successfully loaded dataset from: ./train.json\n",
-      "============================================================\n",
-      "📊 TRAINING SET ANALYSIS SUMMARY\n",
-      "============================================================\n",
-      "\n",
-      "📈 BASIC STATISTICS:\n",
-      "  Total samples: 96\n",
-      "  Total label instances: 527\n",
-      "  Unique labels found: 21\n",
-      "  Expected labels: 21\n",
-      "  Average labels per sample: 5.49\n",
-      "  Min labels per sample: 1\n",
-      "  Max labels per sample: 13\n",
-      "\n",
-      "🔍 MISSING LABELS:\n",
-      "  ✓ All expected labels are present!\n",
-      "\n",
-      "📊 LABEL FREQUENCY ANALYSIS:\n",
-      "  Label           Count    Samples  %       \n",
-      "  --------------- -------- -------- --------\n",
-      "  NACHNAME        93       93       96.9    %\n",
-      "  VORNAME         88       88       91.7    %\n",
-      "  STRASSE         42       42       43.8    %\n",
-      "  WOHNORT         40       40       41.7    %\n",
-      "  POSTLEITZAHL    40       40       41.7    %\n",
-      "  HAUSNUMMER      40       40       41.7    %\n",
-      "  VERTRAGSNUMMER  36       36       37.5    %\n",
-      "  DATUM           29       29       30.2    %\n",
-      "  ZÄHLERNUMMER    26       26       27.1    %\n",
-      "  TELEFONNUMMER   19       19       19.8    %\n",
-      "  GESENDET_MIT    16       16       16.7    %\n",
-      "  ZAHLUNG         13       13       13.5    %\n",
-      "  FIRMA           13       13       13.5    %\n",
-      "  TITEL           8        8        8.3     %\n",
-      "  EMAIL           8        8        8.3     %\n",
-      "  ZÄHLERSTAND     5        5        5.2     %\n",
-      "  LINK            4        4        4.2     %\n",
-      "  IBAN            3        3        3.1     %\n",
-      "  BANK            2        2        2.1     %\n",
-      "  BIC             1        1        1.0     %\n",
-      "  FAX             1        1        1.0     %\n"
-     ]
-    },
-    {
-     "data": {
-      "text/plain": [
-       "<Figure size 1500x1200 with 4 Axes>"
-      ],
-      "image/png": ""
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "\n",
-      "📋 DETAILED LABEL STATISTICS:\n",
-      "         Label  Status  Total_Instances  Samples_With_Label  Percentage_of_Samples\n",
-      "      NACHNAME Present               93                  93                  96.88\n",
-      "       VORNAME Present               88                  88                  91.67\n",
-      "       STRASSE Present               42                  42                  43.75\n",
-      "       WOHNORT Present               40                  40                  41.67\n",
-      "    HAUSNUMMER Present               40                  40                  41.67\n",
-      "  POSTLEITZAHL Present               40                  40                  41.67\n",
-      "VERTRAGSNUMMER Present               36                  36                  37.50\n",
-      "         DATUM Present               29                  29                  30.21\n",
-      "  ZÄHLERNUMMER Present               26                  26                  27.08\n",
-      " TELEFONNUMMER Present               19                  19                  19.79\n",
-      "  GESENDET_MIT Present               16                  16                  16.67\n",
-      "         FIRMA Present               13                  13                  13.54\n",
-      "       ZAHLUNG Present               13                  13                  13.54\n",
-      "         EMAIL Present                8                   8                   8.33\n",
-      "         TITEL Present                8                   8                   8.33\n",
-      "   ZÄHLERSTAND Present                5                   5                   5.21\n",
-      "          LINK Present                4                   4                   4.17\n",
-      "          IBAN Present                3                   3                   3.12\n",
-      "          BANK Present                2                   2                   2.08\n",
-      "           FAX Present                1                   1                   1.04\n",
-      "           BIC Present                1                   1                   1.04\n",
-      "\n",
-      "==================== VALIDATION SET ====================\n",
-      "🔍 Analyzing dataset: Validation Set\n",
-      "📁 File path: ./validation.json\n",
-      "------------------------------------------------------------\n",
-      "✓ Successfully loaded dataset from: ./validation.json\n",
-      "============================================================\n",
-      "📊 VALIDATION SET ANALYSIS SUMMARY\n",
-      "============================================================\n",
-      "\n",
-      "📈 BASIC STATISTICS:\n",
-      "  Total samples: 25\n",
-      "  Total label instances: 121\n",
-      "  Unique labels found: 21\n",
-      "  Expected labels: 21\n",
-      "  Average labels per sample: 4.84\n",
-      "  Min labels per sample: 0\n",
-      "  Max labels per sample: 13\n",
-      "\n",
-      "🔍 MISSING LABELS:\n",
-      "  ✓ All expected labels are present!\n",
-      "\n",
-      "📊 LABEL FREQUENCY ANALYSIS:\n",
-      "  Label           Count    Samples  %       \n",
-      "  --------------- -------- -------- --------\n",
-      "  NACHNAME        24       24       96.0    %\n",
-      "  VORNAME         21       21       84.0    %\n",
-      "  VERTRAGSNUMMER  11       11       44.0    %\n",
-      "  DATUM           11       11       44.0    %\n",
-      "  WOHNORT         6        6        24.0    %\n",
-      "  POSTLEITZAHL    6        6        24.0    %\n",
-      "  HAUSNUMMER      6        6        24.0    %\n",
-      "  STRASSE         6        6        24.0    %\n",
-      "  ZÄHLERNUMMER    5        5        20.0    %\n",
-      "  GESENDET_MIT    4        4        16.0    %\n",
-      "  FIRMA           3        3        12.0    %\n",
-      "  TELEFONNUMMER   3        3        12.0    %\n",
-      "  TITEL           3        3        12.0    %\n",
-      "  FAX             2        2        8.0     %\n",
-      "  EMAIL           2        2        8.0     %\n",
-      "  ZÄHLERSTAND     2        2        8.0     %\n",
-      "  ZAHLUNG         2        2        8.0     %\n",
-      "  BIC             1        1        4.0     %\n",
-      "  IBAN            1        1        4.0     %\n",
-      "  BANK            1        1        4.0     %\n",
-      "  LINK            1        1        4.0     %\n"
-     ]
-    },
-    {
-     "data": {
-      "text/plain": [
-       "<Figure size 1500x1200 with 4 Axes>"
-      ],
-      "image/png": ""
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "\n",
-      "📋 DETAILED LABEL STATISTICS:\n",
-      "         Label  Status  Total_Instances  Samples_With_Label  Percentage_of_Samples\n",
-      "      NACHNAME Present               24                  24                   96.0\n",
-      "       VORNAME Present               21                  21                   84.0\n",
-      "VERTRAGSNUMMER Present               11                  11                   44.0\n",
-      "         DATUM Present               11                  11                   44.0\n",
-      "  POSTLEITZAHL Present                6                   6                   24.0\n",
-      "       STRASSE Present                6                   6                   24.0\n",
-      "       WOHNORT Present                6                   6                   24.0\n",
-      "    HAUSNUMMER Present                6                   6                   24.0\n",
-      "  ZÄHLERNUMMER Present                5                   5                   20.0\n",
-      "  GESENDET_MIT Present                4                   4                   16.0\n",
-      " TELEFONNUMMER Present                3                   3                   12.0\n",
-      "         FIRMA Present                3                   3                   12.0\n",
-      "         TITEL Present                3                   3                   12.0\n",
-      "           FAX Present                2                   2                    8.0\n",
-      "   ZÄHLERSTAND Present                2                   2                    8.0\n",
-      "         EMAIL Present                2                   2                    8.0\n",
-      "       ZAHLUNG Present                2                   2                    8.0\n",
-      "           BIC Present                1                   1                    4.0\n",
-      "          LINK Present                1                   1                    4.0\n",
-      "          IBAN Present                1                   1                    4.0\n",
-      "          BANK Present                1                   1                    4.0\n",
-      "\n",
-      "==================== TEST SET ====================\n",
-      "🔍 Analyzing dataset: Test Set\n",
-      "📁 File path: ./test.json\n",
-      "------------------------------------------------------------\n",
-      "✓ Successfully loaded dataset from: ./test.json\n",
-      "============================================================\n",
-      "📊 TEST SET ANALYSIS SUMMARY\n",
-      "============================================================\n",
-      "\n",
-      "📈 BASIC STATISTICS:\n",
-      "  Total samples: 41\n",
-      "  Total label instances: 212\n",
-      "  Unique labels found: 23\n",
-      "  Expected labels: 21\n",
-      "  Average labels per sample: 5.17\n",
-      "  Min labels per sample: 2\n",
-      "  Max labels per sample: 12\n",
-      "\n",
-      "🔍 MISSING LABELS:\n",
-      "  ✓ All expected labels are present!\n",
-      "\n",
-      "📊 LABEL FREQUENCY ANALYSIS:\n",
-      "  Label           Count    Samples  %       \n",
-      "  --------------- -------- -------- --------\n",
-      "  NACHNAME        37       37       90.2    %\n",
-      "  VORNAME         37       37       90.2    %\n",
-      "  VERTRAGSNUMMER  18       18       43.9    %\n",
-      "  DATUM           15       15       36.6    %\n",
-      "  WOHNORT         13       13       31.7    %\n",
-      "  POSTLEITZAHL    13       13       31.7    %\n",
-      "  HAUSNUMMER      12       12       29.3    %\n",
-      "  STRASSE         12       12       29.3    %\n",
-      "  TELEFONNUMMER   11       11       26.8    %\n",
-      "  ZAHLUNG         7        7        17.1    %\n",
-      "  ZÄHLERNUMMER    7        7        17.1    %\n",
-      "  GESENDET_MIT    5        5        12.2    %\n",
-      "  IBAN            4        4        9.8     %\n",
-      "  TITEL           3        3        7.3     %\n",
-      "  ZÄHLERSTAND     3        3        7.3     %\n",
-      "  EMAIL           3        3        7.3     %\n",
-      "  FIRMA           3        3        7.3     %\n",
-      "  LINK            2        2        4.9     %\n",
-      "  FAX             2        2        4.9     %\n",
-      "  BANK            2        2        4.9     %\n",
-      "  BIC             1        1        2.4     %\n",
-      "  NAME            1        1        2.4     %\n",
-      "  ADRESSE         1        1        2.4     %\n"
-     ]
-    },
-    {
-     "data": {
-      "text/plain": [
-       "<Figure size 1500x1200 with 4 Axes>"
-      ],
-      "image/png": ""
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "\n",
-      "📋 DETAILED LABEL STATISTICS:\n",
-      "         Label  Status  Total_Instances  Samples_With_Label  Percentage_of_Samples\n",
-      "       VORNAME Present               37                  37                  90.24\n",
-      "      NACHNAME Present               37                  37                  90.24\n",
-      "VERTRAGSNUMMER Present               18                  18                  43.90\n",
-      "         DATUM Present               15                  15                  36.59\n",
-      "  POSTLEITZAHL Present               13                  13                  31.71\n",
-      "       WOHNORT Present               13                  13                  31.71\n",
-      "       STRASSE Present               12                  12                  29.27\n",
-      "    HAUSNUMMER Present               12                  12                  29.27\n",
-      " TELEFONNUMMER Present               11                  11                  26.83\n",
-      "  ZÄHLERNUMMER Present                7                   7                  17.07\n",
-      "       ZAHLUNG Present                7                   7                  17.07\n",
-      "  GESENDET_MIT Present                5                   5                  12.20\n",
-      "          IBAN Present                4                   4                   9.76\n",
-      "         FIRMA Present                3                   3                   7.32\n",
-      "   ZÄHLERSTAND Present                3                   3                   7.32\n",
-      "         EMAIL Present                3                   3                   7.32\n",
-      "         TITEL Present                3                   3                   7.32\n",
-      "           FAX Present                2                   2                   4.88\n",
-      "          LINK Present                2                   2                   4.88\n",
-      "          BANK Present                2                   2                   4.88\n",
-      "           BIC Present                1                   1                   2.44\n"
-     ]
+
+#%% md
+# Dataset Descriptives Analysis
+
+This notebook loads multiple JSON ground-truth label datasets, computes summary statistics (unique labels, label counts, samples per label, labels per sample, missing labels) for each individual dataset and combined, and creates publication-quality plots plus a summary table.
+
+**Inputs:** paths to JSON files containing lists of samples; each sample is expected to have a `labels` field which is a list of dictionaries with a `'label'` key.
+
+**Outputs:**
+- PDF plots: overall label distribution, dataset comparisons (counts and percentages), labels-per-sample histogram, label coverage.
+- Summary CSV/table with combined and individual metrics.
+
+**Main flow:**
+1. `load_all_datasets`: loads and validates datasets.
+2. `analyze_dataset`: safely extracts labels and computes metrics.
+3. `create_publication_plots`: generates and saves the visualizations.
+4. `create_summary_table`: builds the summary DataFrame.
+5. `analyze_full_dataset`: orchestrates the steps and persists results.
+
+**Assumptions / notes:** label presence per sample is deduplicated (i.e., multiple identical labels in one sample count once), malformed label entries are filtered out, and missing labels are reported.
+#%%
+import json
+import pandas as pd
+import matplotlib.pyplot as plt
+import matplotlib as mpl
+import seaborn as sns
+from collections import Counter
+from typing import Dict, List, Set, Tuple
+import numpy as np
+
+# Configure matplotlib for publication quality (larger fonts for readability)
+plt.rcParams.update({
+    'font.family': 'serif',
+    'font.serif': ['Times New Roman', 'Times', 'serif'],
+    'font.size': 12,  # Increased base font size
+    'axes.labelsize': 14,  # Larger axis labels
+    'axes.titlesize': 16,  # Larger titles
+    'xtick.labelsize': 11,  # Larger tick labels
+    'ytick.labelsize': 11,  # Larger tick labels
+    'legend.fontsize': 11,  # Larger legend
+    'figure.titlesize': 18,  # Larger figure title
+    'lines.linewidth': 1.5,
+    'axes.linewidth': 1.2,
+    'grid.linewidth': 0.8,
+    'xtick.major.width': 1.2,
+    'ytick.major.width': 1.2,
+    'axes.edgecolor': 'black',
+    'text.color': 'black',
+    'axes.labelcolor': 'black',
+    'xtick.color': 'black',
+    'ytick.color': 'black',
+    'figure.facecolor': 'white',
+    'axes.facecolor': 'white',
+    'savefig.facecolor': 'white',
+    'axes.spines.left': True,
+    'axes.spines.bottom': True,
+    'axes.spines.top': True,
+    'axes.spines.right': True
+})
+
+# Define the expected labels (from your original code)
+PLACEHOLDERS = {
+    "TITEL"         :  ["TITEL"],
+    "VORNAME"       :  ["VORNAME"],
+    "NACHNAME"      :  ["NACHNAME"],
+    "FIRMA"         :  ["FIRMA"],
+    "TELEFONNUMMER" :  ["TELEFONNUMMER"],
+    "EMAIL"         :  ["EMAIL"],
+    "FAX"           :  ["FAX"],
+    "STRASSE"       :  ["STRASSE"],
+    "HAUSNUMMER"    :  ["HAUSNUMMER"],
+    "POSTLEITZAHL"  :  ["POSTLEITZAHL","PLZ","ZIP"],
+    "WOHNORT"       :  ["WOHNORT","ORT","CITY"],
+    "ZÄHLERNUMMER"  :  ["ZÄHLERNUMMER","METER_ID"],
+    "ZÄHLERSTAND"   :  ["ZÄHLERSTAND","METER_READING"],
+    "VERTRAGSNUMMER":  ["VERTRAGSNUMMER","ANGEBOTSNUMMER", "KUNDENNUMMER"],
+    "ZAHLUNG"       :  ["BETRAG","ZAHLUNG","AMOUNT"],
+    "BANK"          :  ["BANK"],
+    "IBAN"          :  ["IBAN"],
+    "BIC"           :  ["BIC"],
+    "DATUM"         :  ["DATUM","DATE"],
+    "GESENDET_MIT"  :  ["GESENDET_MIT"],
+    "LINK"          :  ["LINK"]
+}
+
+EXPECTED_LABELS = set(PLACEHOLDERS.keys())
+
+def load_all_datasets(file_paths: List[str]) -> Tuple[List[Dict], Dict[str, List[Dict]]]:
+    """Load multiple datasets and combine them."""
+    all_data = []
+    individual_datasets = {}
+
+    for file_path in file_paths:
+        try:
+            with open(file_path, 'r', encoding='utf-8') as f:
+                data = json.load(f)
+            dataset_name = file_path.split('/')[-1].replace('.json', '')
+            individual_datasets[dataset_name] = data
+            all_data.extend(data)
+            print(f"✓ Loaded {len(data)} samples from {file_path}")
+        except Exception as e:
+            print(f"❌ Error loading {file_path}: {e}")
+
+    return all_data, individual_datasets
+
+def analyze_dataset(data: List[Dict]) -> Dict:
+    """Perform comprehensive analysis of the dataset."""
+    if not data:
+        return {}
+
+    num_samples = len(data)
+    all_labels = []
+    samples_with_labels = []
+
+    for sample in data:
+        sample_labels = {label['label'] for label in sample.get('labels', [])}
+        all_labels.extend(sample_labels)
+        samples_with_labels.append(sample_labels)
+
+    label_counts = Counter(all_labels)
+    unique_labels = set(all_labels)
+    missing_labels = EXPECTED_LABELS - unique_labels
+
+    samples_per_label = {label: sum(1 for s in samples_with_labels if label in s)
+                        for label in unique_labels}
+
+    labels_per_sample = [len(sample_labels) for sample_labels in samples_with_labels]
+
+    return {
+        'num_samples': num_samples,
+        'unique_labels': unique_labels,
+        'label_counts': label_counts,
+        'missing_labels': missing_labels,
+        'samples_per_label': samples_per_label,
+        'labels_per_sample': labels_per_sample
     }
-   ],
-   "execution_count": 4
-  }
- ],
- "metadata": {
-  "kernelspec": {
-   "display_name": "Python 3",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 2
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython2",
-   "version": "2.7.6"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 5
-}
+
+def create_publication_plots(combined_analysis: Dict, individual_analyses: Dict[str, Dict],
+                           output_dir: str = "./figures/"):
+    """Create publication-quality plots for the dataset analysis."""
+
+    # Create output directory if it doesn't exist
+    import os
+    os.makedirs(output_dir, exist_ok=True)
+
+    # Black and white styling for professional appearance
+    patterns = ['', '///', '...', '+++', 'xxx', '|||', '---', '\\\\\\']
+    grays = ['0.2', '0.4', '0.6', '0.8', '0.3', '0.5', '0.7', '0.9']
+
+    # 1. Combined Label Distribution (Horizontal Bar Chart) - More compact
+    fig, ax = plt.subplots(figsize=(8, 6))  # Wider figure for better readability
+
+    # Sort labels by frequency for better readability
+    sorted_labels = sorted(combined_analysis['samples_per_label'].items(),
+                          key=lambda x: x[1], reverse=True)
+    labels, counts = zip(*sorted_labels)
+
+    # Create horizontal bar chart with black and white styling
+    y_pos = np.arange(len(labels))
+    bars = ax.barh(y_pos, counts, color='black', alpha=0.8, height=0.6,
+                   edgecolor='black', linewidth=0.8)
+
+    # Formatting with better spacing
+    ax.set_yticks(y_pos)
+    ax.set_yticklabels(labels, fontweight='normal')
+    ax.set_xlabel('Number of Samples', fontweight='bold')
+    ax.set_title('Label Distribution Across Full Dataset', fontweight='bold', pad=20)
+    ax.grid(axis='x', alpha=0.3, linewidth=0.8)
+
+    # Add value labels on bars with better positioning
+    for i, bar in enumerate(bars):
+        width = bar.get_width()
+        ax.text(width + max(counts) * 0.02, bar.get_y() + bar.get_height()/2,
+                f'{int(width)}', ha='left', va='center', fontsize=10, fontweight='bold')
+
+    # Tighter layout
+    ax.margins(y=0.01)
+    plt.tight_layout()
+    plt.savefig(f'{output_dir}label_distribution.pdf', bbox_inches='tight', dpi=300)
+    plt.show()
+
+    # 2. Dataset Comparison (Grouped Bar Chart) - Optimized layout
+    if len(individual_analyses) > 1:
+        fig, ax = plt.subplots(figsize=(10, 6))  # Wider for better label readability
+
+        # Get top 8 most common labels for readability (reduced from 10)
+        top_labels = [label for label, _ in sorted_labels[:8]]
+
+        # Prepare data for grouped bar chart
+        dataset_names = list(individual_analyses.keys())
+        x = np.arange(len(top_labels))
+        width = 0.7 / len(dataset_names)  # Slightly wider bars
+
+        for i, (dataset_name, analysis) in enumerate(individual_analyses.items()):
+            values = [analysis['samples_per_label'].get(label, 0) for label in top_labels]
+            offset = (i - len(dataset_names)/2 + 0.5) * width
+
+            # Use different patterns and fills for different datasets
+            if i < len(patterns):
+                hatch = patterns[i]
+                facecolor = grays[i % len(grays)]
+            else:
+                hatch = ''
+                facecolor = grays[i % len(grays)]
+
+            bars = ax.bar(x + offset, values, width,
+                         label=dataset_name.replace('_', ' ').title(),
+                         facecolor=facecolor, edgecolor='black', linewidth=1.0,
+                         hatch=hatch, alpha=0.8)
+
+        ax.set_xlabel('Label Type', fontweight='bold')
+        ax.set_ylabel('Number of Samples', fontweight='bold')
+        ax.set_title('Label Distribution Comparison Across Datasets', fontweight='bold', pad=20)
+        ax.set_xticks(x)
+        ax.set_xticklabels(top_labels, rotation=45, ha='right', fontweight='normal')
+        ax.legend(loc='upper right')
+        ax.grid(axis='y', alpha=0.3, linewidth=0.8)
+
+        plt.tight_layout()
+        plt.savefig(f'{output_dir}dataset_comparison.pdf', bbox_inches='tight', dpi=300)
+        plt.show()
+
+    # 2b. Dataset Comparison in Percentage (Grouped Bar Chart)
+    if len(individual_analyses) > 1:
+        fig, ax = plt.subplots(figsize=(10, 6))
+
+        # Use combined label order from the first (count) chart
+        all_labels = [label for label, _ in sorted_labels]
+        dataset_names = list(individual_analyses.keys())
+        x = np.arange(len(all_labels))
+        width = 0.7 / len(dataset_names)  # bar width
+
+        # Use the same patterns and grays as above
+        # patterns and grays are already defined earlier in this function
+
+        for i, (dataset_name, analysis) in enumerate(individual_analyses.items()):
+            # Raw counts for every label
+            counts = [analysis['samples_per_label'].get(label, 0) for label in all_labels]
+            total = sum(counts) if sum(counts) > 0 else 1
+            perc = [c / total * 100 for c in counts]
+
+            offset = (i - len(dataset_names)/2 + 0.5) * width
+
+            bars = ax.bar(
+                x + offset,
+                perc,
+                width,
+                label=dataset_name.replace('_', ' ').title(),
+                facecolor=grays[i % len(grays)],
+                edgecolor='black',
+                linewidth=1.0,
+                hatch=patterns[i] if i < len(patterns) else '',
+                alpha=0.8
+            )
+
+        ax.set_xlabel('Label Type', fontweight='bold')
+        ax.set_ylabel('Percentage of Label Instances (%)', fontweight='bold')
+        ax.set_title('Label Distribution Across Datasets (Percentage)', fontweight='bold', pad=20)
+        ax.set_xticks(x)
+        ax.set_xticklabels(all_labels, rotation=45, ha='right', fontweight='normal')
+        ax.legend(loc='upper right')
+        ax.grid(axis='y', alpha=0.3, linewidth=0.8)
+
+        plt.tight_layout()
+        plt.savefig(f'{output_dir}dataset_comparison_percentage.pdf', bbox_inches='tight', dpi=300)
+        plt.show()
+
+    # 3. Labels per Sample Distribution - Simplified and larger
+    fig, ax = plt.subplots(figsize=(7, 5))
+
+    labels_per_sample = combined_analysis['labels_per_sample']
+    bins = range(min(labels_per_sample), max(labels_per_sample) + 2)
+
+    n, bins, patches = ax.hist(labels_per_sample, bins=bins, color='0.6',
+                              alpha=0.8, edgecolor='black', linewidth=1.0)
+
+    ax.set_xlabel('Number of Labels per Sample', fontweight='bold')
+    ax.set_ylabel('Frequency (Number of Samples)', fontweight='bold')
+    ax.set_title('Distribution of Labels per Sample', fontweight='bold', pad=20)
+    ax.grid(axis='y', alpha=0.3, linewidth=0.8)
+
+    # Add statistics annotation with black and white styling
+    mean_labels = np.mean(labels_per_sample)
+    median_labels = np.median(labels_per_sample)
+    ax.axvline(mean_labels, color='black', linestyle='--', linewidth=2.0,
+               label=f'Mean: {mean_labels:.1f}')
+    ax.axvline(median_labels, color='black', linestyle=':', linewidth=2.0,
+               label=f'Median: {median_labels:.1f}')
+    ax.legend(loc='upper right')
+
+    plt.tight_layout()
+    plt.savefig(f'{output_dir}labels_per_sample.pdf', bbox_inches='tight', dpi=300)
+    plt.show()
+
+    # 4. Label Coverage Analysis - Optimized for readability
+    fig, ax = plt.subplots(figsize=(8, 7))  # Taller for better label spacing
+
+    # Calculate coverage percentages
+    coverage_data = []
+    for label in EXPECTED_LABELS:
+        if label in combined_analysis['unique_labels']:
+            coverage = (combined_analysis['samples_per_label'][label] /
+                       combined_analysis['num_samples']) * 100
+            coverage_data.append((label, coverage))
+        else:
+            coverage_data.append((label, 0))
+
+    # Sort by coverage
+    coverage_data.sort(key=lambda x: x[1], reverse=True)
+    labels_cov, coverages = zip(*coverage_data)
+
+    # Create grayscale styling based on coverage
+    colors_map = []
+    hatches = []
+    for cov in coverages:
+        if cov == 0:
+            colors_map.append('white')  # White for missing
+            hatches.append('///')  # Diagonal lines for missing
+        elif cov < 25:
+            colors_map.append('0.8')  # Light gray for very low coverage
+            hatches.append('')
+        elif cov < 50:
+            colors_map.append('0.6')  # Medium gray for low coverage
+            hatches.append('')
+        elif cov < 75:
+            colors_map.append('0.4')  # Darker gray for medium coverage
+            hatches.append('')
+        else:
+            colors_map.append('0.2')  # Dark gray for high coverage
+            hatches.append('')
+
+    y_pos = np.arange(len(labels_cov))
+    bars = ax.barh(y_pos, coverages, color=colors_map, alpha=1.0, height=0.6,
+                   edgecolor='black', linewidth=1.0, hatch=hatches)
+
+    ax.set_yticks(y_pos)
+    ax.set_yticklabels(labels_cov, fontweight='normal')
+    ax.set_xlabel('Coverage Percentage (%)', fontweight='bold')
+    ax.set_title('Label Coverage Across Full Dataset', fontweight='bold', pad=20)
+    ax.grid(axis='x', alpha=0.3, linewidth=0.8)
+    ax.set_xlim(0, 100)
+
+    # Add percentage labels with better formatting
+    for i, bar in enumerate(bars):
+        width = bar.get_width()
+        if width > 0:
+            ax.text(width + 2, bar.get_y() + bar.get_height()/2,
+                    f'{width:.1f}%', ha='left', va='center', fontsize=10, fontweight='bold')
+
+    # Add margins for better spacing
+    ax.margins(y=0.01)
+    plt.tight_layout()
+    plt.savefig(f'{output_dir}label_coverage.pdf', bbox_inches='tight', dpi=300)
+    plt.show()
+
+    print(f"\n✓ All plots saved to {output_dir}")
+
+def create_summary_table(combined_analysis: Dict, individual_analyses: Dict[str, Dict]) -> pd.DataFrame:
+    """Create a comprehensive summary table."""
+
+    summary_data = []
+
+    # Add combined dataset row
+    summary_data.append({
+        'Dataset': 'Combined',
+        'Samples': combined_analysis['num_samples'],
+        'Unique Labels': len(combined_analysis['unique_labels']),
+        'Total Instances': sum(combined_analysis['label_counts'].values()),
+        'Avg Labels/Sample': np.mean(combined_analysis['labels_per_sample']),
+        'Missing Labels': len(combined_analysis['missing_labels'])
+    })
+
+    # Add individual dataset rows
+    for name, analysis in individual_analyses.items():
+        summary_data.append({
+            'Dataset': name.replace('_', ' ').title(),
+            'Samples': analysis['num_samples'],
+            'Unique Labels': len(analysis['unique_labels']),
+            'Total Instances': sum(analysis['label_counts'].values()),
+            'Avg Labels/Sample': np.mean(analysis['labels_per_sample']),
+            'Missing Labels': len(analysis['missing_labels'])
+        })
+
+    df = pd.DataFrame(summary_data)
+    df['Avg Labels/Sample'] = df['Avg Labels/Sample'].round(2)
+
+    return df
+
+# Main analysis function
+def analyze_full_dataset(file_paths: List[str], output_dir: str = "./figures/"):
+    """Complete analysis workflow for multiple dataset files."""
+
+    print("🔍 Loading and analyzing datasets...")
+    print("-" * 60)
+
+    # Load all datasets
+    combined_data, individual_datasets = load_all_datasets(file_paths)
+
+    if not combined_data:
+        print("❌ No data loaded. Please check file paths.")
+        return
+
+    # Analyze combined dataset
+    combined_analysis = analyze_dataset(combined_data)
+
+    # Analyze individual datasets
+    individual_analyses = {}
+    for name, data in individual_datasets.items():
+        individual_analyses[name] = analyze_dataset(data)
+
+    # Create publication-quality plots
+    create_publication_plots(combined_analysis, individual_analyses, output_dir)
+
+    # Create summary table
+    summary_df = create_summary_table(combined_analysis, individual_analyses)
+
+    print("\n📊 DATASET SUMMARY")
+    print("=" * 60)
+    print(summary_df.to_string(index=False))
+
+    # Save summary table
+    summary_df.to_csv(f'{output_dir}dataset_summary.csv', index=False)
+    print(f"\n✓ Summary table saved to {output_dir}dataset_summary.csv")
+
+    return combined_analysis, individual_analyses, summary_df
+
+# Example usage
+if __name__ == "__main__":
+    # Define your dataset files
+    dataset_files = [
+        "../../../data/original/ground_truth_split/train_norm.json",
+        "../../../data/original/ground_truth_split/validation_norm.json",
+        "../../../data/original/ground_truth_split/test_norm.json"
+    ]
+
+    # Run the complete analysis
+    combined_analysis, individual_analyses, summary_df = analyze_full_dataset(
+        dataset_files,
+        output_dir="./publication_figures/"
+    )
Index: notebooks/3_model_training_and_testing/gemini_oneshot/spans/spans_evaluation.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notebooks/3_model_training_and_testing/gemini_oneshot/spans/spans_evaluation.py b/notebooks/3_model_training_and_testing/gemini_oneshot/spans/spans_evaluation.py
new file mode 100644
--- /dev/null	(date 1753963512193)
+++ b/notebooks/3_model_training_and_testing/gemini_oneshot/spans/spans_evaluation.py	(date 1753963512193)
@@ -0,0 +1,93 @@
+#!/usr/bin/env python3
+"""
+Evaluation Script for Gemini PII Detection Results
+
+Compares LLM-detected entities against ground truth labels and computes
+precision, recall, and F1-score metrics.
+"""
+
+import json
+from pathlib import Path
+from collections import defaultdict
+
+
+def load_json(path):
+    return json.loads(Path(path).read_text(encoding='utf-8'))
+
+
+def span_overlap(span1, span2):
+    """Check if two spans overlap exactly."""
+    return span1['start'] == span2['start'] and span1['end'] == span2['end'] and span1['label'] == span2['label']
+
+
+def evaluate(ground_truth, predictions):
+    results = defaultdict(lambda: {'TP': 0, 'FP': 0, 'FN': 0})
+
+    gt_dict = {entry['file']: entry['labels'] for entry in ground_truth}
+
+    for pred_entry in predictions:
+        file = pred_entry['file']
+        pred_labels = pred_entry['labels']
+        gt_labels = gt_dict.get(file, [])
+
+        matched_gt = set()
+
+        for pred in pred_labels:
+            if any(span_overlap(pred, gt) for gt in gt_labels):
+                results[pred['label']]['TP'] += 1
+                matched_gt.add((pred['start'], pred['end'], pred['label']))
+            else:
+                results[pred['label']]['FP'] += 1
+
+        for gt in gt_labels:
+            if (gt['start'], gt['end'], gt['label']) not in matched_gt:
+                results[gt['label']]['FN'] += 1
+
+    return results
+
+
+def compute_metrics(results):
+    metrics = {}
+
+    for label, counts in results.items():
+        TP = counts['TP']
+        FP = counts['FP']
+        FN = counts['FN']
+
+        precision = TP / (TP + FP) if (TP + FP) else 0
+        recall = TP / (TP + FN) if (TP + FN) else 0
+        f1 = (2 * precision * recall / (precision + recall)) if (precision + recall) else 0
+
+        metrics[label] = {
+            'precision': round(precision, 3),
+            'recall': round(recall, 3),
+            'f1': round(f1, 3),
+            'TP': TP,
+            'FP': FP,
+            'FN': FN
+        }
+
+    return metrics
+
+
+def main():
+    results_file = "../../../../data/testing/gemini_results/llm_span_results.json"
+    ground_truth_file = "../../../../data/original/ground_truth_split/test_norm.json"
+
+    ground_truth = load_json(ground_truth_file)
+    predictions = load_json(results_file)
+
+    evaluation_results = evaluate(ground_truth, predictions)
+    metrics = compute_metrics(evaluation_results)
+
+    # Print metrics
+    for label, stats in metrics.items():
+        print(f"Label: {label}")
+        print(f"  Precision: {stats['precision']}")
+        print(f"  Recall:    {stats['recall']}")
+        print(f"  F1-score:  {stats['f1']}")
+        print(f"  TP: {stats['TP']}, FP: {stats['FP']}, FN: {stats['FN']}\n")
+
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
Index: notebooks/3_model_training_and_testing/gemini_oneshot/spans/analysis.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notebooks/3_model_training_and_testing/gemini_oneshot/spans/analysis.py b/notebooks/3_model_training_and_testing/gemini_oneshot/spans/analysis.py
new file mode 100644
--- /dev/null	(date 1753962282720)
+++ b/notebooks/3_model_training_and_testing/gemini_oneshot/spans/analysis.py	(date 1753962282720)
@@ -0,0 +1,362 @@
+#!/usr/bin/env python3
+"""
+Manual inspection tool to understand what's happening with Gemini anonymization.
+This will help you see exactly what went wrong with span extraction.
+"""
+
+import json
+import re
+from pathlib import Path
+from typing import Dict, List
+
+
+def inspect_single_file(results_file: str, ground_truth_file: str, filename: str):
+    """Inspect a single file in detail."""
+
+    # Load data
+    with open(results_file, 'r', encoding='utf-8') as f:
+        results = json.load(f)
+
+    with open(ground_truth_file, 'r', encoding='utf-8') as f:
+        ground_truth = json.load(f)
+
+    # Find the specific file
+    result_item = None
+    gt_item = None
+
+    for item in results:
+        if item['file'] == filename:
+            result_item = item
+            break
+
+    for item in ground_truth:
+        if item['file'] == filename:
+            gt_item = item
+            break
+
+    if not result_item or not gt_item:
+        print(f"File {filename} not found in both datasets")
+        return
+
+    print("=" * 80)
+    print(f"DETAILED INSPECTION: {filename}")
+    print("=" * 80)
+
+    original_text = gt_item.get('text', '')
+    anonymized_text = result_item.get('anonymized_text', '')
+    gt_entities = gt_item.get('entities', [])
+    extracted_entities = result_item.get('entities', [])
+
+    print(f"\nORIGINAL TEXT ({len(original_text)} chars):")
+    print("-" * 40)
+    print(f"'{original_text}'")
+
+    print(f"\nANONYMIZED TEXT ({len(anonymized_text)} chars):")
+    print("-" * 40)
+    print(f"'{anonymized_text}'")
+
+    # Find placeholders in anonymized text
+    placeholder_pattern = re.compile(r'<<([A-Z_]+)(?:_\d+)?>>')
+    placeholder_matches = list(placeholder_pattern.finditer(anonymized_text))
+
+    print(f"\nPLACEHOLDERS FOUND IN ANONYMIZED TEXT ({len(placeholder_matches)}):")
+    print("-" * 40)
+    for i, match in enumerate(placeholder_matches):
+        label = match.group(1)
+        start_anon = match.start()
+        end_anon = match.end()
+        context_before = anonymized_text[max(0, start_anon - 15):start_anon]
+        context_after = anonymized_text[end_anon:min(len(anonymized_text), end_anon + 15)]
+        print(
+            f"{i + 1:2d}. {label:15s} at {start_anon:3d}-{end_anon:3d} | ...{context_before}<<{label}>>{context_after}...")
+
+    print(f"\nGROUND TRUTH ENTITIES ({len(gt_entities)}):")
+    print("-" * 40)
+    for i, entity in enumerate(gt_entities):
+        start = entity['start']
+        end = entity['end']
+        label = entity['label']
+        if end <= len(original_text):
+            text_snippet = original_text[start:end]
+            context_before = original_text[max(0, start - 15):start]
+            context_after = original_text[end:min(len(original_text), end + 15)]
+            print(
+                f"{i + 1:2d}. {label:15s} at {start:3d}-{end:3d} | ...{context_before}[{text_snippet}]{context_after}...")
+        else:
+            print(f"{i + 1:2d}. {label:15s} at {start:3d}-{end:3d} | OUT OF BOUNDS")
+
+    print(f"\nEXTRACTED ENTITIES ({len(extracted_entities)}):")
+    print("-" * 40)
+    for i, entity in enumerate(extracted_entities):
+        start = entity['start']
+        end = entity['end']
+        label = entity['label']
+        if end <= len(original_text):
+            text_snippet = original_text[start:end]
+            context_before = original_text[max(0, start - 15):start]
+            context_after = original_text[end:min(len(original_text), end + 15)]
+            print(
+                f"{i + 1:2d}. {label:15s} at {start:3d}-{end:3d} | ...{context_before}[{text_snippet}]{context_after}...")
+        else:
+            print(f"{i + 1:2d}. {label:15s} at {start:3d}-{end:3d} | OUT OF BOUNDS")
+
+    # Fallback extraction from placeholders for comparison
+    fallback_entities = fallback_extract_from_placeholders(original_text, anonymized_text)
+    print(f"\nFALLBACK EXTRACTED ENTITIES ({len(fallback_entities)}):")
+    print("-" * 40)
+    for i, entity in enumerate(fallback_entities):
+        start = entity['start']
+        end = entity['end']
+        label = entity['label']
+        if end <= len(original_text):
+            text_snippet = original_text[start:end]
+            context_before = original_text[max(0, start - 15):start]
+            context_after = original_text[end:min(len(original_text), end + 15)]
+            print(
+                f"{i + 1:2d}. {label:15s} at {start:3d}-{end:3d} | ...{context_before}[{text_snippet}]{context_after}...")
+        else:
+            print(f"{i + 1:2d}. {label:15s} at {start:3d}-{end:3d} | OUT OF BOUNDS")
+
+    # Try to manually map placeholders to original entities
+    print(f"\nMANUAL ALIGNMENT ATTEMPT:")
+    print("-" * 40)
+    try_manual_alignment(original_text, anonymized_text, placeholder_matches, gt_entities)
+
+
+# Fallback extraction function
+def fallback_extract_from_placeholders(original: str, anonymized: str, window: int = 20, max_span_length: int = 100):
+    """Simple fallback span extraction by using placeholder context to locate the span in the original text."""
+    placeholder_pattern = re.compile(r'<<([A-Z_]+)(?:_\d+)?>>')
+    matches = list(placeholder_pattern.finditer(anonymized))
+    extracted = []
+    for match in matches:
+        label = match.group(1)
+        start_anon = match.start()
+        end_anon = match.end()
+        context_before = anonymized[max(0, start_anon - window):start_anon]
+        context_after = anonymized[end_anon:min(len(anonymized), end_anon + window)]
+
+        candidate_starts = []
+        if context_before.strip():
+            start = 0
+            while True:
+                pos = original.find(context_before, start)
+                if pos == -1:
+                    break
+                candidate_starts.append(pos + len(context_before))
+                start = pos + 1
+        else:
+            candidate_starts = [0]
+
+        span_start = None
+        span_end = None
+        if candidate_starts:
+            for cs in candidate_starts:
+                if context_after.strip():
+                    after_pos = original.find(context_after, cs)
+                    if after_pos != -1:
+                        span_start = cs
+                        span_end = after_pos
+                        break
+            if span_start is None:
+                span_start = candidate_starts[0]
+                span_end = min(len(original), span_start + max_span_length)
+        else:
+            if context_after.strip():
+                after_pos = original.find(context_after)
+                if after_pos != -1:
+                    span_end = after_pos
+                    span_start = max(0, span_end - max_span_length)
+        if span_start is not None and span_end is not None and span_end > span_start:
+            extracted.append({'start': span_start, 'end': span_end, 'label': label})
+    return extracted
+
+
+def try_manual_alignment(original: str, anonymized: str, placeholders: List, gt_entities: List):
+    """Try to manually align placeholders with ground truth entities."""
+
+    print("Attempting to map placeholders to ground truth entities...")
+
+    # For each placeholder, try to find corresponding content in original
+    for i, ph_match in enumerate(placeholders):
+        label = ph_match.group(1)
+        ph_start = ph_match.start()
+        ph_end = ph_match.end()
+
+        # Get context around placeholder
+        context_before = anonymized[max(0, ph_start - 20):ph_start].strip()
+        context_after = anonymized[ph_end:min(len(anonymized), ph_end + 20)].strip()
+
+        print(f"\nPlaceholder {i + 1}: <<{label}>>")
+        print(f"  Context: ...{context_before} <<{label}>> {context_after}...")
+
+        # Try to find this context in original
+        potential_matches = []
+
+        if context_before:
+            before_positions = []
+            start = 0
+            while True:
+                pos = original.find(context_before, start)
+                if pos == -1:
+                    break
+                before_positions.append(pos + len(context_before))
+                start = pos + 1
+
+            for before_pos in before_positions:
+                if context_after:
+                    after_pos = original.find(context_after, before_pos)
+                    if after_pos != -1:
+                        potential_content = original[before_pos:after_pos]
+                        potential_matches.append((before_pos, after_pos, potential_content))
+
+        if potential_matches:
+            print(f"  Potential matches in original:")
+            for start, end, content in potential_matches[:3]:  # Show top 3
+                print(f"    {start:3d}-{end:3d}: '{content}'")
+        else:
+            print(f"  No context matches found in original text")
+
+        # Check if any ground truth entities have this label
+        matching_gt = [e for e in gt_entities if e['label'] == label]
+        if matching_gt:
+            print(f"  Ground truth entities with label {label}:")
+            for gt_ent in matching_gt:
+                gt_content = original[gt_ent['start']:gt_ent['end']]
+                print(f"    {gt_ent['start']:3d}-{gt_ent['end']:3d}: '{gt_content}'")
+
+
+def list_files_with_issues(results_file: str, ground_truth_file: str):
+    """List files that have alignment issues."""
+
+    with open(results_file, 'r', encoding='utf-8') as f:
+        results = json.load(f)
+
+    with open(ground_truth_file, 'r', encoding='utf-8') as f:
+        ground_truth = json.load(f)
+
+    gt_lookup = {item['file']: item for item in ground_truth}
+    placeholder_pattern = re.compile(r'<<([A-Z_]+)(?:_\d+)?>>')
+
+    issues = []
+
+    for result in results:
+        filename = result['file']
+        if filename not in gt_lookup:
+            continue
+
+        anonymized = result.get('anonymized_text', '')
+        extracted_entities = result.get('entities', [])
+        gt_entities = gt_lookup[filename].get('entities', [])
+
+        if anonymized:
+            placeholders = placeholder_pattern.findall(anonymized)
+
+            issue_score = 0
+            issue_reasons = []
+
+            # Check for major discrepancies
+            if abs(len(placeholders) - len(extracted_entities)) > 2:
+                issue_score += abs(len(placeholders) - len(extracted_entities))
+                issue_reasons.append(
+                    f"placeholder/extraction mismatch: {len(placeholders)} vs {len(extracted_entities)}")
+
+            if abs(len(gt_entities) - len(placeholders)) > 3:
+                issue_score += abs(len(gt_entities) - len(placeholders))
+                issue_reasons.append(f"GT/placeholder mismatch: {len(gt_entities)} vs {len(placeholders)}")
+
+            # Check for very short extracted spans
+            short_spans = sum(1 for e in extracted_entities if (e['end'] - e['start']) <= 2)
+            if short_spans > len(extracted_entities) * 0.3:  # More than 30% are very short
+                issue_score += short_spans
+                issue_reasons.append(f"{short_spans} very short spans")
+
+            if issue_score > 0:
+                issues.append({
+                    'file': filename,
+                    'score': issue_score,
+                    'reasons': issue_reasons,
+                    'gt_entities': len(gt_entities),
+                    'placeholders': len(placeholders),
+                    'extracted': len(extracted_entities)
+                })
+
+    # Sort by issue score
+    issues.sort(key=lambda x: x['score'], reverse=True)
+
+    print(f"FILES WITH ALIGNMENT ISSUES (top 10):")
+    print("-" * 80)
+    for i, issue in enumerate(issues[:10]):
+        print(
+            f"{i + 1:2d}. {issue['file']:20s} (score: {issue['score']:2d}) GT:{issue['gt_entities']:2d} PH:{issue['placeholders']:2d} EX:{issue['extracted']:2d}")
+        for reason in issue['reasons']:
+            print(f"      - {reason}")
+
+    return [issue['file'] for issue in issues[:5]]  # Return top 5 problematic files
+
+
+def quick_quality_check(results_file: str):
+    """Quick check of anonymization quality."""
+
+    with open(results_file, 'r', encoding='utf-8') as f:
+        results = json.load(f)
+
+    placeholder_pattern = re.compile(r'<<([A-Z_]+)(?:_\d+)?>>')
+
+    print("QUICK QUALITY CHECK:")
+    print("-" * 40)
+
+    total_files = len(results)
+    files_with_anonymization = 0
+    total_placeholders = 0
+
+    for result in results:
+        anonymized = result.get('anonymized_text', '')
+        if anonymized:
+            placeholders = placeholder_pattern.findall(anonymized)
+            if placeholders:
+                files_with_anonymization += 1
+                total_placeholders += len(placeholders)
+
+    print(f"Total files: {total_files}")
+    print(f"Files with anonymization: {files_with_anonymization} ({files_with_anonymization / total_files * 100:.1f}%)")
+    print(
+        f"Average placeholders per anonymized file: {total_placeholders / files_with_anonymization:.1f}" if files_with_anonymization > 0 else "N/A")
+
+    # Show a few examples
+    print(f"\nSAMPLE ANONYMIZED TEXTS:")
+    print("-" * 40)
+
+    count = 0
+    for result in results:
+        anonymized = result.get('anonymized_text', '')
+        if anonymized and count < 3:
+            placeholders = placeholder_pattern.findall(anonymized)
+            print(f"\nFile: {result['file']}")
+            print(f"Placeholders ({len(placeholders)}): {placeholders[:5]}...")
+            print(f"Text: {anonymized[:150]}...")
+            count += 1
+
+
+if __name__ == "__main__":
+    results_file = "../../../../data/testing/gemini_results_2.5/combined_results.json"
+    ground_truth_file = "../../../../data/original/ground_truth_split/test_norm.json"
+
+    # Quick quality check first
+    quick_quality_check(results_file)
+
+    # List files with issues
+    print("\n" + "=" * 80)
+    problematic_files = list_files_with_issues(results_file, ground_truth_file)
+
+    # Inspect the most problematic file in detail
+    if problematic_files:
+        print(f"\n" + "=" * 80)
+        print(f"DETAILED INSPECTION OF MOST PROBLEMATIC FILE:")
+        inspect_single_file(results_file, ground_truth_file, problematic_files[0])
+
+        # Allow manual inspection of other files
+        print(f"\n" + "=" * 80)
+        print("To inspect other files manually, call:")
+        for i, filename in enumerate(problematic_files[1:3]):
+            print(f"inspect_single_file('{results_file}', '{ground_truth_file}', '{filename}')")
\ No newline at end of file
Index: notebooks/3_model_training_and_testing/gemini_oneshot/llm_anonymizer_new.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notebooks/3_model_training_and_testing/gemini_oneshot/llm_anonymizer_new.py b/notebooks/3_model_training_and_testing/gemini_oneshot/llm_anonymizer_new.py
new file mode 100644
--- /dev/null	(date 1753965434714)
+++ b/notebooks/3_model_training_and_testing/gemini_oneshot/llm_anonymizer_new.py	(date 1753965434714)
@@ -0,0 +1,200 @@
+#!/usr/bin/env python3
+"""
+Simplified Gemini Email Anonymization Pipeline
+
+This version reads .txt files, sends them to Gemini for anonymization,
+and saves the filename + anonymized text into a combined JSON file.
+
+Output format:
+[
+  {
+    "file": "example.txt",
+    "anonymized_text": "<<VORNAME>> ... <<NACHNAME>> ..."
+  },
+  ...
+]
+"""
+
+import os
+import sys
+import json
+import getpass
+import logging
+from pathlib import Path
+from typing import List, Dict
+from concurrent.futures import ThreadPoolExecutor, as_completed
+
+import google.generativeai as genai
+
+# --- Logging ---
+logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
+logger = logging.getLogger(__name__)
+
+
+class GeminiAnonymizer:
+    TARGET_LABELS = [
+        'NACHNAME', 'VORNAME', 'STRASSE', 'POSTLEITZAHL', 'WOHNORT',
+        'HAUSNUMMER', 'VERTRAGSNUMMER', 'DATUM', 'ZÄHLERNUMMER',
+        'TELEFONNUMMER', 'GESENDET_MIT', 'ZAHLUNG', 'FIRMA', 'TITEL',
+        'EMAIL', 'ZÄHLERSTAND', 'LINK', 'IBAN', 'BANK', 'BIC', 'FAX'
+    ]
+
+    def __init__(self, api_key: str, model_name: str = "gemini-2.5-flash"):
+        genai.configure(api_key=api_key)
+        try:
+            self.model = genai.GenerativeModel(model_name, generation_config={"temperature": 0})
+        except Exception:
+            self.model = genai.GenerativeModel(model_name)
+
+    def _create_anonymization_prompt(self, text: str) -> str:
+        labels_str = "', '".join(self.TARGET_LABELS)
+        return f"""You are an expert text anonymization system. Your task is to identify and replace sensitive entities in German email text with anonymization placeholders.
+
+        IMPORTANT RULES:
+        1. Only replace entities that match these 21 labels: ['{labels_str}']
+        2. Replace *each* detected entity occurrence with <<LABEL_N>> (e.g., <<VORNAME_1>>, <<NACHNAME_1>>). If the same type appears multiple times, repeat the placeholder each time and increase the index.
+        3. Preserve the original text structure, formatting, and whitespace exactly where possible.
+        4. Do not modify any text that doesn't contain sensitive entities.
+        5. Return ONLY the anonymized text, no explanations or metadata.
+
+        LABEL DEFINITIONS:
+        - NACHNAME: Last names/surnames
+        - VORNAME: First names/given names
+        - STRASSE: Street names
+        - POSTLEITZAHL: Postal codes
+        - WOHNORT: City/town names
+        - HAUSNUMMER: House numbers
+        - VERTRAGSNUMMER: Contract numbers, all other sensitive numbers that are not defined in other categories
+        - DATUM: Dates in any format - also just as plain text, e.g. "Juni" or "August"
+        - ZÄHLERNUMMER: Meter numbers, e.g., "1LOG0065054693"
+        - TELEFONNUMMER: Phone numbers
+        - GESENDET_MIT: "Sent with" messages
+        - ZAHLUNG: Payment information, e.g., "110,0€" 
+        - FIRMA: Company names
+        - TITEL: Titles (e.g., Dr., Dipl.)
+        - EMAIL: Email addresses
+        - ZÄHLERSTAND: Meter readings, could be in m3 or kWh or without units
+        - LINK: URLs and web links
+        - IBAN: Bank account numbers
+        - BANK: Bank names
+        - BIC: Bank identifier codes
+        - FAX: Fax numbers
+        
+        EXAMPLE:
+        Input: "Hallo liebes Eon Team,\nes geht um die Vertragsnummer 406027919.\nBei der Einrichtung meines neuen Vertrages wurde leider die Überweisung als\nZahlungsart gewählt von dem jungen Kollegen an der Wohnungstür. Ich würde\nes gerne wieder per Lastschrift abbuchen lassen, um mir den Stress zu\nersparen.\nVerbraucherstelle ist weiterhin die Gertzgasse 2 in 17389 Anklam.\nGruß Berthold Huhn\n"
+        Output: "Hallo liebes Eon Team,\nes geht um die Vertragsnummer <<VERTRAGSNUMMER_1>>.\nBei der Einrichtung meines neuen Vertrages wurde leider die Überweisung als\nZahlungsart gewählt von dem jungen Kollegen an der Wohnungstür. Ich würde\nes gerne wieder per Lastschrift abbuchen lassen, um mir den Stress zu\nersparen.\nVerbraucherstelle ist weiterhin die <<STRASSE_1>> <<HAUSNUMMER_1>> in <<POSTLEITZAHL_1>> <<WOHNORT_1>>.\nGruß <<VORNAME_1>> <<NACHNAME_1>>\n"
+
+        TEXT TO ANONYMIZE:
+        {text}
+
+        ANONYMIZED TEXT:"""
+
+    def call_gemini_api(self, text: str) -> str:
+        try:
+            prompt = self._create_anonymization_prompt(text)
+            response = self.model.generate_content(prompt)
+            if response and hasattr(response, 'text') and response.text is not None:
+                return response.text.rstrip("\r")
+        except Exception as e:
+            logger.error(f"Error calling Gemini API: {e}")
+        return text
+
+    def process_file(self, path: str) -> Dict:
+        logger.info(f"Processing file: {path}")
+        original = Path(path).read_text(encoding='utf-8')
+        anonymized = self.call_gemini_api(original)
+        return {
+            "file": Path(path).name,
+            "anonymized_text": anonymized,
+        }
+
+    def process_directory_parallel(self, dir_path: str, max_workers: int = 5) -> List[Dict]:
+        files = list(Path(dir_path).glob("*.txt"))
+        results: List[Dict] = []
+        with ThreadPoolExecutor(max_workers=max_workers) as executor:
+            future_to_file = {executor.submit(self.process_file, str(fp)): fp for fp in files}
+            for future in as_completed(future_to_file):
+                fp = future_to_file[future]
+                try:
+                    results.append(future.result())
+                except Exception as e:
+                    logger.error(f"Error processing {fp.name}: {e}")
+                    results.append({
+                        "file": fp.name,
+                        "anonymized_text": None,
+                        "error": str(e),
+                    })
+        return results
+
+    def process_json_file_parallel(self, path: str, max_workers: int = 5) -> List[Dict]:
+        logger.info(f"Processing JSON file: {path}")
+        try:
+            content = Path(path).read_text(encoding='utf-8')
+            data = json.loads(content)
+        except Exception as e:
+            logger.error(f"Failed to read or parse JSON file {path}: {e}")
+            return []
+        if not isinstance(data, list):
+            logger.error(f"Expected a list in JSON file {path}, got {type(data)}")
+            return []
+        results: List[Dict] = []
+        with ThreadPoolExecutor(max_workers=max_workers) as executor:
+            future_to_file = {}
+            for entry in data:
+                file_name = entry.get("file", "<unknown>")
+                original_text = entry.get("text", "")
+                future = executor.submit(self.call_gemini_api, original_text)
+                future_to_file[future] = file_name
+            for future in as_completed(future_to_file):
+                file_name = future_to_file[future]
+                try:
+                    anonymized = future.result()
+                    results.append({
+                        "file": file_name,
+                        "anonymized_text": anonymized,
+                    })
+                except Exception as e:
+                    logger.error(f"Error processing {file_name}: {e}")
+                    results.append({
+                        "file": file_name,
+                        "anonymized_text": None,
+                        "error": str(e),
+                    })
+        return results
+
+
+def main():
+    print("Start Gemini Anonymization Process")
+    api_key = os.environ.get("GEMINI_API_KEY")
+    if not api_key:
+        api_key = getpass.getpass("Enter your Gemini API key: ")
+        if not api_key:
+            logger.error("No API key provided.")
+            return 1
+
+    input_path = "../../../data/original/ground_truth_split/test_norm.json"
+    output_dir = "../../../data/testing/gemini_results/anonymized_text_results"
+    model_name = "gemini-1.5-flash"
+    max_workers = 5
+
+    Path(output_dir).mkdir(parents=True, exist_ok=True)
+
+    anonymizer = GeminiAnonymizer(api_key, model_name)
+    if Path(input_path).is_file() and input_path.lower().endswith(".json"):
+        results = anonymizer.process_json_file_parallel(input_path, max_workers=max_workers)
+    elif Path(input_path).is_dir():
+        results = anonymizer.process_directory_parallel(input_path, max_workers=max_workers)
+    else:
+        logger.error(f"Input path {input_path} is neither a directory nor a JSON file.")
+        return 1
+
+    combined_file = Path(output_dir) / "combined_results_1.5.json"
+    with combined_file.open("w", encoding="utf-8") as f:
+        json.dump(results, f, ensure_ascii=False, indent=2)
+    logger.info(f"Wrote combined results ({len(results)} entries) to {combined_file}")
+
+    return 0
+
+
+if __name__ == "__main__":
+    sys.exit(main())
\ No newline at end of file
Index: notebooks/3_model_training_and_testing/gemini_oneshot/Path
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notebooks/3_model_training_and_testing/gemini_oneshot/Path b/notebooks/3_model_training_and_testing/gemini_oneshot/Path
new file mode 100644
--- /dev/null	(date 1753952690613)
+++ b/notebooks/3_model_training_and_testing/gemini_oneshot/Path	(date 1753952690613)
@@ -0,0 +1,12 @@
+For Anonymization
+
+input_path = "../../../data/original/ground_truth_split/test_norm.json"
+    output_dir = "../../../data/testing/gemini_results_2.5"
+    model_name = "gemini-2.5-flash"
+    max_workers = 5
+
+For evaluation
+
+ground_truth_path = "../../../data/original/ground_truth_split/test_norm.json"
+    gemini_path = "../../../data/testing/gemini_results_2.5/combined_results.json"
+    output_path = "../../../data/testing/gemini_results_2.5/evaluation_results_2.5.json"
\ No newline at end of file
Index: notebooks/3_model_training_and_testing/gemini_oneshot/llm_evaluation_new.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notebooks/3_model_training_and_testing/gemini_oneshot/llm_evaluation_new.py b/notebooks/3_model_training_and_testing/gemini_oneshot/llm_evaluation_new.py
new file mode 100644
--- /dev/null	(date 1753965462406)
+++ b/notebooks/3_model_training_and_testing/gemini_oneshot/llm_evaluation_new.py	(date 1753965462406)
@@ -0,0 +1,214 @@
+import json
+import re
+import sys
+from collections import defaultdict, Counter
+from typing import List, Tuple, Dict, Optional
+
+Entity = Tuple[int, int, str]  # (start, end, label)
+
+
+def load_json(path: str):
+    with open(path, encoding="utf-8") as f:
+        return json.load(f)
+
+
+def build_gt_mapping(ground_truth_records: List[Dict]) -> Dict[str, Dict[str, List[Entity]]]:
+    """
+    Returns: { filename: { label: [ (start, end, label), ... sorted by start ] } }
+    """
+    mapping = {}
+    for rec in ground_truth_records:
+        file = rec["file"]
+        labels = rec.get("labels", [])
+        per_label = defaultdict(list)
+        for ent in labels:
+            start, end, label = ent["start"], ent["end"], ent["label"]
+            per_label[label].append((start, end, label))
+        for label in per_label:
+            per_label[label].sort(key=lambda x: x[0])
+        mapping[file] = per_label
+    return mapping
+
+
+def extract_predictions_from_anonymized(anonymized_records: List[Dict],
+                                       gt_mapping: Dict[str, Dict[str, List[Entity]]]
+                                      ) -> Dict[str, List[Entity]]:
+    """
+    For each file, extract placeholders like <<LABEL_2>> and map them to spans in ground truth via ordinal.
+    Returns: { filename: [ (start, end, label), ... ] } predicted entities
+    """
+    placeholder_re = re.compile(r"<<([A-Z_]+)_(\d+)>>")
+    predictions = {}
+
+    for rec in anonymized_records:
+        file = rec["file"]
+        text = rec.get("anonymized_text", "")
+        preds = []
+        gt_labels_for_file = gt_mapping.get(file, {})
+        for match in placeholder_re.finditer(text):
+            label = match.group(1)
+            index = int(match.group(2))  # 1-based
+            gt_list = gt_labels_for_file.get(label, [])
+            if 1 <= index <= len(gt_list):
+                span = gt_list[index - 1]  # ordinal mapping
+                preds.append(span)
+            else:
+                # No corresponding ground truth span: sentinel to count as FP
+                preds.append((-1, -1, label))
+        predictions[file] = preds
+    return predictions
+
+
+def compute_confusion_single_file(gt_labels: Dict[str, List[Entity]],
+                                  pred_entities: List[Entity]
+                                 ) -> Tuple[Counter, Counter, Counter]:
+    """
+    Compute TP/FP/FN for one file.
+    """
+    tp = Counter()
+    fp = Counter()
+    fn = Counter()
+
+    gt_entities_all = []
+    for label, lst in gt_labels.items():
+        gt_entities_all.extend(lst)
+    gt_set = set(gt_entities_all)
+    pred_set = set(pred_entities)
+
+    for ent in pred_set:
+        if ent in gt_set and ent[0] != -1:
+            tp[ent[2]] += 1
+        else:
+            fp[ent[2]] += 1
+
+    for ent in gt_set:
+        if ent not in pred_set:
+            fn[ent[2]] += 1
+
+    return tp, fp, fn
+
+
+def compute_confusion(gt_mapping: Dict[str, Dict[str, List[Entity]]],
+                      pred_mapping: Dict[str, List[Entity]]
+                     ) -> Tuple[Counter, Counter, Counter]:
+    tp_total = Counter()
+    fp_total = Counter()
+    fn_total = Counter()
+
+    # Files present in either set
+    all_files = set(gt_mapping.keys()) | set(pred_mapping.keys())
+    for file in all_files:
+        gt_labels = gt_mapping.get(file, {})  # could be empty
+        pred_entities = pred_mapping.get(file, [])
+        tp, fp, fn = compute_confusion_single_file(gt_labels, pred_entities)
+        tp_total.update(tp)
+        fp_total.update(fp)
+        fn_total.update(fn)
+
+    return tp_total, fp_total, fn_total
+
+
+def precision_recall_f1(tp: int, fp: int, fn: int):
+    prec = tp / (tp + fp) if (tp + fp) > 0 else 0.0
+    rec = tp / (tp + fn) if (tp + fn) > 0 else 0.0
+    if prec + rec == 0:
+        f1 = 0.0
+    else:
+        f1 = 2 * prec * rec / (prec + rec)
+    return prec, rec, f1
+
+
+def aggregate_metrics(tp: Counter, fp: Counter, fn: Counter):
+    per_label = {}
+    for label in sorted(set(list(tp.keys()) + list(fp.keys()) + list(fn.keys()))):
+        p, r, f1 = precision_recall_f1(tp[label], fp[label], fn[label])
+        per_label[label] = {
+            "precision": p,
+            "recall": r,
+            "f1": f1,
+            "tp": tp[label],
+            "fp": fp[label],
+            "fn": fn[label],
+        }
+
+    total_tp = sum(tp.values())
+    total_fp = sum(fp.values())
+    total_fn = sum(fn.values())
+    micro_p, micro_r, micro_f1 = precision_recall_f1(total_tp, total_fp, total_fn)
+
+    macro_f1 = sum(v["f1"] for v in per_label.values()) / max(len(per_label), 1)
+
+    return {
+        "per_label": per_label,
+        "micro": {"precision": micro_p, "recall": micro_r, "f1": micro_f1},
+        "macro_f1": macro_f1,
+        "totals": {"tp": total_tp, "fp": total_fp, "fn": total_fn},
+    }
+
+
+def print_summary(overall_metrics: Dict, per_file_metrics: Dict[str, Dict]):
+    def fmt(x):
+        return f"{x:.3f}"
+
+    print("\n=== OVERALL ===")
+    print("Micro precision:  ", fmt(overall_metrics["micro"]["precision"]))
+    print("Micro recall:     ", fmt(overall_metrics["micro"]["recall"]))
+    print("Micro F1:         ", fmt(overall_metrics["micro"]["f1"]))
+    print("Macro F1:         ", fmt(overall_metrics["macro_f1"]))
+    print("Totals (TP/FP/FN):", overall_metrics["totals"]["tp"],
+          overall_metrics["totals"]["fp"], overall_metrics["totals"]["fn"])
+    print("\nPer-label breakdown:")
+    headers = ["Label", "TP", "FP", "FN", "Precision", "Recall", "F1"]
+    print(f"{headers[0]:20} {headers[1]:>3} {headers[2]:>3} {headers[3]:>3} {headers[4]:>9} {headers[5]:>7} {headers[6]:>6}")
+    for label, stats in overall_metrics["per_label"].items():
+        print(f"{label:20} {stats['tp']:3} {stats['fp']:3} {stats['fn']:3} "
+              f"{fmt(stats['precision']):>9} {fmt(stats['recall']):>7} {fmt(stats['f1']):>6}")
+
+    print("\n=== PER FILE ===")
+    for fname, metrics in sorted(per_file_metrics.items()):
+        print(f"\nFile: {fname}")
+        print("  Micro P / R / F1:",
+              fmt(metrics["micro"]["precision"]), "/",
+              fmt(metrics["micro"]["recall"]), "/",
+              fmt(metrics["micro"]["f1"]))
+        print("  Totals (TP/FP/FN):", metrics["totals"]["tp"],
+              metrics["totals"]["fp"], metrics["totals"]["fn"])
+        # optionally per-label for that file:
+        for label, stats in metrics["per_label"].items():
+            print(f"    {label:15} TP={stats['tp']} FP={stats['fp']} FN={stats['fn']} "
+                  f"P={fmt(stats['precision'])} R={fmt(stats['recall'])} F1={fmt(stats['f1'])}")
+
+
+def compute_per_file(gt_mapping: Dict[str, Dict[str, List[Entity]]],
+                     pred_mapping: Dict[str, List[Entity]]
+                    ) -> Dict[str, Dict]:
+    per_file = {}
+    all_files = set(gt_mapping.keys()) | set(pred_mapping.keys())
+    for file in all_files:
+        gt_labels = gt_mapping.get(file, {})
+        pred_entities = pred_mapping.get(file, [])
+        tp, fp, fn = compute_confusion_single_file(gt_labels, pred_entities)
+        metrics = aggregate_metrics(tp, fp, fn)
+        per_file[file] = metrics
+    return per_file
+
+
+def main(gt_json_path: str, anonymized_json_path: str):
+    anonymized = load_json(anonymized_json_path)
+    ground_truth = load_json(gt_json_path)
+
+    gt_map = build_gt_mapping(ground_truth)
+    pred_map = extract_predictions_from_anonymized(anonymized, gt_map)
+    tp, fp, fn = compute_confusion(gt_map, pred_map)
+    overall_metrics = aggregate_metrics(tp, fp, fn)
+    per_file_metrics = compute_per_file(gt_map, pred_map)
+
+    print_summary(overall_metrics, per_file_metrics)
+
+
+
+if __name__ == "__main__":
+    # === hardcode your paths here ===
+    gt_path = "../../../data/original/ground_truth_split/test_norm.json"
+    anon_path = "../../../data/testing/gemini_results/anonymized_text_results/combined_results_1.5.json"
+    main(gt_path, anon_path)
\ No newline at end of file
Index: notebooks/1_data_preparation/2_data_split/overlapping_spans_analysis.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"id\": \"initial_id\",\n   \"metadata\": {\n    \"collapsed\": true,\n    \"ExecuteTime\": {\n     \"end_time\": \"2025-07-13T13:32:07.131310Z\",\n     \"start_time\": \"2025-07-13T13:32:06.676913Z\"\n    }\n   },\n   \"source\": [\n    \"# Span Overlap Analysis Notebook\\n\",\n    \"# Analyze overlapping spans in labeled datasets\\n\",\n    \"\\n\",\n    \"import json\\n\",\n    \"import pandas as pd\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"import seaborn as sns\\n\",\n    \"from typing import Dict, List, Tuple, Set\\n\",\n    \"from collections import defaultdict\\n\",\n    \"import os\\n\",\n    \"\\n\",\n    \"def load_dataset(file_path: str) -> List[Dict]:\\n\",\n    \"    \\\"\\\"\\\"Load JSON dataset from file.\\\"\\\"\\\"\\n\",\n    \"    try:\\n\",\n    \"        with open(file_path, 'r', encoding='utf-8') as f:\\n\",\n    \"            data = json.load(f)\\n\",\n    \"        print(f\\\"✓ Successfully loaded dataset from: {file_path}\\\")\\n\",\n    \"        return data\\n\",\n    \"    except FileNotFoundError:\\n\",\n    \"        print(f\\\"❌ Error: File not found at {file_path}\\\")\\n\",\n    \"        return []\\n\",\n    \"    except json.JSONDecodeError as e:\\n\",\n    \"        print(f\\\"❌ Error: Invalid JSON format - {e}\\\")\\n\",\n    \"        return []\\n\",\n    \"    except Exception as e:\\n\",\n    \"        print(f\\\"❌ Error loading file: {e}\\\")\\n\",\n    \"        return []\\n\",\n    \"\\n\",\n    \"def check_span_overlap(span1: Dict, span2: Dict) -> bool:\\n\",\n    \"    \\\"\\\"\\\"Check if two spans overlap.\\\"\\\"\\\"\\n\",\n    \"    start1, end1 = span1['start'], span1['end']\\n\",\n    \"    start2, end2 = span2['start'], span2['end']\\n\",\n    \"\\n\",\n    \"    # Two spans overlap if one starts before the other ends\\n\",\n    \"    return not (end1 <= start2 or end2 <= start1)\\n\",\n    \"\\n\",\n    \"def get_overlap_details(span1: Dict, span2: Dict) -> Dict:\\n\",\n    \"    \\\"\\\"\\\"Get detailed information about the overlap between two spans.\\\"\\\"\\\"\\n\",\n    \"    start1, end1 = span1['start'], span1['end']\\n\",\n    \"    start2, end2 = span2['start'], span2['end']\\n\",\n    \"\\n\",\n    \"    # Calculate overlap boundaries\\n\",\n    \"    overlap_start = max(start1, start2)\\n\",\n    \"    overlap_end = min(end1, end2)\\n\",\n    \"    overlap_length = overlap_end - overlap_start\\n\",\n    \"\\n\",\n    \"    # Calculate overlap percentages\\n\",\n    \"    span1_length = end1 - start1\\n\",\n    \"    span2_length = end2 - start2\\n\",\n    \"    overlap_percent_span1 = (overlap_length / span1_length) * 100 if span1_length > 0 else 0\\n\",\n    \"    overlap_percent_span2 = (overlap_length / span2_length) * 100 if span2_length > 0 else 0\\n\",\n    \"\\n\",\n    \"    return {\\n\",\n    \"        'overlap_start': overlap_start,\\n\",\n    \"        'overlap_end': overlap_end,\\n\",\n    \"        'overlap_length': overlap_length,\\n\",\n    \"        'overlap_percent_span1': overlap_percent_span1,\\n\",\n    \"        'overlap_percent_span2': overlap_percent_span2\\n\",\n    \"    }\\n\",\n    \"\\n\",\n    \"def analyze_overlaps_in_sample(sample: Dict, dataset_name: str, sample_index: int) -> List[Dict]:\\n\",\n    \"    \\\"\\\"\\\"Analyze overlapping spans within a single sample.\\\"\\\"\\\"\\n\",\n    \"    labels = sample.get('labels', [])\\n\",\n    \"    overlaps = []\\n\",\n    \"\\n\",\n    \"    # Check all pairs of labels for overlaps\\n\",\n    \"    for i in range(len(labels)):\\n\",\n    \"        for j in range(i + 1, len(labels)):\\n\",\n    \"            span1 = labels[i]\\n\",\n    \"            span2 = labels[j]\\n\",\n    \"\\n\",\n    \"            if check_span_overlap(span1, span2):\\n\",\n    \"                overlap_details = get_overlap_details(span1, span2)\\n\",\n    \"\\n\",\n    \"                # Extract text snippets\\n\",\n    \"                text = sample.get('text', '')\\n\",\n    \"                span1_text = text[span1['start']:span1['end']]\\n\",\n    \"                span2_text = text[span2['start']:span2['end']]\\n\",\n    \"                overlap_text = text[overlap_details['overlap_start']:overlap_details['overlap_end']]\\n\",\n    \"\\n\",\n    \"                overlap_info = {\\n\",\n    \"                    'dataset': dataset_name,\\n\",\n    \"                    'sample_index': sample_index,\\n\",\n    \"                    'sample_file': sample.get('file', f'sample_{sample_index}'),\\n\",\n    \"                    'text_preview': text[:100] + '...' if len(text) > 100 else text,\\n\",\n    \"                    'span1_label': span1['label'],\\n\",\n    \"                    'span1_start': span1['start'],\\n\",\n    \"                    'span1_end': span1['end'],\\n\",\n    \"                    'span1_text': span1_text,\\n\",\n    \"                    'span2_label': span2['label'],\\n\",\n    \"                    'span2_start': span2['start'],\\n\",\n    \"                    'span2_end': span2['end'],\\n\",\n    \"                    'span2_text': span2_text,\\n\",\n    \"                    'overlap_text': overlap_text,\\n\",\n    \"                    **overlap_details\\n\",\n    \"                }\\n\",\n    \"\\n\",\n    \"                overlaps.append(overlap_info)\\n\",\n    \"\\n\",\n    \"    return overlaps\\n\",\n    \"\\n\",\n    \"def analyze_dataset_overlaps(data: List[Dict], dataset_name: str) -> List[Dict]:\\n\",\n    \"    \\\"\\\"\\\"Analyze all overlapping spans in a dataset.\\\"\\\"\\\"\\n\",\n    \"    all_overlaps = []\\n\",\n    \"\\n\",\n    \"    for i, sample in enumerate(data):\\n\",\n    \"        sample_overlaps = analyze_overlaps_in_sample(sample, dataset_name, i)\\n\",\n    \"        all_overlaps.extend(sample_overlaps)\\n\",\n    \"\\n\",\n    \"    return all_overlaps\\n\",\n    \"\\n\",\n    \"def create_overlap_summary(overlaps: List[Dict]) -> Dict:\\n\",\n    \"    \\\"\\\"\\\"Create a summary of overlap statistics.\\\"\\\"\\\"\\n\",\n    \"    if not overlaps:\\n\",\n    \"        return {\\n\",\n    \"            'total_overlaps': 0,\\n\",\n    \"            'samples_with_overlaps': 0,\\n\",\n    \"            'datasets_affected': set(),\\n\",\n    \"            'label_pairs': {},\\n\",\n    \"            'overlap_types': {}\\n\",\n    \"        }\\n\",\n    \"\\n\",\n    \"    # Basic statistics\\n\",\n    \"    total_overlaps = len(overlaps)\\n\",\n    \"    samples_with_overlaps = len(set((o['dataset'], o['sample_index']) for o in overlaps))\\n\",\n    \"    datasets_affected = set(o['dataset'] for o in overlaps)\\n\",\n    \"\\n\",\n    \"    # Label pair analysis\\n\",\n    \"    label_pairs = defaultdict(int)\\n\",\n    \"    for overlap in overlaps:\\n\",\n    \"        pair = tuple(sorted([overlap['span1_label'], overlap['span2_label']]))\\n\",\n    \"        label_pairs[pair] += 1\\n\",\n    \"\\n\",\n    \"    # Overlap type analysis (by overlap percentage)\\n\",\n    \"    overlap_types = {\\n\",\n    \"        'minor_overlap': 0,      # < 25% overlap\\n\",\n    \"        'moderate_overlap': 0,   # 25-50% overlap\\n\",\n    \"        'major_overlap': 0,      # 50-75% overlap\\n\",\n    \"        'severe_overlap': 0      # > 75% overlap\\n\",\n    \"    }\\n\",\n    \"\\n\",\n    \"    for overlap in overlaps:\\n\",\n    \"        max_overlap_percent = max(overlap['overlap_percent_span1'], overlap['overlap_percent_span2'])\\n\",\n    \"        if max_overlap_percent < 25:\\n\",\n    \"            overlap_types['minor_overlap'] += 1\\n\",\n    \"        elif max_overlap_percent < 50:\\n\",\n    \"            overlap_types['moderate_overlap'] += 1\\n\",\n    \"        elif max_overlap_percent < 75:\\n\",\n    \"            overlap_types['major_overlap'] += 1\\n\",\n    \"        else:\\n\",\n    \"            overlap_types['severe_overlap'] += 1\\n\",\n    \"\\n\",\n    \"    return {\\n\",\n    \"        'total_overlaps': total_overlaps,\\n\",\n    \"        'samples_with_overlaps': samples_with_overlaps,\\n\",\n    \"        'datasets_affected': datasets_affected,\\n\",\n    \"        'label_pairs': dict(label_pairs),\\n\",\n    \"        'overlap_types': overlap_types\\n\",\n    \"    }\\n\",\n    \"\\n\",\n    \"def print_overlap_summary(summary: Dict):\\n\",\n    \"    \\\"\\\"\\\"Print a summary of overlap analysis.\\\"\\\"\\\"\\n\",\n    \"    print(\\\"=\\\" * 60)\\n\",\n    \"    print(\\\"\uD83D\uDD0D SPAN OVERLAP ANALYSIS SUMMARY\\\")\\n\",\n    \"    print(\\\"=\\\" * 60)\\n\",\n    \"\\n\",\n    \"    print(f\\\"\\\\n\uD83D\uDCCA OVERVIEW:\\\")\\n\",\n    \"    print(f\\\"  Total overlapping span pairs: {summary['total_overlaps']}\\\")\\n\",\n    \"    print(f\\\"  Samples with overlaps: {summary['samples_with_overlaps']}\\\")\\n\",\n    \"    print(f\\\"  Datasets affected: {', '.join(summary['datasets_affected']) if summary['datasets_affected'] else 'None'}\\\")\\n\",\n    \"\\n\",\n    \"    if summary['total_overlaps'] > 0:\\n\",\n    \"        print(f\\\"\\\\n\uD83D\uDCC8 OVERLAP SEVERITY:\\\")\\n\",\n    \"        overlap_types = summary['overlap_types']\\n\",\n    \"        for overlap_type, count in overlap_types.items():\\n\",\n    \"            percentage = (count / summary['total_overlaps']) * 100\\n\",\n    \"            print(f\\\"  {overlap_type.replace('_', ' ').title()}: {count} ({percentage:.1f}%)\\\")\\n\",\n    \"\\n\",\n    \"        print(f\\\"\\\\n\uD83C\uDFF7\uFE0F  MOST COMMON OVERLAPPING LABEL PAIRS:\\\")\\n\",\n    \"        sorted_pairs = sorted(summary['label_pairs'].items(), key=lambda x: x[1], reverse=True)\\n\",\n    \"        for (label1, label2), count in sorted_pairs[:10]:  # Top 10\\n\",\n    \"            print(f\\\"  {label1} ↔ {label2}: {count} overlaps\\\")\\n\",\n    \"\\n\",\n    \"    if summary['total_overlaps'] == 0:\\n\",\n    \"        print(f\\\"\\\\n✅ No overlapping spans found!\\\")\\n\",\n    \"\\n\",\n    \"def create_overlap_dataframe(overlaps: List[Dict]) -> pd.DataFrame:\\n\",\n    \"    \\\"\\\"\\\"Create a pandas DataFrame from overlap data.\\\"\\\"\\\"\\n\",\n    \"    if not overlaps:\\n\",\n    \"        return pd.DataFrame()\\n\",\n    \"\\n\",\n    \"    # Select relevant columns for the DataFrame\\n\",\n    \"    df_data = []\\n\",\n    \"    for overlap in overlaps:\\n\",\n    \"        df_data.append({\\n\",\n    \"            'Dataset': overlap['dataset'],\\n\",\n    \"            'Sample_File': overlap['sample_file'],\\n\",\n    \"            'Sample_Index': overlap['sample_index'],\\n\",\n    \"            'Label_1': overlap['span1_label'],\\n\",\n    \"            'Span_1': f\\\"{overlap['span1_start']}-{overlap['span1_end']}\\\",\\n\",\n    \"            'Text_1': overlap['span1_text'],\\n\",\n    \"            'Label_2': overlap['span2_label'],\\n\",\n    \"            'Span_2': f\\\"{overlap['span2_start']}-{overlap['span2_end']}\\\",\\n\",\n    \"            'Text_2': overlap['span2_text'],\\n\",\n    \"            'Overlap_Text': overlap['overlap_text'],\\n\",\n    \"            'Overlap_Length': overlap['overlap_length'],\\n\",\n    \"            'Overlap_Percent_1': f\\\"{overlap['overlap_percent_span1']:.1f}%\\\",\\n\",\n    \"            'Overlap_Percent_2': f\\\"{overlap['overlap_percent_span2']:.1f}%\\\"\\n\",\n    \"        })\\n\",\n    \"\\n\",\n    \"    return pd.DataFrame(df_data)\\n\",\n    \"\\n\",\n    \"def create_overlap_visualizations(overlaps: List[Dict], summary: Dict):\\n\",\n    \"    \\\"\\\"\\\"Create visualizations for overlap analysis.\\\"\\\"\\\"\\n\",\n    \"    if not overlaps:\\n\",\n    \"        print(\\\"No overlaps found - no visualizations to create.\\\")\\n\",\n    \"        return\\n\",\n    \"\\n\",\n    \"    fig, axes = plt.subplots(2, 2, figsize=(15, 12))\\n\",\n    \"    fig.suptitle('Span Overlap Analysis Visualizations', fontsize=16, fontweight='bold')\\n\",\n    \"\\n\",\n    \"    # 1. Overlap types distribution\\n\",\n    \"    overlap_types = summary['overlap_types']\\n\",\n    \"    types = list(overlap_types.keys())\\n\",\n    \"    counts = list(overlap_types.values())\\n\",\n    \"\\n\",\n    \"    axes[0, 0].bar([t.replace('_', ' ').title() for t in types], counts,\\n\",\n    \"                   color=['lightgreen', 'yellow', 'orange', 'red'], alpha=0.7)\\n\",\n    \"    axes[0, 0].set_title('Overlap Severity Distribution', fontweight='bold')\\n\",\n    \"    axes[0, 0].set_ylabel('Number of Overlaps')\\n\",\n    \"    axes[0, 0].tick_params(axis='x', rotation=45)\\n\",\n    \"\\n\",\n    \"    # 2. Most common overlapping label pairs\\n\",\n    \"    label_pairs = summary['label_pairs']\\n\",\n    \"    sorted_pairs = sorted(label_pairs.items(), key=lambda x: x[1], reverse=True)[:10]\\n\",\n    \"\\n\",\n    \"    if sorted_pairs:\\n\",\n    \"        pairs, pair_counts = zip(*sorted_pairs)\\n\",\n    \"        pair_labels = [f\\\"{p[0]}\\\\n↔\\\\n{p[1]}\\\" for p in pairs]\\n\",\n    \"\\n\",\n    \"        axes[0, 1].barh(range(len(pairs)), pair_counts, color='lightblue', alpha=0.7)\\n\",\n    \"        axes[0, 1].set_title('Most Common Overlapping Label Pairs', fontweight='bold')\\n\",\n    \"        axes[0, 1].set_xlabel('Number of Overlaps')\\n\",\n    \"        axes[0, 1].set_yticks(range(len(pairs)))\\n\",\n    \"        axes[0, 1].set_yticklabels(pair_labels, fontsize=8)\\n\",\n    \"\\n\",\n    \"    # 3. Overlap length distribution\\n\",\n    \"    overlap_lengths = [o['overlap_length'] for o in overlaps]\\n\",\n    \"    axes[1, 0].hist(overlap_lengths, bins=min(20, max(overlap_lengths)),\\n\",\n    \"                    color='lightcoral', alpha=0.7, edgecolor='black')\\n\",\n    \"    axes[1, 0].set_title('Overlap Length Distribution', fontweight='bold')\\n\",\n    \"    axes[1, 0].set_xlabel('Overlap Length (characters)')\\n\",\n    \"    axes[1, 0].set_ylabel('Frequency')\\n\",\n    \"\\n\",\n    \"    # 4. Overlaps by dataset\\n\",\n    \"    dataset_counts = defaultdict(int)\\n\",\n    \"    for overlap in overlaps:\\n\",\n    \"        dataset_counts[overlap['dataset']] += 1\\n\",\n    \"\\n\",\n    \"    datasets = list(dataset_counts.keys())\\n\",\n    \"    counts = list(dataset_counts.values())\\n\",\n    \"\\n\",\n    \"    axes[1, 1].pie(counts, labels=datasets, autopct='%1.1f%%', startangle=90)\\n\",\n    \"    axes[1, 1].set_title('Overlaps by Dataset', fontweight='bold')\\n\",\n    \"\\n\",\n    \"    plt.tight_layout()\\n\",\n    \"    plt.show()\\n\",\n    \"\\n\",\n    \"def analyze_overlap_patterns(overlaps: List[Dict]):\\n\",\n    \"    \\\"\\\"\\\"Analyze patterns in overlapping spans.\\\"\\\"\\\"\\n\",\n    \"    if not overlaps:\\n\",\n    \"        return\\n\",\n    \"\\n\",\n    \"    print(f\\\"\\\\n\uD83D\uDD0D DETAILED OVERLAP PATTERNS:\\\")\\n\",\n    \"    print(\\\"-\\\" * 50)\\n\",\n    \"\\n\",\n    \"    # Group by dataset\\n\",\n    \"    dataset_overlaps = defaultdict(list)\\n\",\n    \"    for overlap in overlaps:\\n\",\n    \"        dataset_overlaps[overlap['dataset']].append(overlap)\\n\",\n    \"\\n\",\n    \"    for dataset, dataset_overlaps_list in dataset_overlaps.items():\\n\",\n    \"        print(f\\\"\\\\n\uD83D\uDCC1 {dataset.upper()}:\\\")\\n\",\n    \"        print(f\\\"   Total overlaps: {len(dataset_overlaps_list)}\\\")\\n\",\n    \"\\n\",\n    \"        # Show some examples\\n\",\n    \"        for i, overlap in enumerate(dataset_overlaps_list[:3]):  # Show first 3 examples\\n\",\n    \"            print(f\\\"\\\\n   Example {i+1}:\\\")\\n\",\n    \"            print(f\\\"     File: {overlap['sample_file']}\\\")\\n\",\n    \"            print(f\\\"     Labels: {overlap['span1_label']} ↔ {overlap['span2_label']}\\\")\\n\",\n    \"            print(f\\\"     Spans: [{overlap['span1_start']}-{overlap['span1_end']}] ↔ [{overlap['span2_start']}-{overlap['span2_end']}]\\\")\\n\",\n    \"            print(f\\\"     Text 1: '{overlap['span1_text']}'\\\")\\n\",\n    \"            print(f\\\"     Text 2: '{overlap['span2_text']}'\\\")\\n\",\n    \"            print(f\\\"     Overlap: '{overlap['overlap_text']}'\\\")\\n\",\n    \"            print(f\\\"     Overlap %: {overlap['overlap_percent_span1']:.1f}% / {overlap['overlap_percent_span2']:.1f}%\\\")\\n\",\n    \"\\n\",\n    \"        if len(dataset_overlaps_list) > 3:\\n\",\n    \"            print(f\\\"   ... and {len(dataset_overlaps_list) - 3} more overlaps\\\")\\n\",\n    \"\\n\",\n    \"def analyze_multiple_datasets(dataset_paths: List[Tuple[str, str]]) -> Tuple[List[Dict], pd.DataFrame]:\\n\",\n    \"    \\\"\\\"\\\"Analyze overlaps across multiple datasets.\\\"\\\"\\\"\\n\",\n    \"    all_overlaps = []\\n\",\n    \"\\n\",\n    \"    print(\\\"\uD83D\uDD0D ANALYZING SPAN OVERLAPS ACROSS DATASETS\\\")\\n\",\n    \"    print(\\\"=\\\" * 60)\\n\",\n    \"\\n\",\n    \"    for file_path, dataset_name in dataset_paths:\\n\",\n    \"        print(f\\\"\\\\n\uD83D\uDCC1 Analyzing {dataset_name}...\\\")\\n\",\n    \"        data = load_dataset(file_path)\\n\",\n    \"        if data:\\n\",\n    \"            overlaps = analyze_dataset_overlaps(data, dataset_name)\\n\",\n    \"            all_overlaps.extend(overlaps)\\n\",\n    \"            print(f\\\"   Found {len(overlaps)} overlapping span pairs\\\")\\n\",\n    \"\\n\",\n    \"    # Create summary and visualizations\\n\",\n    \"    summary = create_overlap_summary(all_overlaps)\\n\",\n    \"    print_overlap_summary(summary)\\n\",\n    \"\\n\",\n    \"    if all_overlaps:\\n\",\n    \"        analyze_overlap_patterns(all_overlaps)\\n\",\n    \"        create_overlap_visualizations(all_overlaps, summary)\\n\",\n    \"\\n\",\n    \"    # Create DataFrame\\n\",\n    \"    df = create_overlap_dataframe(all_overlaps)\\n\",\n    \"\\n\",\n    \"    return all_overlaps, df\\n\",\n    \"\\n\",\n    \"# Main analysis function\\n\",\n    \"def main():\\n\",\n    \"    \\\"\\\"\\\"Main function to run overlap analysis.\\\"\\\"\\\"\\n\",\n    \"\\n\",\n    \"    # Define dataset paths\\n\",\n    \"    # dataset_paths = [\\n\",\n    \"    #    (\\\"./train.json\\\", \\\"Training\\\"),\\n\",\n    \"    #    (\\\"./validation.json\\\", \\\"Validation\\\"),\\n\",\n    \"    #    (\\\"./test.json\\\", \\\"Test\\\")\\n\",\n    \"    #]\\n\",\n    \"\\n\",\n    \"    dataset_paths = [\\n\",\n    \"        (\\\"../../../data/original/original_with_spans.json\\\", \\\"Full Dataset\\\")\\n\",\n    \"    ]\\n\",\n    \"\\n\",\n    \"    # Run analysis\\n\",\n    \"    all_overlaps, df = analyze_multiple_datasets(dataset_paths)\\n\",\n    \"\\n\",\n    \"    # Display results\\n\",\n    \"    if not df.empty:\\n\",\n    \"        print(f\\\"\\\\n\uD83D\uDCCB DETAILED OVERLAP RESULTS:\\\")\\n\",\n    \"        print(\\\"-\\\" * 50)\\n\",\n    \"        print(df.to_string(index=False, max_colwidth=50))\\n\",\n    \"\\n\",\n    \"        # Save results to CSV\\n\",\n    \"        output_path = \\\"../../../data/original/granular_dataset_split/descriptives/span_overlap_analysis_results.csv\\\"\\n\",\n    \"        df.to_csv(output_path, index=False)\\n\",\n    \"        print(f\\\"\\\\n\uD83D\uDCBE Results saved to: {output_path}\\\")\\n\",\n    \"    else:\\n\",\n    \"        print(f\\\"\\\\n✅ No overlapping spans found in any dataset!\\\")\\n\",\n    \"\\n\",\n    \"    return all_overlaps, df\\n\",\n    \"\\n\",\n    \"# Example usage for single dataset\\n\",\n    \"def analyze_single_dataset(file_path: str, dataset_name: str):\\n\",\n    \"    \\\"\\\"\\\"Analyze overlaps in a single dataset.\\\"\\\"\\\"\\n\",\n    \"    print(f\\\"\uD83D\uDD0D Analyzing overlaps in {dataset_name}\\\")\\n\",\n    \"    print(\\\"-\\\" * 50)\\n\",\n    \"\\n\",\n    \"    data = load_dataset(file_path)\\n\",\n    \"    if not data:\\n\",\n    \"        return [], pd.DataFrame()\\n\",\n    \"\\n\",\n    \"    overlaps = analyze_dataset_overlaps(data, dataset_name)\\n\",\n    \"    summary = create_overlap_summary(overlaps)\\n\",\n    \"\\n\",\n    \"    print_overlap_summary(summary)\\n\",\n    \"\\n\",\n    \"    if overlaps:\\n\",\n    \"        analyze_overlap_patterns(overlaps)\\n\",\n    \"        create_overlap_visualizations(overlaps, summary)\\n\",\n    \"\\n\",\n    \"    df = create_overlap_dataframe(overlaps)\\n\",\n    \"\\n\",\n    \"    if not df.empty:\\n\",\n    \"        print(f\\\"\\\\n\uD83D\uDCCB OVERLAP DETAILS:\\\")\\n\",\n    \"        print(df.to_string(index=False, max_colwidth=50))\\n\",\n    \"\\n\",\n    \"    return overlaps, df\\n\",\n    \"\\n\",\n    \"if __name__ == \\\"__main__\\\":\\n\",\n    \"    # Run the main analysis\\n\",\n    \"    all_overlaps, results_df = main()\\n\",\n    \"\\n\",\n    \"    # Example: Analyze a single dataset\\n\",\n    \"    # overlaps, df = analyze_single_dataset(\\\"notebooks/data/granular_dataset_split/train.json\\\", \\\"Training\\\")\"\n   ],\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"\uD83D\uDD0D ANALYZING SPAN OVERLAPS ACROSS DATASETS\\n\",\n      \"============================================================\\n\",\n      \"\\n\",\n      \"\uD83D\uDCC1 Analyzing Full Dataset...\\n\",\n      \"✓ Successfully loaded dataset from: ../../../data/original/original_with_spans.json\\n\",\n      \"   Found 2 overlapping span pairs\\n\",\n      \"============================================================\\n\",\n      \"\uD83D\uDD0D SPAN OVERLAP ANALYSIS SUMMARY\\n\",\n      \"============================================================\\n\",\n      \"\\n\",\n      \"\uD83D\uDCCA OVERVIEW:\\n\",\n      \"  Total overlapping span pairs: 2\\n\",\n      \"  Samples with overlaps: 2\\n\",\n      \"  Datasets affected: Full Dataset\\n\",\n      \"\\n\",\n      \"\uD83D\uDCC8 OVERLAP SEVERITY:\\n\",\n      \"  Minor Overlap: 0 (0.0%)\\n\",\n      \"  Moderate Overlap: 0 (0.0%)\\n\",\n      \"  Major Overlap: 1 (50.0%)\\n\",\n      \"  Severe Overlap: 1 (50.0%)\\n\",\n      \"\\n\",\n      \"\uD83C\uDFF7\uFE0F  MOST COMMON OVERLAPPING LABEL PAIRS:\\n\",\n      \"  FIRMA ↔ FIRMA: 1 overlaps\\n\",\n      \"  NACHNAME ↔ VORNAME: 1 overlaps\\n\",\n      \"\\n\",\n      \"\uD83D\uDD0D DETAILED OVERLAP PATTERNS:\\n\",\n      \"--------------------------------------------------\\n\",\n      \"\\n\",\n      \"\uD83D\uDCC1 FULL DATASET:\\n\",\n      \"   Total overlaps: 2\\n\",\n      \"\\n\",\n      \"   Example 1:\\n\",\n      \"     File: 65.txt\\n\",\n      \"     Labels: FIRMA ↔ FIRMA\\n\",\n      \"     Spans: [0-29] ↔ [0-29]\\n\",\n      \"     Text 1: 'Betreuungsbüro \\\"Schmidtke KG\\\"'\\n\",\n      \"     Text 2: 'Betreuungsbüro \\\"Schmidtke KG\\\"'\\n\",\n      \"     Overlap: 'Betreuungsbüro \\\"Schmidtke KG\\\"'\\n\",\n      \"     Overlap %: 100.0% / 100.0%\\n\",\n      \"\\n\",\n      \"   Example 2:\\n\",\n      \"     File: 127.txt\\n\",\n      \"     Labels: VORNAME ↔ NACHNAME\\n\",\n      \"     Spans: [141-147] ↔ [144-150]\\n\",\n      \"     Text 1: 'Dr Fad'\\n\",\n      \"     Text 2: 'Fadime'\\n\",\n      \"     Overlap: 'Fad'\\n\",\n      \"     Overlap %: 50.0% / 50.0%\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<Figure size 1500x1200 with 4 Axes>\"\n      ],\n      \"image/png\": \"\"\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"\\n\",\n      \"\uD83D\uDCCB DETAILED OVERLAP RESULTS:\\n\",\n      \"--------------------------------------------------\\n\",\n      \"     Dataset Sample_File  Sample_Index Label_1  Span_1                        Text_1  Label_2  Span_2                        Text_2                  Overlap_Text  Overlap_Length Overlap_Percent_1 Overlap_Percent_2\\n\",\n      \"Full Dataset      65.txt            63   FIRMA    0-29 Betreuungsbüro \\\"Schmidtke KG\\\"    FIRMA    0-29 Betreuungsbüro \\\"Schmidtke KG\\\" Betreuungsbüro \\\"Schmidtke KG\\\"              29            100.0%            100.0%\\n\",\n      \"Full Dataset     127.txt           118 VORNAME 141-147                        Dr Fad NACHNAME 144-150                        Fadime                           Fad               3             50.0%             50.0%\\n\",\n      \"\\n\",\n      \"\uD83D\uDCBE Results saved to: ../../../data/original/granular_dataset_split/descriptives/span_overlap_analysis_results.csv\\n\"\n     ]\n    }\n   ],\n   \"execution_count\": 6\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 2\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython2\",\n   \"version\": \"2.7.6\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notebooks/1_data_preparation/2_data_split/overlapping_spans_analysis.ipynb b/notebooks/1_data_preparation/2_data_split/overlapping_spans_analysis.ipynb
--- a/notebooks/1_data_preparation/2_data_split/overlapping_spans_analysis.ipynb	(revision 68e3fd01408523769b50e7566e6fd0db7c5afb8a)
+++ b/notebooks/1_data_preparation/2_data_split/overlapping_spans_analysis.ipynb	(date 1754050108940)
@@ -1,512 +1,421 @@
-{
- "cells": [
-  {
-   "cell_type": "code",
-   "id": "initial_id",
-   "metadata": {
-    "collapsed": true,
-    "ExecuteTime": {
-     "end_time": "2025-07-13T13:32:07.131310Z",
-     "start_time": "2025-07-13T13:32:06.676913Z"
+#%% md
+# Span Overlap Analysis
+
+Detect and summarize overlapping labeled spans in one or more JSON datasets.
+
+**Inputs:**
+JSON samples with `labels` entries containing `start`, `end`, and `label` (and optional `text` for context).
+
+**Outputs:**
+- Summary metrics: total overlaps, affected samples/datasets, severity breakdown, common label pairs.
+- Detailed overlap table (span pairs, overlap length/percent, snippet previews).
+- Visualizations: severity distribution, top label-pair overlaps, overlap lengths, dataset share.
+- Optional CSV export of all overlaps.
+
+**Main flow:**
+1. Load dataset(s).
+2. Identify overlapping span pairs per sample and compute overlap details.
+3. Aggregate into summary statistics (including severity buckets and label-pair frequencies).
+4. Display summary and example overlaps per dataset.
+5. Build a DataFrame of all overlaps.
+6. Create visualizations.
+7. Save/export results.
+
+**Assumptions:**
+- Overlap means spans share any character (exclusive end logic).
+- Severity is based on the maximum overlap percentage: <25% minor, 25–50% moderate, 50–75% major, >75% severe.
+- Malformed spans/labels are ignored gracefully.
+#%%
+# Span Overlap Analysis Notebook
+# Analyze overlapping spans in labeled datasets
+
+import json
+import pandas as pd
+import matplotlib.pyplot as plt
+import seaborn as sns
+from typing import Dict, List, Tuple, Set
+from collections import defaultdict
+import os
+
+def load_dataset(file_path: str) -> List[Dict]:
+    """Load JSON dataset from file."""
+    try:
+        with open(file_path, 'r', encoding='utf-8') as f:
+            data = json.load(f)
+        print(f"✓ Successfully loaded dataset from: {file_path}")
+        return data
+    except FileNotFoundError:
+        print(f"❌ Error: File not found at {file_path}")
+        return []
+    except json.JSONDecodeError as e:
+        print(f"❌ Error: Invalid JSON format - {e}")
+        return []
+    except Exception as e:
+        print(f"❌ Error loading file: {e}")
+        return []
+
+def check_span_overlap(span1: Dict, span2: Dict) -> bool:
+    """Check if two spans overlap."""
+    start1, end1 = span1['start'], span1['end']
+    start2, end2 = span2['start'], span2['end']
+
+    # Two spans overlap if one starts before the other ends
+    return not (end1 <= start2 or end2 <= start1)
+
+def get_overlap_details(span1: Dict, span2: Dict) -> Dict:
+    """Get detailed information about the overlap between two spans."""
+    start1, end1 = span1['start'], span1['end']
+    start2, end2 = span2['start'], span2['end']
+
+    # Calculate overlap boundaries
+    overlap_start = max(start1, start2)
+    overlap_end = min(end1, end2)
+    overlap_length = overlap_end - overlap_start
+
+    # Calculate overlap percentages
+    span1_length = end1 - start1
+    span2_length = end2 - start2
+    overlap_percent_span1 = (overlap_length / span1_length) * 100 if span1_length > 0 else 0
+    overlap_percent_span2 = (overlap_length / span2_length) * 100 if span2_length > 0 else 0
+
+    return {
+        'overlap_start': overlap_start,
+        'overlap_end': overlap_end,
+        'overlap_length': overlap_length,
+        'overlap_percent_span1': overlap_percent_span1,
+        'overlap_percent_span2': overlap_percent_span2
     }
-   },
-   "source": [
-    "# Span Overlap Analysis Notebook\n",
-    "# Analyze overlapping spans in labeled datasets\n",
-    "\n",
-    "import json\n",
-    "import pandas as pd\n",
-    "import matplotlib.pyplot as plt\n",
-    "import seaborn as sns\n",
-    "from typing import Dict, List, Tuple, Set\n",
-    "from collections import defaultdict\n",
-    "import os\n",
-    "\n",
-    "def load_dataset(file_path: str) -> List[Dict]:\n",
-    "    \"\"\"Load JSON dataset from file.\"\"\"\n",
-    "    try:\n",
-    "        with open(file_path, 'r', encoding='utf-8') as f:\n",
-    "            data = json.load(f)\n",
-    "        print(f\"✓ Successfully loaded dataset from: {file_path}\")\n",
-    "        return data\n",
-    "    except FileNotFoundError:\n",
-    "        print(f\"❌ Error: File not found at {file_path}\")\n",
-    "        return []\n",
-    "    except json.JSONDecodeError as e:\n",
-    "        print(f\"❌ Error: Invalid JSON format - {e}\")\n",
-    "        return []\n",
-    "    except Exception as e:\n",
-    "        print(f\"❌ Error loading file: {e}\")\n",
-    "        return []\n",
-    "\n",
-    "def check_span_overlap(span1: Dict, span2: Dict) -> bool:\n",
-    "    \"\"\"Check if two spans overlap.\"\"\"\n",
-    "    start1, end1 = span1['start'], span1['end']\n",
-    "    start2, end2 = span2['start'], span2['end']\n",
-    "\n",
-    "    # Two spans overlap if one starts before the other ends\n",
-    "    return not (end1 <= start2 or end2 <= start1)\n",
-    "\n",
-    "def get_overlap_details(span1: Dict, span2: Dict) -> Dict:\n",
-    "    \"\"\"Get detailed information about the overlap between two spans.\"\"\"\n",
-    "    start1, end1 = span1['start'], span1['end']\n",
-    "    start2, end2 = span2['start'], span2['end']\n",
-    "\n",
-    "    # Calculate overlap boundaries\n",
-    "    overlap_start = max(start1, start2)\n",
-    "    overlap_end = min(end1, end2)\n",
-    "    overlap_length = overlap_end - overlap_start\n",
-    "\n",
-    "    # Calculate overlap percentages\n",
-    "    span1_length = end1 - start1\n",
-    "    span2_length = end2 - start2\n",
-    "    overlap_percent_span1 = (overlap_length / span1_length) * 100 if span1_length > 0 else 0\n",
-    "    overlap_percent_span2 = (overlap_length / span2_length) * 100 if span2_length > 0 else 0\n",
-    "\n",
-    "    return {\n",
-    "        'overlap_start': overlap_start,\n",
-    "        'overlap_end': overlap_end,\n",
-    "        'overlap_length': overlap_length,\n",
-    "        'overlap_percent_span1': overlap_percent_span1,\n",
-    "        'overlap_percent_span2': overlap_percent_span2\n",
-    "    }\n",
-    "\n",
-    "def analyze_overlaps_in_sample(sample: Dict, dataset_name: str, sample_index: int) -> List[Dict]:\n",
-    "    \"\"\"Analyze overlapping spans within a single sample.\"\"\"\n",
-    "    labels = sample.get('labels', [])\n",
-    "    overlaps = []\n",
-    "\n",
-    "    # Check all pairs of labels for overlaps\n",
-    "    for i in range(len(labels)):\n",
-    "        for j in range(i + 1, len(labels)):\n",
-    "            span1 = labels[i]\n",
-    "            span2 = labels[j]\n",
-    "\n",
-    "            if check_span_overlap(span1, span2):\n",
-    "                overlap_details = get_overlap_details(span1, span2)\n",
-    "\n",
-    "                # Extract text snippets\n",
-    "                text = sample.get('text', '')\n",
-    "                span1_text = text[span1['start']:span1['end']]\n",
-    "                span2_text = text[span2['start']:span2['end']]\n",
-    "                overlap_text = text[overlap_details['overlap_start']:overlap_details['overlap_end']]\n",
-    "\n",
-    "                overlap_info = {\n",
-    "                    'dataset': dataset_name,\n",
-    "                    'sample_index': sample_index,\n",
-    "                    'sample_file': sample.get('file', f'sample_{sample_index}'),\n",
-    "                    'text_preview': text[:100] + '...' if len(text) > 100 else text,\n",
-    "                    'span1_label': span1['label'],\n",
-    "                    'span1_start': span1['start'],\n",
-    "                    'span1_end': span1['end'],\n",
-    "                    'span1_text': span1_text,\n",
-    "                    'span2_label': span2['label'],\n",
-    "                    'span2_start': span2['start'],\n",
-    "                    'span2_end': span2['end'],\n",
-    "                    'span2_text': span2_text,\n",
-    "                    'overlap_text': overlap_text,\n",
-    "                    **overlap_details\n",
-    "                }\n",
-    "\n",
-    "                overlaps.append(overlap_info)\n",
-    "\n",
-    "    return overlaps\n",
-    "\n",
-    "def analyze_dataset_overlaps(data: List[Dict], dataset_name: str) -> List[Dict]:\n",
-    "    \"\"\"Analyze all overlapping spans in a dataset.\"\"\"\n",
-    "    all_overlaps = []\n",
-    "\n",
-    "    for i, sample in enumerate(data):\n",
-    "        sample_overlaps = analyze_overlaps_in_sample(sample, dataset_name, i)\n",
-    "        all_overlaps.extend(sample_overlaps)\n",
-    "\n",
-    "    return all_overlaps\n",
-    "\n",
-    "def create_overlap_summary(overlaps: List[Dict]) -> Dict:\n",
-    "    \"\"\"Create a summary of overlap statistics.\"\"\"\n",
-    "    if not overlaps:\n",
-    "        return {\n",
-    "            'total_overlaps': 0,\n",
-    "            'samples_with_overlaps': 0,\n",
-    "            'datasets_affected': set(),\n",
-    "            'label_pairs': {},\n",
-    "            'overlap_types': {}\n",
-    "        }\n",
-    "\n",
-    "    # Basic statistics\n",
-    "    total_overlaps = len(overlaps)\n",
-    "    samples_with_overlaps = len(set((o['dataset'], o['sample_index']) for o in overlaps))\n",
-    "    datasets_affected = set(o['dataset'] for o in overlaps)\n",
-    "\n",
-    "    # Label pair analysis\n",
-    "    label_pairs = defaultdict(int)\n",
-    "    for overlap in overlaps:\n",
-    "        pair = tuple(sorted([overlap['span1_label'], overlap['span2_label']]))\n",
-    "        label_pairs[pair] += 1\n",
-    "\n",
-    "    # Overlap type analysis (by overlap percentage)\n",
-    "    overlap_types = {\n",
-    "        'minor_overlap': 0,      # < 25% overlap\n",
-    "        'moderate_overlap': 0,   # 25-50% overlap\n",
-    "        'major_overlap': 0,      # 50-75% overlap\n",
-    "        'severe_overlap': 0      # > 75% overlap\n",
-    "    }\n",
-    "\n",
-    "    for overlap in overlaps:\n",
-    "        max_overlap_percent = max(overlap['overlap_percent_span1'], overlap['overlap_percent_span2'])\n",
-    "        if max_overlap_percent < 25:\n",
-    "            overlap_types['minor_overlap'] += 1\n",
-    "        elif max_overlap_percent < 50:\n",
-    "            overlap_types['moderate_overlap'] += 1\n",
-    "        elif max_overlap_percent < 75:\n",
-    "            overlap_types['major_overlap'] += 1\n",
-    "        else:\n",
-    "            overlap_types['severe_overlap'] += 1\n",
-    "\n",
-    "    return {\n",
-    "        'total_overlaps': total_overlaps,\n",
-    "        'samples_with_overlaps': samples_with_overlaps,\n",
-    "        'datasets_affected': datasets_affected,\n",
-    "        'label_pairs': dict(label_pairs),\n",
-    "        'overlap_types': overlap_types\n",
-    "    }\n",
-    "\n",
-    "def print_overlap_summary(summary: Dict):\n",
-    "    \"\"\"Print a summary of overlap analysis.\"\"\"\n",
-    "    print(\"=\" * 60)\n",
-    "    print(\"🔍 SPAN OVERLAP ANALYSIS SUMMARY\")\n",
-    "    print(\"=\" * 60)\n",
-    "\n",
-    "    print(f\"\\n📊 OVERVIEW:\")\n",
-    "    print(f\"  Total overlapping span pairs: {summary['total_overlaps']}\")\n",
-    "    print(f\"  Samples with overlaps: {summary['samples_with_overlaps']}\")\n",
-    "    print(f\"  Datasets affected: {', '.join(summary['datasets_affected']) if summary['datasets_affected'] else 'None'}\")\n",
-    "\n",
-    "    if summary['total_overlaps'] > 0:\n",
-    "        print(f\"\\n📈 OVERLAP SEVERITY:\")\n",
-    "        overlap_types = summary['overlap_types']\n",
-    "        for overlap_type, count in overlap_types.items():\n",
-    "            percentage = (count / summary['total_overlaps']) * 100\n",
-    "            print(f\"  {overlap_type.replace('_', ' ').title()}: {count} ({percentage:.1f}%)\")\n",
-    "\n",
-    "        print(f\"\\n🏷️  MOST COMMON OVERLAPPING LABEL PAIRS:\")\n",
-    "        sorted_pairs = sorted(summary['label_pairs'].items(), key=lambda x: x[1], reverse=True)\n",
-    "        for (label1, label2), count in sorted_pairs[:10]:  # Top 10\n",
-    "            print(f\"  {label1} ↔ {label2}: {count} overlaps\")\n",
-    "\n",
-    "    if summary['total_overlaps'] == 0:\n",
-    "        print(f\"\\n✅ No overlapping spans found!\")\n",
-    "\n",
-    "def create_overlap_dataframe(overlaps: List[Dict]) -> pd.DataFrame:\n",
-    "    \"\"\"Create a pandas DataFrame from overlap data.\"\"\"\n",
-    "    if not overlaps:\n",
-    "        return pd.DataFrame()\n",
-    "\n",
-    "    # Select relevant columns for the DataFrame\n",
-    "    df_data = []\n",
-    "    for overlap in overlaps:\n",
-    "        df_data.append({\n",
-    "            'Dataset': overlap['dataset'],\n",
-    "            'Sample_File': overlap['sample_file'],\n",
-    "            'Sample_Index': overlap['sample_index'],\n",
-    "            'Label_1': overlap['span1_label'],\n",
-    "            'Span_1': f\"{overlap['span1_start']}-{overlap['span1_end']}\",\n",
-    "            'Text_1': overlap['span1_text'],\n",
-    "            'Label_2': overlap['span2_label'],\n",
-    "            'Span_2': f\"{overlap['span2_start']}-{overlap['span2_end']}\",\n",
-    "            'Text_2': overlap['span2_text'],\n",
-    "            'Overlap_Text': overlap['overlap_text'],\n",
-    "            'Overlap_Length': overlap['overlap_length'],\n",
-    "            'Overlap_Percent_1': f\"{overlap['overlap_percent_span1']:.1f}%\",\n",
-    "            'Overlap_Percent_2': f\"{overlap['overlap_percent_span2']:.1f}%\"\n",
-    "        })\n",
-    "\n",
-    "    return pd.DataFrame(df_data)\n",
-    "\n",
-    "def create_overlap_visualizations(overlaps: List[Dict], summary: Dict):\n",
-    "    \"\"\"Create visualizations for overlap analysis.\"\"\"\n",
-    "    if not overlaps:\n",
-    "        print(\"No overlaps found - no visualizations to create.\")\n",
-    "        return\n",
-    "\n",
-    "    fig, axes = plt.subplots(2, 2, figsize=(15, 12))\n",
-    "    fig.suptitle('Span Overlap Analysis Visualizations', fontsize=16, fontweight='bold')\n",
-    "\n",
-    "    # 1. Overlap types distribution\n",
-    "    overlap_types = summary['overlap_types']\n",
-    "    types = list(overlap_types.keys())\n",
-    "    counts = list(overlap_types.values())\n",
-    "\n",
-    "    axes[0, 0].bar([t.replace('_', ' ').title() for t in types], counts,\n",
-    "                   color=['lightgreen', 'yellow', 'orange', 'red'], alpha=0.7)\n",
-    "    axes[0, 0].set_title('Overlap Severity Distribution', fontweight='bold')\n",
-    "    axes[0, 0].set_ylabel('Number of Overlaps')\n",
-    "    axes[0, 0].tick_params(axis='x', rotation=45)\n",
-    "\n",
-    "    # 2. Most common overlapping label pairs\n",
-    "    label_pairs = summary['label_pairs']\n",
-    "    sorted_pairs = sorted(label_pairs.items(), key=lambda x: x[1], reverse=True)[:10]\n",
-    "\n",
-    "    if sorted_pairs:\n",
-    "        pairs, pair_counts = zip(*sorted_pairs)\n",
-    "        pair_labels = [f\"{p[0]}\\n↔\\n{p[1]}\" for p in pairs]\n",
-    "\n",
-    "        axes[0, 1].barh(range(len(pairs)), pair_counts, color='lightblue', alpha=0.7)\n",
-    "        axes[0, 1].set_title('Most Common Overlapping Label Pairs', fontweight='bold')\n",
-    "        axes[0, 1].set_xlabel('Number of Overlaps')\n",
-    "        axes[0, 1].set_yticks(range(len(pairs)))\n",
-    "        axes[0, 1].set_yticklabels(pair_labels, fontsize=8)\n",
-    "\n",
-    "    # 3. Overlap length distribution\n",
-    "    overlap_lengths = [o['overlap_length'] for o in overlaps]\n",
-    "    axes[1, 0].hist(overlap_lengths, bins=min(20, max(overlap_lengths)),\n",
-    "                    color='lightcoral', alpha=0.7, edgecolor='black')\n",
-    "    axes[1, 0].set_title('Overlap Length Distribution', fontweight='bold')\n",
-    "    axes[1, 0].set_xlabel('Overlap Length (characters)')\n",
-    "    axes[1, 0].set_ylabel('Frequency')\n",
-    "\n",
-    "    # 4. Overlaps by dataset\n",
-    "    dataset_counts = defaultdict(int)\n",
-    "    for overlap in overlaps:\n",
-    "        dataset_counts[overlap['dataset']] += 1\n",
-    "\n",
-    "    datasets = list(dataset_counts.keys())\n",
-    "    counts = list(dataset_counts.values())\n",
-    "\n",
-    "    axes[1, 1].pie(counts, labels=datasets, autopct='%1.1f%%', startangle=90)\n",
-    "    axes[1, 1].set_title('Overlaps by Dataset', fontweight='bold')\n",
-    "\n",
-    "    plt.tight_layout()\n",
-    "    plt.show()\n",
-    "\n",
-    "def analyze_overlap_patterns(overlaps: List[Dict]):\n",
-    "    \"\"\"Analyze patterns in overlapping spans.\"\"\"\n",
-    "    if not overlaps:\n",
-    "        return\n",
-    "\n",
-    "    print(f\"\\n🔍 DETAILED OVERLAP PATTERNS:\")\n",
-    "    print(\"-\" * 50)\n",
-    "\n",
-    "    # Group by dataset\n",
-    "    dataset_overlaps = defaultdict(list)\n",
-    "    for overlap in overlaps:\n",
-    "        dataset_overlaps[overlap['dataset']].append(overlap)\n",
-    "\n",
-    "    for dataset, dataset_overlaps_list in dataset_overlaps.items():\n",
-    "        print(f\"\\n📁 {dataset.upper()}:\")\n",
-    "        print(f\"   Total overlaps: {len(dataset_overlaps_list)}\")\n",
-    "\n",
-    "        # Show some examples\n",
-    "        for i, overlap in enumerate(dataset_overlaps_list[:3]):  # Show first 3 examples\n",
-    "            print(f\"\\n   Example {i+1}:\")\n",
-    "            print(f\"     File: {overlap['sample_file']}\")\n",
-    "            print(f\"     Labels: {overlap['span1_label']} ↔ {overlap['span2_label']}\")\n",
-    "            print(f\"     Spans: [{overlap['span1_start']}-{overlap['span1_end']}] ↔ [{overlap['span2_start']}-{overlap['span2_end']}]\")\n",
-    "            print(f\"     Text 1: '{overlap['span1_text']}'\")\n",
-    "            print(f\"     Text 2: '{overlap['span2_text']}'\")\n",
-    "            print(f\"     Overlap: '{overlap['overlap_text']}'\")\n",
-    "            print(f\"     Overlap %: {overlap['overlap_percent_span1']:.1f}% / {overlap['overlap_percent_span2']:.1f}%\")\n",
-    "\n",
-    "        if len(dataset_overlaps_list) > 3:\n",
-    "            print(f\"   ... and {len(dataset_overlaps_list) - 3} more overlaps\")\n",
-    "\n",
-    "def analyze_multiple_datasets(dataset_paths: List[Tuple[str, str]]) -> Tuple[List[Dict], pd.DataFrame]:\n",
-    "    \"\"\"Analyze overlaps across multiple datasets.\"\"\"\n",
-    "    all_overlaps = []\n",
-    "\n",
-    "    print(\"🔍 ANALYZING SPAN OVERLAPS ACROSS DATASETS\")\n",
-    "    print(\"=\" * 60)\n",
-    "\n",
-    "    for file_path, dataset_name in dataset_paths:\n",
-    "        print(f\"\\n📁 Analyzing {dataset_name}...\")\n",
-    "        data = load_dataset(file_path)\n",
-    "        if data:\n",
-    "            overlaps = analyze_dataset_overlaps(data, dataset_name)\n",
-    "            all_overlaps.extend(overlaps)\n",
-    "            print(f\"   Found {len(overlaps)} overlapping span pairs\")\n",
-    "\n",
-    "    # Create summary and visualizations\n",
-    "    summary = create_overlap_summary(all_overlaps)\n",
-    "    print_overlap_summary(summary)\n",
-    "\n",
-    "    if all_overlaps:\n",
-    "        analyze_overlap_patterns(all_overlaps)\n",
-    "        create_overlap_visualizations(all_overlaps, summary)\n",
-    "\n",
-    "    # Create DataFrame\n",
-    "    df = create_overlap_dataframe(all_overlaps)\n",
-    "\n",
-    "    return all_overlaps, df\n",
-    "\n",
-    "# Main analysis function\n",
-    "def main():\n",
-    "    \"\"\"Main function to run overlap analysis.\"\"\"\n",
-    "\n",
-    "    # Define dataset paths\n",
-    "    # dataset_paths = [\n",
-    "    #    (\"./train.json\", \"Training\"),\n",
-    "    #    (\"./validation.json\", \"Validation\"),\n",
-    "    #    (\"./test.json\", \"Test\")\n",
-    "    #]\n",
-    "\n",
-    "    dataset_paths = [\n",
-    "        (\"../../../data/original/original_with_spans.json\", \"Full Dataset\")\n",
-    "    ]\n",
-    "\n",
-    "    # Run analysis\n",
-    "    all_overlaps, df = analyze_multiple_datasets(dataset_paths)\n",
-    "\n",
-    "    # Display results\n",
-    "    if not df.empty:\n",
-    "        print(f\"\\n📋 DETAILED OVERLAP RESULTS:\")\n",
-    "        print(\"-\" * 50)\n",
-    "        print(df.to_string(index=False, max_colwidth=50))\n",
-    "\n",
-    "        # Save results to CSV\n",
-    "        output_path = \"../../../data/original/granular_dataset_split/descriptives/span_overlap_analysis_results.csv\"\n",
-    "        df.to_csv(output_path, index=False)\n",
-    "        print(f\"\\n💾 Results saved to: {output_path}\")\n",
-    "    else:\n",
-    "        print(f\"\\n✅ No overlapping spans found in any dataset!\")\n",
-    "\n",
-    "    return all_overlaps, df\n",
-    "\n",
-    "# Example usage for single dataset\n",
-    "def analyze_single_dataset(file_path: str, dataset_name: str):\n",
-    "    \"\"\"Analyze overlaps in a single dataset.\"\"\"\n",
-    "    print(f\"🔍 Analyzing overlaps in {dataset_name}\")\n",
-    "    print(\"-\" * 50)\n",
-    "\n",
-    "    data = load_dataset(file_path)\n",
-    "    if not data:\n",
-    "        return [], pd.DataFrame()\n",
-    "\n",
-    "    overlaps = analyze_dataset_overlaps(data, dataset_name)\n",
-    "    summary = create_overlap_summary(overlaps)\n",
-    "\n",
-    "    print_overlap_summary(summary)\n",
-    "\n",
-    "    if overlaps:\n",
-    "        analyze_overlap_patterns(overlaps)\n",
-    "        create_overlap_visualizations(overlaps, summary)\n",
-    "\n",
-    "    df = create_overlap_dataframe(overlaps)\n",
-    "\n",
-    "    if not df.empty:\n",
-    "        print(f\"\\n📋 OVERLAP DETAILS:\")\n",
-    "        print(df.to_string(index=False, max_colwidth=50))\n",
-    "\n",
-    "    return overlaps, df\n",
-    "\n",
-    "if __name__ == \"__main__\":\n",
-    "    # Run the main analysis\n",
-    "    all_overlaps, results_df = main()\n",
-    "\n",
-    "    # Example: Analyze a single dataset\n",
-    "    # overlaps, df = analyze_single_dataset(\"notebooks/data/granular_dataset_split/train.json\", \"Training\")"
-   ],
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "🔍 ANALYZING SPAN OVERLAPS ACROSS DATASETS\n",
-      "============================================================\n",
-      "\n",
-      "📁 Analyzing Full Dataset...\n",
-      "✓ Successfully loaded dataset from: ../../../data/original/original_with_spans.json\n",
-      "   Found 2 overlapping span pairs\n",
-      "============================================================\n",
-      "🔍 SPAN OVERLAP ANALYSIS SUMMARY\n",
-      "============================================================\n",
-      "\n",
-      "📊 OVERVIEW:\n",
-      "  Total overlapping span pairs: 2\n",
-      "  Samples with overlaps: 2\n",
-      "  Datasets affected: Full Dataset\n",
-      "\n",
-      "📈 OVERLAP SEVERITY:\n",
-      "  Minor Overlap: 0 (0.0%)\n",
-      "  Moderate Overlap: 0 (0.0%)\n",
-      "  Major Overlap: 1 (50.0%)\n",
-      "  Severe Overlap: 1 (50.0%)\n",
-      "\n",
-      "🏷️  MOST COMMON OVERLAPPING LABEL PAIRS:\n",
-      "  FIRMA ↔ FIRMA: 1 overlaps\n",
-      "  NACHNAME ↔ VORNAME: 1 overlaps\n",
-      "\n",
-      "🔍 DETAILED OVERLAP PATTERNS:\n",
-      "--------------------------------------------------\n",
-      "\n",
-      "📁 FULL DATASET:\n",
-      "   Total overlaps: 2\n",
-      "\n",
-      "   Example 1:\n",
-      "     File: 65.txt\n",
-      "     Labels: FIRMA ↔ FIRMA\n",
-      "     Spans: [0-29] ↔ [0-29]\n",
-      "     Text 1: 'Betreuungsbüro \"Schmidtke KG\"'\n",
-      "     Text 2: 'Betreuungsbüro \"Schmidtke KG\"'\n",
-      "     Overlap: 'Betreuungsbüro \"Schmidtke KG\"'\n",
-      "     Overlap %: 100.0% / 100.0%\n",
-      "\n",
-      "   Example 2:\n",
-      "     File: 127.txt\n",
-      "     Labels: VORNAME ↔ NACHNAME\n",
-      "     Spans: [141-147] ↔ [144-150]\n",
-      "     Text 1: 'Dr Fad'\n",
-      "     Text 2: 'Fadime'\n",
-      "     Overlap: 'Fad'\n",
-      "     Overlap %: 50.0% / 50.0%\n"
-     ]
-    },
-    {
-     "data": {
-      "text/plain": [
-       "<Figure size 1500x1200 with 4 Axes>"
-      ],
-      "image/png": ""
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "\n",
-      "📋 DETAILED OVERLAP RESULTS:\n",
-      "--------------------------------------------------\n",
-      "     Dataset Sample_File  Sample_Index Label_1  Span_1                        Text_1  Label_2  Span_2                        Text_2                  Overlap_Text  Overlap_Length Overlap_Percent_1 Overlap_Percent_2\n",
-      "Full Dataset      65.txt            63   FIRMA    0-29 Betreuungsbüro \"Schmidtke KG\"    FIRMA    0-29 Betreuungsbüro \"Schmidtke KG\" Betreuungsbüro \"Schmidtke KG\"              29            100.0%            100.0%\n",
-      "Full Dataset     127.txt           118 VORNAME 141-147                        Dr Fad NACHNAME 144-150                        Fadime                           Fad               3             50.0%             50.0%\n",
-      "\n",
-      "💾 Results saved to: ../../../data/original/granular_dataset_split/descriptives/span_overlap_analysis_results.csv\n"
-     ]
-    }
-   ],
-   "execution_count": 6
-  }
- ],
- "metadata": {
-  "kernelspec": {
-   "display_name": "Python 3",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 2
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython2",
-   "version": "2.7.6"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 5
-}
+
+def analyze_overlaps_in_sample(sample: Dict, dataset_name: str, sample_index: int) -> List[Dict]:
+    """Analyze overlapping spans within a single sample."""
+    labels = sample.get('labels', [])
+    overlaps = []
+
+    # Check all pairs of labels for overlaps
+    for i in range(len(labels)):
+        for j in range(i + 1, len(labels)):
+            span1 = labels[i]
+            span2 = labels[j]
+
+            if check_span_overlap(span1, span2):
+                overlap_details = get_overlap_details(span1, span2)
+
+                # Extract text snippets
+                text = sample.get('text', '')
+                span1_text = text[span1['start']:span1['end']]
+                span2_text = text[span2['start']:span2['end']]
+                overlap_text = text[overlap_details['overlap_start']:overlap_details['overlap_end']]
+
+                overlap_info = {
+                    'dataset': dataset_name,
+                    'sample_index': sample_index,
+                    'sample_file': sample.get('file', f'sample_{sample_index}'),
+                    'text_preview': text[:100] + '...' if len(text) > 100 else text,
+                    'span1_label': span1['label'],
+                    'span1_start': span1['start'],
+                    'span1_end': span1['end'],
+                    'span1_text': span1_text,
+                    'span2_label': span2['label'],
+                    'span2_start': span2['start'],
+                    'span2_end': span2['end'],
+                    'span2_text': span2_text,
+                    'overlap_text': overlap_text,
+                    **overlap_details
+                }
+
+                overlaps.append(overlap_info)
+
+    return overlaps
+
+def analyze_dataset_overlaps(data: List[Dict], dataset_name: str) -> List[Dict]:
+    """Analyze all overlapping spans in a dataset."""
+    all_overlaps = []
+
+    for i, sample in enumerate(data):
+        sample_overlaps = analyze_overlaps_in_sample(sample, dataset_name, i)
+        all_overlaps.extend(sample_overlaps)
+
+    return all_overlaps
+
+def create_overlap_summary(overlaps: List[Dict]) -> Dict:
+    """Create a summary of overlap statistics."""
+    if not overlaps:
+        return {
+            'total_overlaps': 0,
+            'samples_with_overlaps': 0,
+            'datasets_affected': set(),
+            'label_pairs': {},
+            'overlap_types': {}
+        }
+
+    # Basic statistics
+    total_overlaps = len(overlaps)
+    samples_with_overlaps = len(set((o['dataset'], o['sample_index']) for o in overlaps))
+    datasets_affected = set(o['dataset'] for o in overlaps)
+
+    # Label pair analysis
+    label_pairs = defaultdict(int)
+    for overlap in overlaps:
+        pair = tuple(sorted([overlap['span1_label'], overlap['span2_label']]))
+        label_pairs[pair] += 1
+
+    # Overlap type analysis (by overlap percentage)
+    overlap_types = {
+        'minor_overlap': 0,      # < 25% overlap
+        'moderate_overlap': 0,   # 25-50% overlap
+        'major_overlap': 0,      # 50-75% overlap
+        'severe_overlap': 0      # > 75% overlap
+    }
+
+    for overlap in overlaps:
+        max_overlap_percent = max(overlap['overlap_percent_span1'], overlap['overlap_percent_span2'])
+        if max_overlap_percent < 25:
+            overlap_types['minor_overlap'] += 1
+        elif max_overlap_percent < 50:
+            overlap_types['moderate_overlap'] += 1
+        elif max_overlap_percent < 75:
+            overlap_types['major_overlap'] += 1
+        else:
+            overlap_types['severe_overlap'] += 1
+
+    return {
+        'total_overlaps': total_overlaps,
+        'samples_with_overlaps': samples_with_overlaps,
+        'datasets_affected': datasets_affected,
+        'label_pairs': dict(label_pairs),
+        'overlap_types': overlap_types
+    }
+
+def print_overlap_summary(summary: Dict):
+    """Print a summary of overlap analysis."""
+    print("=" * 60)
+    print("🔍 SPAN OVERLAP ANALYSIS SUMMARY")
+    print("=" * 60)
+
+    print(f"\n📊 OVERVIEW:")
+    print(f"  Total overlapping span pairs: {summary['total_overlaps']}")
+    print(f"  Samples with overlaps: {summary['samples_with_overlaps']}")
+    print(f"  Datasets affected: {', '.join(summary['datasets_affected']) if summary['datasets_affected'] else 'None'}")
+
+    if summary['total_overlaps'] > 0:
+        print(f"\n📈 OVERLAP SEVERITY:")
+        overlap_types = summary['overlap_types']
+        for overlap_type, count in overlap_types.items():
+            percentage = (count / summary['total_overlaps']) * 100
+            print(f"  {overlap_type.replace('_', ' ').title()}: {count} ({percentage:.1f}%)")
+
+        print(f"\n🏷️  MOST COMMON OVERLAPPING LABEL PAIRS:")
+        sorted_pairs = sorted(summary['label_pairs'].items(), key=lambda x: x[1], reverse=True)
+        for (label1, label2), count in sorted_pairs[:10]:  # Top 10
+            print(f"  {label1} ↔ {label2}: {count} overlaps")
+
+    if summary['total_overlaps'] == 0:
+        print(f"\n✅ No overlapping spans found!")
+
+def create_overlap_dataframe(overlaps: List[Dict]) -> pd.DataFrame:
+    """Create a pandas DataFrame from overlap data."""
+    if not overlaps:
+        return pd.DataFrame()
+
+    # Select relevant columns for the DataFrame
+    df_data = []
+    for overlap in overlaps:
+        df_data.append({
+            'Dataset': overlap['dataset'],
+            'Sample_File': overlap['sample_file'],
+            'Sample_Index': overlap['sample_index'],
+            'Label_1': overlap['span1_label'],
+            'Span_1': f"{overlap['span1_start']}-{overlap['span1_end']}",
+            'Text_1': overlap['span1_text'],
+            'Label_2': overlap['span2_label'],
+            'Span_2': f"{overlap['span2_start']}-{overlap['span2_end']}",
+            'Text_2': overlap['span2_text'],
+            'Overlap_Text': overlap['overlap_text'],
+            'Overlap_Length': overlap['overlap_length'],
+            'Overlap_Percent_1': f"{overlap['overlap_percent_span1']:.1f}%",
+            'Overlap_Percent_2': f"{overlap['overlap_percent_span2']:.1f}%"
+        })
+
+    return pd.DataFrame(df_data)
+
+def create_overlap_visualizations(overlaps: List[Dict], summary: Dict):
+    """Create visualizations for overlap analysis."""
+    if not overlaps:
+        print("No overlaps found - no visualizations to create.")
+        return
+
+    fig, axes = plt.subplots(2, 2, figsize=(15, 12))
+    fig.suptitle('Span Overlap Analysis Visualizations', fontsize=16, fontweight='bold')
+
+    # 1. Overlap types distribution
+    overlap_types = summary['overlap_types']
+    types = list(overlap_types.keys())
+    counts = list(overlap_types.values())
+
+    axes[0, 0].bar([t.replace('_', ' ').title() for t in types], counts,
+                   color=['lightgreen', 'yellow', 'orange', 'red'], alpha=0.7)
+    axes[0, 0].set_title('Overlap Severity Distribution', fontweight='bold')
+    axes[0, 0].set_ylabel('Number of Overlaps')
+    axes[0, 0].tick_params(axis='x', rotation=45)
+
+    # 2. Most common overlapping label pairs
+    label_pairs = summary['label_pairs']
+    sorted_pairs = sorted(label_pairs.items(), key=lambda x: x[1], reverse=True)[:10]
+
+    if sorted_pairs:
+        pairs, pair_counts = zip(*sorted_pairs)
+        pair_labels = [f"{p[0]}\n↔\n{p[1]}" for p in pairs]
+
+        axes[0, 1].barh(range(len(pairs)), pair_counts, color='lightblue', alpha=0.7)
+        axes[0, 1].set_title('Most Common Overlapping Label Pairs', fontweight='bold')
+        axes[0, 1].set_xlabel('Number of Overlaps')
+        axes[0, 1].set_yticks(range(len(pairs)))
+        axes[0, 1].set_yticklabels(pair_labels, fontsize=8)
+
+    # 3. Overlap length distribution
+    overlap_lengths = [o['overlap_length'] for o in overlaps]
+    axes[1, 0].hist(overlap_lengths, bins=min(20, max(overlap_lengths)),
+                    color='lightcoral', alpha=0.7, edgecolor='black')
+    axes[1, 0].set_title('Overlap Length Distribution', fontweight='bold')
+    axes[1, 0].set_xlabel('Overlap Length (characters)')
+    axes[1, 0].set_ylabel('Frequency')
+
+    # 4. Overlaps by dataset
+    dataset_counts = defaultdict(int)
+    for overlap in overlaps:
+        dataset_counts[overlap['dataset']] += 1
+
+    datasets = list(dataset_counts.keys())
+    counts = list(dataset_counts.values())
+
+    axes[1, 1].pie(counts, labels=datasets, autopct='%1.1f%%', startangle=90)
+    axes[1, 1].set_title('Overlaps by Dataset', fontweight='bold')
+
+    plt.tight_layout()
+    plt.show()
+
+def analyze_overlap_patterns(overlaps: List[Dict]):
+    """Analyze patterns in overlapping spans."""
+    if not overlaps:
+        return
+
+    print(f"\n🔍 DETAILED OVERLAP PATTERNS:")
+    print("-" * 50)
+
+    # Group by dataset
+    dataset_overlaps = defaultdict(list)
+    for overlap in overlaps:
+        dataset_overlaps[overlap['dataset']].append(overlap)
+
+    for dataset, dataset_overlaps_list in dataset_overlaps.items():
+        print(f"\n📁 {dataset.upper()}:")
+        print(f"   Total overlaps: {len(dataset_overlaps_list)}")
+
+        # Show some examples
+        for i, overlap in enumerate(dataset_overlaps_list[:3]):  # Show first 3 examples
+            print(f"\n   Example {i+1}:")
+            print(f"     File: {overlap['sample_file']}")
+            print(f"     Labels: {overlap['span1_label']} ↔ {overlap['span2_label']}")
+            print(f"     Spans: [{overlap['span1_start']}-{overlap['span1_end']}] ↔ [{overlap['span2_start']}-{overlap['span2_end']}]")
+            print(f"     Text 1: '{overlap['span1_text']}'")
+            print(f"     Text 2: '{overlap['span2_text']}'")
+            print(f"     Overlap: '{overlap['overlap_text']}'")
+            print(f"     Overlap %: {overlap['overlap_percent_span1']:.1f}% / {overlap['overlap_percent_span2']:.1f}%")
+
+        if len(dataset_overlaps_list) > 3:
+            print(f"   ... and {len(dataset_overlaps_list) - 3} more overlaps")
+
+def analyze_multiple_datasets(dataset_paths: List[Tuple[str, str]]) -> Tuple[List[Dict], pd.DataFrame]:
+    """Analyze overlaps across multiple datasets."""
+    all_overlaps = []
+
+    print("🔍 ANALYZING SPAN OVERLAPS ACROSS DATASETS")
+    print("=" * 60)
+
+    for file_path, dataset_name in dataset_paths:
+        print(f"\n📁 Analyzing {dataset_name}...")
+        data = load_dataset(file_path)
+        if data:
+            overlaps = analyze_dataset_overlaps(data, dataset_name)
+            all_overlaps.extend(overlaps)
+            print(f"   Found {len(overlaps)} overlapping span pairs")
+
+    # Create summary and visualizations
+    summary = create_overlap_summary(all_overlaps)
+    print_overlap_summary(summary)
+
+    if all_overlaps:
+        analyze_overlap_patterns(all_overlaps)
+        create_overlap_visualizations(all_overlaps, summary)
+
+    # Create DataFrame
+    df = create_overlap_dataframe(all_overlaps)
+
+    return all_overlaps, df
+
+# Main analysis function
+def main():
+    """Main function to run overlap analysis."""
+
+    # Define dataset paths
+    # dataset_paths = [
+    #    ("./train.json", "Training"),
+    #    ("./validation.json", "Validation"),
+    #    ("./test.json", "Test")
+    #]
+
+    dataset_paths = [
+        ("../../../data/original/original_with_spans.json", "Full Dataset")
+    ]
+
+    # Run analysis
+    all_overlaps, df = analyze_multiple_datasets(dataset_paths)
+
+    # Display results
+    if not df.empty:
+        print(f"\n📋 DETAILED OVERLAP RESULTS:")
+        print("-" * 50)
+        print(df.to_string(index=False, max_colwidth=50))
+
+        # Save results to CSV
+        output_path = "../../../data/original/granular_dataset_split/descriptives/span_overlap_analysis_results.csv"
+        df.to_csv(output_path, index=False)
+        print(f"\n💾 Results saved to: {output_path}")
+    else:
+        print(f"\n✅ No overlapping spans found in any dataset!")
+
+    return all_overlaps, df
+
+# Example usage for single dataset
+def analyze_single_dataset(file_path: str, dataset_name: str):
+    """Analyze overlaps in a single dataset."""
+    print(f"🔍 Analyzing overlaps in {dataset_name}")
+    print("-" * 50)
+
+    data = load_dataset(file_path)
+    if not data:
+        return [], pd.DataFrame()
+
+    overlaps = analyze_dataset_overlaps(data, dataset_name)
+    summary = create_overlap_summary(overlaps)
+
+    print_overlap_summary(summary)
+
+    if overlaps:
+        analyze_overlap_patterns(overlaps)
+        create_overlap_visualizations(overlaps, summary)
+
+    df = create_overlap_dataframe(overlaps)
+
+    if not df.empty:
+        print(f"\n📋 OVERLAP DETAILS:")
+        print(df.to_string(index=False, max_colwidth=50))
+
+    return overlaps, df
+
+if __name__ == "__main__":
+    # Run the main analysis
+    all_overlaps, results_df = main()
+
+    # Example: Analyze a single dataset
+    # overlaps, df = analyze_single_dataset("notebooks/data/granular_dataset_split/train.json", "Training")
\ No newline at end of file
